if game.GameId == 7709344486 then  --- Doors Lobby
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", -- Required
	Text = "正在加载...偷走脑红...", -- Required
	Icon = "rbxassetid://119970903874014" -- Optional
})

game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
  fireproximityprompt(prompt)
end)
local Doors
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local ProximityPromptService = game:GetService("ProximityPromptService")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MovementControlGui"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = player:WaitForChild("PlayerGui")

local backgroundFrame = Instance.new("Frame")
backgroundFrame.Name = "Background"
backgroundFrame.Size = UDim2.new(0, 220, 0, 60)
backgroundFrame.Position = UDim2.new(1, -230, 0, 10)
backgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
backgroundFrame.BorderSizePixel = 0
backgroundFrame.Active = true
backgroundFrame.Parent = screenGui

local uiCornerBg = Instance.new("UICorner")
uiCornerBg.CornerRadius = UDim.new(0, 10)
uiCornerBg.Parent = backgroundFrame

local buttonFrame = Instance.new("Frame")
buttonFrame.Name = "ButtonFrame"
buttonFrame.Size = UDim2.new(0, 200, 0, 30)
buttonFrame.Position = UDim2.new(0, 10, 0, 5)
buttonFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
buttonFrame.BorderSizePixel = 0
buttonFrame.Parent = backgroundFrame

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 10)
uiCorner.Parent = buttonFrame

local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 100, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(130, 50, 230))
})
uiGradient.Rotation = 45
uiGradient.Parent = buttonFrame

local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 2
uiStroke.Color = Color3.fromRGB(50, 50, 50)
uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
uiStroke.Parent = buttonFrame

local textButton = Instance.new("TextButton")
textButton.Name = "MainButton"
textButton.Size = UDim2.new(1, -10, 1, -10)
textButton.Position = UDim2.new(0, 5, 0, 5)
textButton.BackgroundTransparency = 1
textButton.Text = "开始"
textButton.TextColor3 = Color3.fromRGB(255, 255, 255)
textButton.TextSize = 18
textButton.Font = Enum.Font.GothamBold
textButton.Parent = buttonFrame

local subtitleLabel = Instance.new("TextLabel")
subtitleLabel.Name = "Subtitle"
subtitleLabel.Size = UDim2.new(1, -20, 0, 15)
subtitleLabel.Position = UDim2.new(0, 10, 0, 40)
subtitleLabel.BackgroundTransparency = 1
subtitleLabel.Text = "Rb脚本中心付费版"
subtitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
subtitleLabel.TextSize = 12
subtitleLabel.Font = Enum.Font.Gotham
subtitleLabel.TextXAlignment = Enum.TextXAlignment.Center
subtitleLabel.Parent = backgroundFrame

do
    local dragging, dragStart, startPos
    backgroundFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = backgroundFrame.Position
        end
    end)
    backgroundFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            backgroundFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

local itemName = "Laser Cape"
local normalSpeed = 20
local speed = 650
local speedConnection = nil
local isSpeedActive = false
local isActive = false

local customPart, followConn, slowConn

local function FindDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return nil,nil end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox and hitbox:IsA("BasePart") then
                    local cf = hitbox.CFrame
                    local size = hitbox.Size / 2
                    local offset = -cf.LookVector * (size.Z + 10)
                    return hitbox, cf.Position + offset, cf.LookVector
                end
            end
        end
    end
    return nil,nil,nil
end

function addpart()
    if customPart then return end
    local hitbox,pos = FindDelivery()
    if not hitbox then return end
    local part = Instance.new("Part")
    part.Size = Vector3.new(10,5,10)
    part.Anchored = true
    part.Position = pos
    part.Color = Color3.fromRGB(255,0,0)
    part.Material = Enum.Material.Neon
    part.Parent = workspace
    customPart = part
    followConn = RunService.Heartbeat:Connect(function()
        if customPart and hitbox and hitbox.Parent then
            local cf = hitbox.CFrame
            local size = hitbox.Size/4
            local offset = -cf.LookVector * (size.Z+15)
            customPart.CFrame = CFrame.new(cf.Position+offset)
        end
    end)
    slowConn = RunService.Heartbeat:Connect(function()
        if customPart then
            for _,plr in pairs(Players:GetPlayers()) do
                if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp2 = plr.Character.HumanoidRootPart
                    local hum = plr.Character:FindFirstChild("Humanoid")
                    if hum and (hrp2.Position - customPart.Position).Magnitude <= 20 then
                        hum.WalkSpeed = 0.1
                        hum.JumpPower = 0.1
                    end
                end
            end
        end
    end)
end

function removepart()
    if customPart then customPart:Destroy() customPart = nil end
    if followConn then followConn:Disconnect() end
    if slowConn then slowConn:Disconnect() end
end

local floor1 = {
    Vector3.new(-457, -8, -100), Vector3.new(-457, -8, 7), Vector3.new(-456, -8, 114), Vector3.new(-456, -8, 221),
    Vector3.new(-363, -8, 221), Vector3.new(-364, -8, 112), Vector3.new(-365, -8, 4), Vector3.new(-364, -8, -103)
}
local floor2 = {
    Vector3.new(-522, 12, -132), Vector3.new(-521, 12, -25), Vector3.new(-523, 12, 83), Vector3.new(-521, 12, 190),
    Vector3.new(-300, 12, -70), Vector3.new(-298, 12, 36), Vector3.new(-299, 12, 143), Vector3.new(-299, 12, 250)
}
local floor2Secondary = {
    [Vector3.new(-522, 12, -132)] = Vector3.new(-463, -8, -129),
    [Vector3.new(-521, 12, -25)] = Vector3.new(-471, -8, -32),
    [Vector3.new(-523, 12, 83)] = Vector3.new(-469, -8, 81),
    [Vector3.new(-521, 12, 190)] = Vector3.new(-468, -8, 188),
    [Vector3.new(-300, 12, -70)] = Vector3.new(-351, -8, -68),
    [Vector3.new(-298, 12, 36)] = Vector3.new(-351, -8, 39),
    [Vector3.new(-299, 12, 143)] = Vector3.new(-350, -8, 146),
    [Vector3.new(-299, 12, 250)] = Vector3.new(-353, -8, 251)
}

local function getCurrentFloor()
    local yPos = hrp.Position.Y
    if yPos >= -8 and yPos <= -1 then
        return floor1, "floor1"
    elseif yPos >= 8 and yPos <= 15 then
        return floor2, "floor2"
    elseif yPos >= 16 then
        return nil, "floor3"
    else
        return floor1, "floor1"
    end
end

local function checkFloor3()
    local _, floorName = getCurrentFloor()
    if floorName == "floor3" then
        StarterGui:SetCore("SendNotification", {
            Title = "Jack 827",
            Text = "不支持三楼",
            Duration = 10
        })
        return true
    end
    return false
end

local function enableSpeedBoost()
    if speedConnection then
        speedConnection:Disconnect()
    end
    isSpeedActive = true
    speedConnection = RunService.Heartbeat:Connect(function()
        if humanoid and hrp and humanoid.MoveDirection.Magnitude > 0 then
            local moveDir = humanoid.MoveDirection
            hrp.Velocity = Vector3.new(moveDir.X * speed, hrp.Velocity.Y, moveDir.Z * speed)
        end
    end)
end
local function disableSpeedBoost()
    if speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
    end
    isSpeedActive = false
    humanoid.WalkSpeed = normalSpeed
    hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
end

function stopAll()
    isActive = false
    disableSpeedBoost()
    if humanoid then
        humanoid.PlatformStand = false
    end
    if hrp then
        hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
    end
end

local function findClosestLocation(floor)
    local closestLocation = nil
    local shortestDistance = math.huge
    for _, location in ipairs(floor) do
        local distance = (hrp.Position - location).Magnitude
        if distance < shortestDistance then
            shortestDistance = distance
            closestLocation = location
        end
    end
    return closestLocation
end

local function useRemoteOnce()
    local remote = ReplicatedStorage:FindFirstChild("Packages")
    if remote then
        remote = remote:FindFirstChild("Net")
        if remote then
            remote = remote:FindFirstChild("RE/UseItem")
            if remote and game.Players.LocalPlayer.Character:FindFirstChild("LeftUpperArm") then
                local args = {
                    Vector3.new(-309.9, -4.71, 221.58),
                    game.Players.LocalPlayer.Character:WaitForChild("LeftUpperArm")
                }
                remote:FireServer(unpack(args))
            end
        end
    end
end

local function autoWalkTo(targetPosition, walkSpeed)
    walkSpeed = walkSpeed or 50
    local reached = false
    spawn(function()
        while not reached and character and hrp and isActive do
            local direction = (targetPosition - hrp.Position)
            local distance = direction.Magnitude
            if distance < 1.4 then
                reached = true
                break
            end
            direction = direction.Unit
            hrp.Velocity = Vector3.new(direction.X * walkSpeed, hrp.Velocity.Y, direction.Z * walkSpeed)
            task.wait()
        end
        if hrp then
            hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
        end
    end)
    repeat task.wait() until reached or not isActive
    return reached
end

local function FindDeliveryPos()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return nil,nil end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox and hitbox:IsA("BasePart") then
                    local cf = hitbox.CFrame
                    local size = hitbox.Size / 2
                    local offset = -cf.LookVector * (size.Z + 10)
                    return cf.Position + offset, cf.LookVector
                end
            end
        end
    end
    return nil,nil
end

function activate()
    if checkFloor3() then return end
    isActive = true
    local currentFloor, currentFloorName = getCurrentFloor()
    local item = character:FindFirstChild(itemName) or player.Backpack:FindFirstChild(itemName)
    if not item then isActive = false return end
    humanoid:EquipTool(item)
    useRemoteOnce()
    enableSpeedBoost()
    local closestLocation = findClosestLocation(currentFloor)
    if closestLocation then
        local success = autoWalkTo(closestLocation, 700)
        if not success or not isActive then disableSpeedBoost() isActive = false return end
        if currentFloorName == "floor2" and floor2Secondary[closestLocation] then
            local secondarySuccess = autoWalkTo(floor2Secondary[closestLocation], 600)
            if not secondarySuccess or not isActive then disableSpeedBoost() isActive = false return end
        end
    else
        disableSpeedBoost()
        isActive = false
        return
    end
    local plotPos, lookVector = FindDeliveryPos()
    if plotPos and lookVector then
        autoWalkTo(plotPos, 900)
        disableSpeedBoost()
    else
        disableSpeedBoost()
    end
    isActive = false
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    hrp = character:WaitForChild("HumanoidRootPart")
    if isSpeedActive then
        enableSpeedBoost()
    end
end)

local running = false
local waitingForInteraction = false

local function StopAllModes()
    stopAll()
    running = false
    waitingForInteraction = false
    textButton.Text = "开始"
    subtitleLabel.Text = "已停止"
end

local function StartRoutine()
    if running then return end
    running = true
    subtitleLabel.Text = "执行中..."
    activate()
    running = false
    StopAllModes()
end

local function StartWaiting()
    if running or waitingForInteraction then return end
    waitingForInteraction = true
    textButton.Text = "停止"
    subtitleLabel.Text = "等待..."
end

textButton.MouseButton1Click:Connect(function()
    if not waitingForInteraction and not running then
        StartWaiting()
    else
        StopAllModes()
    end
end)

ProximityPromptService.PromptTriggered:Connect(function(prompt, plr)
    if plr ~= player then return end
    if not waitingForInteraction then return end
    waitingForInteraction = false
    subtitleLabel.Text = "等待1.4秒..."
    task.delay(1.4, function()
        if not running and not waitingForInteraction then
            StartRoutine()
        end
    end)
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
elseif game.GameId == 2440500124 then  --- Doors Lobby
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", -- Required
	Text = "正在加载...Doors...", -- Required
	Icon = "rbxassetid://119970903874014" -- Optional
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

local EntityModules = game:GetService("ReplicatedStorage").ModulesClient.EntityModules
local gameData = game.ReplicatedStorage:WaitForChild("GameData")
local floor = gameData:WaitForChild("Floor")
local isMines = floor.Value == "Mines"
local isHotel = floor.Value == "Hotel"
local isBackdoor = floor.Value == "Backdoor"
local isGarden = floor.Value == "Garden"

function Distance(pos)
	if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
		return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - pos).Magnitude
	end
end

_G.GetOldBright = {
	Brightness = game.Lighting.Brightness,
	ClockTime = game.Lighting.ClockTime,
	FogEnd = game.Lighting.FogEnd,
	GlobalShadows = game.Lighting.GlobalShadows,
	OutdoorAmbient = game.Lighting.OutdoorAmbient
}

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = ((isHotel and "Rb脚本中心 | 酒店") or (isMines and "Rb脚本中心 | 矿井") or (isBackdoor and "Rb脚本中心 | 后门")),
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "互动功能", Icon = "layout-grid" }),
    ESPgn = Tabs.gn:Tab({ Title = "视觉功能", Icon = "layout-grid" }),
    pbgn = Tabs.gn:Tab({ Title = "屏蔽实体", Icon = "layout-grid" }),
    tzgn = Tabs.gn:Tab({ Title = "通知功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})



local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(Value)
        _G.WalkSpeedTp = Value
    end
})

local featureToggle = TabHandles.Elements:Toggle({
    Title = "开启速度",
    Value = false,
    Callback = function(Value) 
        _G.SpeedWalk = Value
while _G.SpeedWalk do
if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.WalkSpeedTp
end
task.wait()
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启速度" or "已关闭速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

local gnSlider = TabHandles.gn:Slider({
    Title = "自动捡钥匙距离",
    Value = { Min = 0, Max = 15, Default = 15 },
    Callback = function(val)
        val = keyrange
    end
})

local gnSlider = TabHandles.gn:Slider({
    Title = "自动拉拉杆距离",
    Value = { Min = 0, Max = 15, Default = 15 },
    Callback = function(val)
        val = leverrange
    end
})

local gnSlider = TabHandles.gn:Slider({
    Title = "自动拾起书距离",
    Value = { Min = 0, Max = 15, Default = 15 },
    Callback = function(val)
        val = bookrange
    end
})

local pickupaura

TabHandles.gn:Toggle({
    Title = "自动捡钥匙",
    Icon = "check",
    Value = false,
    Callback = function(val) 

pickupaura = val

        repeat task.wait(.5)

            for _,v in pairs(bullshittable.KeyObtain) do

                pcall(function()

                    local mag = (lplr.Character.HumanoidRootPart.Position - v.Parent.Hitbox.Position).magnitude

                    if mag < keyrange then 

                        fireproximityprompt(v)

                    end

                end)

             end

        until not pickupaura 

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动捡钥匙" or "已关闭自动捡钥匙",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

local leveraura

TabHandles.gn:Toggle({
    Title = "自动拉拉杆",
    Icon = "check",
    Value = false,
    Callback = function(val) 

leveraura = val

        repeat task.wait(.5)

            for _,v in pairs(bullshittable.LeverForGate) do

                pcall(function()

                    local mag = (lplr.Character.HumanoidRootPart.Position - v.Parent.Main.Position).magnitude

                    if mag < leverrange then 

                        fireproximityprompt(v)

                    end

                end)

             end

        until not leveraura

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动拉拉杆" or "已关闭自动拉拉杆",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

local bookaura

TabHandles.gn:Toggle({
    Title = "自动拾起书",
    Icon = "check",
    Value = false,
    Callback = function(val) 

bookaura = val

        repeat task.wait(.5)

            for _,v in pairs(bullshittable.LiveHintBook) do

                pcall(function()

                    local mag = (lplr.HumanoidRootPart.Position - v.Parent.Cover2.Position).magnitude

                    if mag < bookrange then 

                        fireproximityprompt(v)

                    end

                end)

             end

        until not bookaura

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动拾起书" or "已关闭自动拾起书",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.gn:Toggle({
    Title = "即时互动",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.NoCooldownProximity = Value
if _G.NoCooldownProximity == true then
for i, v in pairs(workspace:GetDescendants()) do
if v.ClassName == "ProximityPrompt" then
v.HoldDuration = 0
end
end
CooldownProximity = workspace.DescendantAdded:Connect(function(Cooldown)
if _G.NoCooldownProximity == true then
if Cooldown:IsA("ProximityPrompt") then
Cooldown.HoldDuration = 0
end
end
end)
else
if CooldownProximity then
CooldownProximity:Disconnect()
CooldownProximity = nil
end
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启即时互动" or "已关闭即时互动",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

_G.Aura = {
    "ActivateEventPrompt",
    "AwesomePrompt",
    "FusesPrompt",
    "HerbPrompt",
    "LeverPrompt",
    "LootPrompt",
    "ModulePrompt",
    "SkullPrompt",
    "UnlockPrompt",
    "ValvePrompt",
}

TabHandles.gn:Toggle({
    Title = "自动互动",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.AutoLoot = Value
if _G.AutoLoot then
lootables = {}
local function LootCheck(v)
    if not table.find(lootables, v) and v.Name ~= "Groundskeeper" and v:IsA("ProximityPrompt") and table.find(_G.Aura, v.Name) then
        table.insert(lootables, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("ProximityPrompt") then
	LootCheck(v)
end
end
ChildAllNext = workspace.DescendantAdded:Connect(function(v)
if v:IsA("ProximityPrompt") then
	LootCheck(v)
end
end)
RemoveChild = workspace.DescendantRemoving:Connect(function(v)
    for i = #lootables, 1, -1 do
        if lootables[i] == v then
            table.remove(lootables, i)
            break
        end
    end
end)
else
if ChildAllNext then
ChildAllNext:Disconnect()
ChildAllNext = nil
end
if RemoveChild then
RemoveChild:Disconnect()
RemoveChild = nil
end
end
while _G.AutoLoot do
for i, v in pairs(lootables) do
	if v:IsA("ProximityPrompt") and table.find(_G.Aura, v.Name) and (v:GetAttribute("Interactions") == nil or v:GetAttribute("Interactions") <= 2) then
		if Distance(v.Parent:GetPivot().Position) <= 12 then
			fireproximityprompt(v)
		end
	end
end
task.wait(0.1)
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动互动" or "已关闭自动互动",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "全图高亮",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.FullBright = Value
while _G.FullBright do
game.Lighting.Brightness = 2
game.Lighting.ClockTime = 14
game.Lighting.FogEnd = 100000
game.Lighting.GlobalShadows = false
game.Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
task.wait()
end
for i, v in pairs(_G.GetOldBright) do
game.Lighting[i] = v
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启全图高亮",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "去雾",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.Nofog = Value
while _G.Nofog do
game:GetService("Lighting").FogStart = 100000
game:GetService("Lighting").FogEnd = 200000
for i, v in pairs(game:GetService("Lighting"):GetChildren()) do
if v.ClassName == "Atmosphere" then
v.Density = 0
v.Haze = 0
end
end
task.wait()
end
game:GetService("Lighting").FogStart = 0
game:GetService("Lighting").FogEnd = 1000
for i, v in pairs(game:GetService("Lighting"):GetChildren()) do
if v.ClassName == "Atmosphere" then
v.Density = 0.3
v.Haze = 1
end
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启全图高亮",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})


if not isGarden then
TabHandles.ESPgn:Toggle({
    Title = (((isHotel or isBackdoor) and "钥匙/拉杆透视") or (isMines and "保险丝透视")),
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspKey = Value
if _G.EspKey == false then
_G.KeyAdd = {}
if KeySpawn then
KeySpawn:Disconnect()
KeySpawn = nil
end
if KeyRemove then
KeyRemove:Disconnect()
KeyRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name:find("Key") or v.Name == "LeverForGate" or v.Name:find("FuseObtain") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function Keys(v)
if ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v:FindFirstChild("Hitbox")) or (v.Name == "LeverForGate" and v.PrimaryPart) then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(0, 0, 255)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(0, 0, 255)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(0, 0, 255) 
	Highlight.OutlineColor = Color3.fromRGB(0, 0, 255) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and ((v.Name == "LeverForGate" and "拉杆") or (v.Name:find("Key") and "钥匙") or (v.Name:find("FuseObtain") and "保险丝")) or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance((v.Name == "LeverForGate" and v.PrimaryPart.Position) or ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v.Hitbox.Position))).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckKey(v)
    if not table.find(_G.KeyAdd, v) and ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v:FindFirstChild("Hitbox")) or (v.Name == "LeverForGate" and v.PrimaryPart) then
        table.insert(_G.KeyAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckKey(v)
end
KeySpawn = workspace.DescendantAdded:Connect(function(v)
    CheckKey(v)
end)
KeyRemove = workspace.DescendantRemoving:Connect(function(v)
    for i = #_G.KeyAdd, 1, -1 do
        if _G.KeyAdd[i] == v then
            table.remove(_G.KeyAdd, i)
            break
        end
    end
end)
end
while _G.EspKey do
for i, v in pairs(_G.KeyAdd) do
if v:IsA("Model") then
Keys(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})
end

TabHandles.ESPgn:Toggle({
    Title = "门透视",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspDoor = Value
if _G.EspDoor == false then
for _, v in pairs(game.Workspace:FindFirstChild("CurrentRooms"):GetChildren()) do 
if v:isA("Model") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
end
while _G.EspDoor do
for i, v in pairs(game.Workspace:FindFirstChild("CurrentRooms"):GetChildren()) do
if v:IsA("Model") and v:FindFirstChild("Door") and v.Door:FindFirstChild("Door") then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(0, 255, 0)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(0, 255, 0)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(0, 255, 0) 
	Highlight.OutlineColor = Color3.fromRGB(0, 255, 0) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v.Door
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and "门 "..((v.Door:FindFirstChild("Sign") and v.Door.Sign:FindFirstChild("Stinker") and v.Door.Sign.Stinker.Text) or (v.Door.Sign:FindFirstChild("SignText") and v.Door.Sign.SignText.Text)):gsub("^0+", "")..(v.Door:FindFirstChild("Lock") and " (锁住)" or "") or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.Door.Door.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v.Door
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

if isBackdoor then
TabHandles.ESPgn:Toggle({
    Title = "透视时间拉杆",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspLeverTime = Value
if _G.EspLeverTime == false then
_G.TimeLeverAdd = {}
if TimeLeverSpawn then
TimeLeverSpawn:Disconnect()
TimeLeverSpawn = nil
end
if TimeLeverRemove then
TimeLeverRemove:Disconnect()
TimeLeverRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name:find("TimerLever") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function LeverTimes(v)
if v.Name:find("TimerLever") and v.PrimaryPart then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(0, 0, 255)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(0, 0, 255)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(0, 0, 255) 
	Highlight.OutlineColor = Color3.fromRGB(0, 0, 255) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and "时间拉杆" or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckTimeLever(v)
    if not table.find(_G.TimeLeverAdd, v) and v.Name == "TimerLever" then
        table.insert(_G.TimeLeverAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckTimeLever(v)
end
TimeLeverSpawn = workspace.DescendantAdded:Connect(function(v)
    CheckTimeLever(v)
end)
TimeLeverRemove = workspace.DescendantRemoving:Connect(function(v)
    for i = #_G.TimeLeverAdd, 1, -1 do
        if _G.TimeLeverAdd[i] == v then
            table.remove(_G.TimeLeverAdd, i)
            break
        end
    end
end)
end
while _G.EspLeverTime do
for i, v in pairs(_G.TimeLeverAdd) do
if v:IsA("Model") then
LeverTimes(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})
end

if isHotel then
TabHandles.ESPgn:Toggle({
    Title = "透视书",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspBook = Value
if _G.EspBook == false then
_G.BookAdd = {}
if BookSpawn then
BookSpawn:Disconnect()
BookSpawn = nil
end
if BookRemove then
BookRemove:Disconnect()
BookRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name:find("LiveHintBook") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function Books(v)
if v.Name:find("LiveHintBook") and v.PrimaryPart then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(160, 32, 240)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(160, 32, 240)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(160, 32, 240) 
	Highlight.OutlineColor = Color3.fromRGB(160, 32, 240) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and "书" or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 10
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckBook(v)
    if not table.find(_G.BookAdd, v) and v.Name == "LiveHintBook" then
        table.insert(_G.BookAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckBook(v)
end
BookSpawn = workspace.DescendantAdded:Connect(function(v)
    CheckBook(v)
end)
BookRemove = workspace.DescendantRemoving:Connect(function(v)
    for i = #_G.BookAdd, 1, -1 do
        if _G.BookAdd[i] == v then
            table.remove(_G.BookAdd, i)
            break
        end
    end
end)
end
while _G.EspBook do
for i, v in pairs(_G.BookAdd) do
if v:IsA("Model") then
Books(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "透视电箱",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspBreaker = Value
if _G.EspBreaker == false then
_G.BreakerAdd = {}
if BreakerSpawn then
BreakerSpawn:Disconnect()
BreakerSpawn = nil
end
if BreakerRemove then
BreakerRemove:Disconnect()
BreakerRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name:find("LiveBreakerPolePickup") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function Breakers(v)
if v.Name == "LiveBreakerPolePickup" and v:FindFirstChildOfClass("ProximityPrompt") then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(25, 25, 112)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(25, 25, 112)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(25, 25, 112) 
	Highlight.OutlineColor = Color3.fromRGB(25, 25, 112) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and "电箱" or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 10
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckBreaker(v)
    if not table.find(_G.BreakerAdd, v) and v.Name == "LiveBreakerPolePickup" then
        table.insert(_G.BreakerAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckBreaker(v)
end
BreakerSpawn = workspace.DescendantAdded:Connect(function(v)
    CheckBreaker(v)
end)
BreakerRemove = workspace.DescendantRemoving:Connect(function(v)
for i = #_G.BreakerAdd, 1, -1 do
    if _G.BreakerAdd[i] == v then
        table.remove(_G.BreakerAdd, i)
        break
    end
end
end)
end
while _G.EspBreaker do
for i, v in pairs(_G.BreakerAdd) do
if v.Name == "LiveBreakerPolePickup" then
Breakers(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})
end

TabHandles.ESPgn:Toggle({
    Title = "透视物品",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspItem = Value
if _G.EspItem == false then
_G.ItemAdd = {}
if ItemSpawn then
ItemSpawn:Disconnect()
ItemSpawn = nil
end
if ItemRemove then
ItemRemove:Disconnect()
ItemRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name:find("Handle") then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function Items(v)
if v.Name == "Handle" and v.Parent:FindFirstChildOfClass("ProximityPrompt") then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(255, 215, 0)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(255, 215, 0)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(255, 215, 0) 
	Highlight.OutlineColor = Color3.fromRGB(255, 215, 0) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v.Parent
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and v.Parent.Name or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 10
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v.Parent
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckItem(v)
    if not table.find(_G.ItemAdd, v) and v.Name == "Handle" then
        table.insert(_G.ItemAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckItem(v)
end
ItemSpawn = workspace.DescendantAdded:Connect(function(v)
    CheckItem(v)
end)
ItemRemove = workspace.DescendantRemoving:Connect(function(v)
for i = #_G.ItemAdd, 1, -1 do
    if _G.ItemAdd[i] == v then
        table.remove(_G.ItemAdd, i)
        break
    end
end
end)
end
while _G.EspItem do
for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
	if v:IsA("Tool") then
		for i, z in pairs(v:GetChildren()) do
			if z.Name:find("Esp_") then
				z:Destroy()
			end
		end
	end
end
for i, v in pairs(_G.ItemAdd) do
if v.Name == "Handle" then
Items(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

_G.EspEntityNameDis = {
	["FigureRig"] = "Figure",
	["SallyMoving"] = "Sally Window",
	["RushMoving"] = "Rush",
	["Eyes"] = "Eyes",
	["Groundskeeper"] = "Skeeper",
	["BackdoorLookman"] = "Lookman",
	["BackdoorRush"] = "Blitz",
	["MandrakeLive"] = "Mandrake",
	["GloombatSwarm"] = "Gloombat",
	["GiggleCeiling"] = "Giggle",
	["AmbushMoving"] = "Ambush"
}

TabHandles.ESPgn:Toggle({
    Title = ((isHotel and "透视柜子/床") or (isMines and "透视柜子/垃圾桶/管道") or (isBackdoor and "透视柜子")),
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspHiding = Value
if _G.EspHiding == false then
_G.HidingAdd = {}
if HidingSpawn then
HidingSpawn:Disconnect()
HidingSpawn = nil
end
if HidingRemove then
HidingRemove:Disconnect()
HidingRemove = nil
end
for _, v in pairs(workspace:GetDescendants()) do 
if v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker" then
for i, z in pairs(v:GetChildren()) do
if z.Name:find("Esp_") then
z:Destroy()
end
end
end
end
else
function Hidings(v)
if (v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker") and v.PrimaryPart then
if v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight").FillColor = Color3.fromRGB(50, 205, 50)
	v:FindFirstChild("Esp_Highlight").OutlineColor = Color3.fromRGB(50, 205, 50)
end
if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(50, 205, 50) 
	Highlight.OutlineColor = Color3.fromRGB(50, 205, 50) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v
	Highlight.Parent = v
	elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
	v:FindFirstChild("Esp_Highlight"):Destroy()
end
if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
	v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and v.Name or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 10
    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
	GuiEsp = Instance.new("BillboardGui", v)
	GuiEsp.Adornee = v
	GuiEsp.Name = "Esp_Gui"
	GuiEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiEsp.AlwaysOnTop = true
	GuiEspText = Instance.new("TextLabel", GuiEsp)
	GuiEspText.BackgroundTransparency = 1
	GuiEspText.Font = Enum.Font.Code
	GuiEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiEspText.TextSize = 15
	GuiEspText.TextColor3 = Color3.new(0,0,0) 
	GuiEspText.TextStrokeTransparency = 0.5
	GuiEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiEspText
	elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
	v:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
local function CheckHiding(v)
    if not table.find(_G.HidingAdd, v) and v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker" then
        table.insert(_G.HidingAdd, v)
    end
end
for _, v in ipairs(workspace:GetDescendants()) do
	CheckHiding(v)
end
BookSpawn = workspace.DescendantAdded:Connect(function(v)
    CheckHiding(v)
end)
BookRemove = workspace.DescendantRemoving:Connect(function(v)
    for i = #_G.HidingAdd, 1, -1 do
        if _G.HidingAdd[i] == v then
            table.remove(_G.HidingAdd, i)
            break
        end
    end
end)
end
while _G.EspHiding do
for i, v in pairs(_G.HidingAdd) do
if v:IsA("Model") then
Hidings(v)
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "透视玩家",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspPlayer = Value
if _G.EspPlayer == false then
for i, v in pairs(game.Players:GetChildren()) do
	if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
		for x, b in pairs(v.Character:GetChildren()) do
			if b.Name:find("Esp_") then
				b:Destroy()
			end
		end
	end
end
end
while _G.EspPlayer do
for i, v in pairs(game.Players:GetChildren()) do
if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
if v.Character:FindFirstChild("Esp_Highlight") then
	v.Character:FindFirstChild("Esp_Highlight").FillColor = Color3.new(255, 255, 255)
	v.Character:FindFirstChild("Esp_Highlight").OutlineColor = Color3.new(255, 255, 255)
end
if _G.EspHighlight == true and v.Character:FindFirstChild("Esp_Highlight") == nil then
	local Highlight = Instance.new("Highlight")
	Highlight.Name = "Esp_Highlight"
	Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
	Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
	Highlight.FillTransparency = 0.5
	Highlight.OutlineTransparency = 0
	Highlight.Adornee = v.Character
	Highlight.Parent = v.Character
	elseif _G.EspHighlight == false and v.Character:FindFirstChild("Esp_Highlight") then
	v.Character:FindFirstChild("Esp_Highlight"):Destroy()
end
if v.Character:FindFirstChild("Esp_Gui") and v.Character["Esp_Gui"]:FindFirstChild("TextLabel") then
	v.Character["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
	        (_G.EspName == true and v.Name or "")..
            (_G.EspDistance == true and "\n距离: ("..string.format("%.0f", Distance(v.Character.HumanoidRootPart.Position)).."m)" or "")..
            (_G.EspHealth == true and "\n血量: [ "..(v.Character.Humanoid.Health <= 0 and "Dead" or string.format("%.0f", (v.Character.Humanoid.Health))).." ]" or "")
    v.Character["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 10
    v.Character["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
end
if _G.EspGui == true and v.Character:FindFirstChild("Esp_Gui") == nil then
	GuiPlayerEsp = Instance.new("BillboardGui", v.Character)
	GuiPlayerEsp.Adornee = v.Character.Head
	GuiPlayerEsp.Name = "Esp_Gui"
	GuiPlayerEsp.Size = UDim2.new(0, 100, 0, 150)
	GuiPlayerEsp.AlwaysOnTop = true
	GuiPlayerEsp.StudsOffset = Vector3.new(0, 3, 0)
	GuiPlayerEspText = Instance.new("TextLabel", GuiPlayerEsp)
	GuiPlayerEspText.BackgroundTransparency = 1
	GuiPlayerEspText.Font = Enum.Font.Code
	GuiPlayerEspText.Size = UDim2.new(0, 100, 0, 100)
	GuiPlayerEspText.TextSize = 15
	GuiPlayerEspText.TextColor3 = Color3.new(0,0,0) 
	GuiPlayerEspText.TextStrokeTransparency = 0.5
	GuiPlayerEspText.Text = ""
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Color = Color3.new(0, 0, 0)
	UIStroke.Thickness = 1.5
	UIStroke.Parent = GuiPlayerEspText
	elseif _G.EspGui == false and v.Character:FindFirstChild("Esp_Gui") then
	v.Character:FindFirstChild("Esp_Gui"):Destroy()
end
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透视" or "已关闭透视",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "文本显示",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspGui = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启文本显示" or "已关闭文本显示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "高亮显示",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspHighlight = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启高亮显示" or "已关闭高亮显示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "文本大小",
    Desc = "speedwalk",
    Value = { Min = 5, Max = 50, Default = 10 },
    Callback = function(Value)
        _G.EspGuiTextSize = Value
    end
})

TabHandles.ESPgn:Toggle({
    Title = "名称显示",
    Desc = "需先开启“文本显示”",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspName = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启名称显示" or "已关闭名称显示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "距离显示",
    Desc = "需先开启“文本显示”",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspDistance = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启距离显示" or "已关闭距离显示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.ESPgn:Toggle({
    Title = "玩家血量显示",
    Desc = "需先开启“文本显示”",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.EspHealth = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启血量显示" or "已关闭血量显示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

Screech = false
ClutchHeart = false
local old
old = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
    local args = {...}
    local method = getnamecallmethod()
    if tostring(self) == "Screech" and method == "FireServer" and Screech == true then
        args[1] = true
        return old(self,unpack(args))
    end
    if tostring(self) == "ClutchHeartbeat" and method == "FireServer" and ClutchHeart == true then
        args[2] = true
        return old(self,unpack(args))
    end
    return old(self,...)
end))

workspace.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "Screech" then
v:Destroy()
end
end)

TabHandles.pbgn:Toggle({
    Title = "防Screech",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.AntiScreech = Value
Screech = Value
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启防Screech" or "已关闭防Screech",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.pbgn:Toggle({
    Title = "防Halt",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.NoHalt = Value
local HaltShade = EntityModules:FindFirstChild("Shade") or EntityModules:FindFirstChild("_Shade")
if HaltShade then
    HaltShade.Name = _G.NoHalt and "_Shade" or "Shade"
end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启防Halt" or "已关闭防Halt",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.pbgn:Toggle({
    Title = "防Eyes",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.NoEyes = Value
while _G.NoEyes do
if workspace:FindFirstChild("Eyes") or workspace:FindFirstChild("BackdoorLookman") then
if game:GetService("ReplicatedStorage"):FindFirstChild("RemotesFolder") then
game:GetService("ReplicatedStorage"):WaitForChild("RemotesFolder"):WaitForChild("MotorReplication"):FireServer(-649)
end
end
task.wait()
end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启防Eyes" or "已关闭防Eyes",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.pbgn:Toggle({
    Title = "防Look Man",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.NoEyes = Value
while _G.NoEyes do
if workspace:FindFirstChild("Eyes") or workspace:FindFirstChild("BackdoorLookman") then
if game:GetService("ReplicatedStorage"):FindFirstChild("RemotesFolder") then
game:GetService("ReplicatedStorage"):WaitForChild("RemotesFolder"):WaitForChild("MotorReplication"):FireServer(-649)
end
end
task.wait()
end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启防Look Man" or "已关闭防Look Man",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

_G.EntityChoose = {"Rush", "Seek", "Eyes", "Sally Window", "LookMan", "Giggle", "GloombatSwarm", "Ambush", "A-60", "A-120", "Groundskeeper", "Mandrake", "Surge", "Monument" ,"Eyestalk" ,"Bramble" }

TabHandles.tzgn:Toggle({
    Title = "开启实体生成通知",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.NotifyEntity = Value
if _G.NotifyEntity then
    EntityChild = workspace.ChildAdded:Connect(function(child)
        for _, v in ipairs(_G.EntityChoose) do
            if child:IsA("Model") and child.Name:find(v) then
                repeat task.wait() until not child:IsDescendantOf(workspace) or (game.Players.LocalPlayer:DistanceFromCharacter(child:GetPivot().Position) < 1000)
                if child:IsDescendantOf(workspace) then
                    WindUI:Notify({Title = v.." 已生成!", Duration = 5})
                    if _G.NotifyEntityChat then
                        local text = _G.ChatNotify or ""
                        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(text..v.." 已生成!")
                    end
                end
            end
        end
    end)
else
    if EntityChild then
        EntityChild:Disconnect()
        EntityChild = nil
    end
end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启防Eyes" or "已关闭防Eyes",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.tzgn:Toggle({
    Title = "开启聊天栏通知",
    Icon = "check",
    Value = false,
    Callback = function(Value) 
_G.NotifyEntityChat = Value
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启聊天栏通知" or "已关闭防聊天栏通知",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

local intensitySlider = TabHandles.fzgn:Slider({
    Title = "透明度",
    Desc = "speedwalk",
    Step = 0.1,
    Value = { Min = 0, Max = 1, Default = 0.5 },
    Callback = function(Value)
        _G.TransparencyHide = Value
    end
})

TabHandles.fzgn:Toggle({
    Title = "柜子/床透明",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.HidingTransparency = Value
while _G.HidingTransparency do
if game.Players.LocalPlayer.Character:GetAttribute("Hiding") then
	for _, v in pairs(workspace.CurrentRooms:GetDescendants()) do
		if v:IsA("ObjectValue") and v.Name == "HiddenPlayer" then
			if v.Value == game.Players.LocalPlayer.Character then
                local hidePart = {}
                for _, i in pairs(v.Parent:GetChildren()) do
                    if i:IsA("BasePart") then
		                i.Transparency = _G.TransparencyHide or 0.5
		                table.insert(hidePart, i)
		            end
		        end
            repeat task.wait()
                for _, h in pairs(hidePart) do
                    h.Transparency = _G.TransparencyHide or 0.5
                    task.wait()
                end
            until not game.Players.LocalPlayer.Character:GetAttribute("Hiding") or not _G.HidingTransparency
            for _, n in pairs(hidePart) do
                n.Transparency = 0
                task.wait()
            end
            break
		end
	end
end
end
task.wait()
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启透明" or "已关闭透明",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

if isHotel then
TabHandles.fzgn:Toggle({
    Title = "自动提示密码",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.NotifyEntity = Value
if _G.NotifyEntity then
local function Deciphercode(v)
local Hints = game.Players.LocalPlayer.PlayerGui:WaitForChild("PermUI"):WaitForChild("Hints")

local code = {[1] = " _",[2] = " _", [3] = " _", [4] = " _", [5] = " _"}
    for i, v in pairs(v:WaitForChild("UI"):GetChildren()) do
        if v:IsA("ImageLabel") and v.Name ~= "Image" then
            for b, n in pairs(Hints:GetChildren()) do
                if n:IsA("ImageLabel") and n.Visible and v.ImageRectOffset == n.ImageRectOffset then
                    code[tonumber(v.Name)] = n:FindFirstChild("TextLabel").Text 
                end
            end
        end
    end 
    return code
end
local function CodeAll(v)
	if v:IsA("Tool") and v.Name == "LibraryHintPaper" then
        local code = table.concat(Deciphercode(v))
        if code then
	        ui:Notify({Title = "Code: "..code, Duration = 5})
			if _G.NotifyEntityChat2 then
				if not _G.ChatNotify then
					TextChat = ""
				else
					TextChat = _G.ChatNotify
				end
				if TextChat then
					game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(TextChat..code)
				end
			end
	        if workspace:FindFirstChild("Padlock") and Distance(workspace.Padlock:GetPivot().Position) <= 30 then
				if game:GetService("ReplicatedStorage"):FindFirstChild("RemotesFolder") then
					game:GetService("ReplicatedStorage"):WaitForChild("RemotesFolder"):WaitForChild("LP"):FireServer(code)
				end
			end
		end
    end
end
Getpaper = game.Players.LocalPlayer.Character.ChildAdded:Connect(function(v)
CodeAll(v)
end)
else
if Getpaper then
Getpaper:Disconnect()
Getpaper = nil
end
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动提示" or "已关闭自动提示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})
end

TabHandles.fzgn:Toggle({
    Title = "聊天栏提示密码",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.NotifyEntityChat2 = Value

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启聊天栏提示" or "已关闭聊天栏提示",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.fzgn:Toggle({
    Title = "无限氧气",
    Icon = "check",
    Value = false,
    Callback = function(Value) 

_G.ActiveInfOxygen = Value 
while _G.ActiveInfOxygen do 
if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") then
game.Players.LocalPlayer.Character:SetAttribute("Oxygen",99999)
end
task.wait()
end 
if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") then
game.Players.LocalPlayer.Character:SetAttribute("Oxygen",100)
end

WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启无限氧气" or "已关闭无限氧气",
            Icon = Value and "check" or "x",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
elseif game.GameId == 2820580801 then  --- Doors Lobby
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", -- Required
	Text = "正在加载...俄亥俄州...", -- Required
	Icon = "rbxassetid://119970903874014" -- Optional
})
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local library = loadstring(game:HttpGet("https://pastefy.app/lhpGk8o3/raw", true))()
local devv   = require(game:GetService("ReplicatedStorage").devv)
local Signal = devv.load("Signal")
game.TextChatService.ChatWindowConfiguration.Enabled = true
game:GetService("RunService").Heartbeat:Connect(function()
workspace.CurrentCamera.FieldOfView = 120
end)

local function isFriend(targetPlayer)return localPlayer:IsFriendsWith(targetPlayer.UserId)end local function teleportBehindTarget(targetPlayer)local targetCharacter=targetPlayer.Character if not targetCharacter then return end if targetCharacter:FindFirstChild('ForceField')or isFriend(targetPlayer)then return end local targetRoot=targetCharacter:FindFirstChild("HumanoidRootPart")local localCharacter=localPlayer.Character local localRoot=localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot then local behindCFrame=targetRoot.CFrame * CFrame.new(0,0,3)localRoot.CFrame=behindCFrame end end local function startTeleportLoop()if teleportLoop then teleportLoop:Disconnect()end teleportLoop=RunService.Heartbeat:Connect(function()for _,player in ipairs(Players:GetPlayers())do if player ~=localPlayer then teleportBehindTarget(player)task.wait(1)end end end)end local function stopTeleportLoop()if teleportLoop then teleportLoop:Disconnect()teleportLoop=nil end end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local devv = require(game:GetService('ReplicatedStorage').devv)
local item = devv.load('v3item')

local speed=1 local tpEnabled=true local heartbeatConnection=nil local character,humanoid local function setupCharacter()character=LocalPlayer.Character if character then humanoid=character:WaitForChild("Humanoid")humanoid.Died:Connect(function()repeat task.wait()until LocalPlayer.Character ~=nil setupCharacter()if tpEnabled then startTPWalk()end end)end end local function startTPWalk()if heartbeatConnection then heartbeatConnection:Disconnect()end heartbeatConnection=RunService.Heartbeat:Connect(function()if not tpEnabled or not character or not humanoid or humanoid.Health <=0 then return end if humanoid.MoveDirection.Magnitude > 0 then local currentCFrame=character.PrimaryPart.CFrame local newPosition=currentCFrame.Position +(humanoid.MoveDirection * speed)character:SetPrimaryPartCFrame(CFrame.new(newPosition)* currentCFrame.Rotation)end end)end local function stopTPWalk()if heartbeatConnection then heartbeatConnection:Disconnect()heartbeatConnection=nil end end LocalPlayer.CharacterAdded:Connect(function(newCharacter)character=newCharacter setupCharacter()end)setupCharacter()

local autoCollectConnections={}local function setupAutoCollect(toggleVar,itemNames,sizeFilter,toggleName)return function(state)toggleVar=state if state then if autoCollectConnections[toggleName]then autoCollectConnections[toggleName]:Disconnect()end autoCollectConnections[toggleName]=RunService.Heartbeat:Connect(function()if character and humanoidRootPart then local collected=false for _,item in pairs(workspace.Game.Entities.ItemPickup:GetChildren())do for _,part in pairs(item:GetDescendants())do if(part:IsA("MeshPart")or part:IsA("Part"))then local prompt=part:FindFirstChildOfClass("ProximityPrompt")if prompt then local matchName=false if type(itemNames)=="table" then for _,name in pairs(itemNames)do if prompt.ObjectText==name then matchName=true break end end else matchName=prompt.ObjectText==itemNames end local matchSize=true if sizeFilter then matchSize=part.Size==sizeFilter end if matchName and matchSize then humanoidRootPart.CFrame=part.CFrame * CFrame.new(0,2,0)task.wait(0.1)for i=1,10 do fireproximityprompt(prompt)task.wait(0.1)end collected=true break end end end end if collected then break end end if collected then humanoidRootPart.CFrame=CFrame.new(1881.17371,-45.2568588,-183.409271)end end end)else if autoCollectConnections[toggleName]then autoCollectConnections[toggleName]:Disconnect()autoCollectConnections[toggleName]=nil end end end end local Players=game:GetService("Players")local player=Players.LocalPlayer if not player then Players:GetPropertyChangedSignal("LocalPlayer"):Wait()player=Players.LocalPlayer end local function onCharacterAdded(character)local humanoid=character:WaitForChild("Humanoid",10)character:WaitForChild("HumanoidRootPart",10)if humanoid then humanoid.UseJumpPower=true end end if player.Character then onCharacterAdded(player.Character)end player.CharacterAdded:Connect(onCharacterAdded)
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local SnowRUN = game:GetService("RunService")
local b1 = require(game:GetService('ReplicatedStorage').devv).load('v3item').inventory.items
local window = library:new("Rb脚本中心_付费版")
local tab = window:Tab("封禁信息")
local section = tab:section("封禁信息", true)
local banReasonLabel = section:Label("封禁原因：无")
local banCountLabel = section:Label("封禁次数：无")
local isBannedLabel = section:Label("是否封禁：否")
local banTimeLabel = section:Label("封禁时间：无")
local unbanTimeLabel = section:Label("解封时间：无")
local function fmt(ts)return os.date("%Y-%m-%d %H:%M:%S",ts)end local function a123()local banReason=nil local banCount=nil local isBanned=false local banAt=nil local unbanAt=nil local remainingTime=nil for _,entry in ipairs(getgc(true))do if type(entry)=="table" then local reason=rawget(entry,"shadowbanned")if reason then banReason=reason isBanned=true end local count=rawget(entry,"numshadowbans")if count then banCount=tostring(count)isBanned=true end local at=rawget(entry,"shadowbannedAt")if at then banAt=fmt(at)end local exes=rawget(entry,"shadowbannedExpires")if exes then unbanAt=fmt(exes)local now=os.time()local rem=exes - now if rem > 0 then local d=math.floor(rem/86400);rem=rem%86400 local h=math.floor(rem/3600);rem=rem%3600 local m=math.floor(rem/60);rem=rem%60 local s=rem remainingTime=string.format("%d天 %d小时 %d分 %d秒",d,h,m,s)else remainingTime="已过期" end end end end banReasonLabel.Text="封禁原因："..(banReason or "无")banCountLabel.Text="封禁次数："..(banCount or "无")isBannedLabel.Text="是否封禁："..(isBanned and "是" or "否")banTimeLabel.Text="封禁时间："..(banAt or "无")unbanTimeLabel.Text="解封时间："..(unbanAt or "无")return isBanned,banReason,banCount,banAt,unbanAt,remainingTime end task.spawn(function()a123()end)
local main = window:Tab("玩家")
local player = main:section("玩家", true)
player:Button("透视ESP",function()  
local Players=game:GetService("Players")local RunService=game:GetService("RunService")local LocalPlayer=Players.LocalPlayer local LocalCharacter=LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()local LocalHead=LocalCharacter:WaitForChild("Head")local playerConnections={}local function updateNametag(player,textLabel,head)local character=player.Character if not character then return end local humanoid=character:FindFirstChildOfClass("Humanoid")local targetHead=character:FindFirstChild("Head")if humanoid and targetHead and humanoid.Health > 0 then local distance=(LocalHead.Position - targetHead.Position).Magnitude textLabel.Text=string.format("%s\n血量: %d/%d\n距离: %.1fm",player.Name,math.floor(humanoid.Health),math.floor(humanoid.MaxHealth),distance)textLabel.Visible=true else textLabel.Visible=false end end local function createNametag(player)if player==LocalPlayer then return end playerConnections[player]={}local function setupCharacter(character)local head=character:WaitForChild("Head")local billboard=Instance.new("BillboardGui")billboard.Name="PlayerNametag" billboard.Adornee=head billboard.Size=UDim2.new(0,200,0,80)billboard.StudsOffset=Vector3.new(0,3,0)billboard.AlwaysOnTop=true billboard.Parent=head local textLabel=Instance.new("TextLabel")textLabel.Size=UDim2.new(1,0,1,0)textLabel.Font=Enum.Font.GothamBold textLabel.TextSize=8 textLabel.TextColor3=Color3.new(1,0,0)textLabel.TextStrokeColor3=Color3.new(0,0,0)textLabel.TextStrokeTransparency=0.3 textLabel.BackgroundTransparency=1 textLabel.TextYAlignment=Enum.TextYAlignment.Top textLabel.Parent=billboard local heartbeatConn=RunService.Heartbeat:Connect(function()if not character or not character.Parent then heartbeatConn:Disconnect()return end updateNametag(player,textLabel,head)end)table.insert(playerConnections[player],heartbeatConn)local characterRemovedConn characterRemovedConn=character.AncestryChanged:Connect(function(_,parent)if parent==nil then billboard:Destroy()heartbeatConn:Disconnect()characterRemovedConn:Disconnect()end end)table.insert(playerConnections[player],characterRemovedConn)end if player.Character then setupCharacter(player.Character)end local charAddedConn=player.CharacterAdded:Connect(setupCharacter)table.insert(playerConnections[player],charAddedConn)end local function removeNametag(player)if playerConnections[player]then for _,conn in ipairs(playerConnections[player])do conn:Disconnect()end playerConnections[player]=nil end if player.Character then local head=player.Character:FindFirstChild("Head")if head then local nametag=head:FindFirstChild("PlayerNametag")if nametag then nametag:Destroy()end end end end Players.PlayerAdded:Connect(function(player)createNametag(player)local leavingConn leavingConn=player.AncestryChanged:Connect(function(_,parent)if parent==nil then removeNametag(player)leavingConn:Disconnect()end end)end)for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer then createNametag(player)local leavingConn leavingConn=player.AncestryChanged:Connect(function(_,parent)if parent==nil then removeNametag(player)leavingConn:Disconnect()end end)end end LocalPlayer.CharacterAdded:Connect(function(character)LocalCharacter=character LocalHead=character:WaitForChild("Head")end)
end)
player:Slider('加速设置', 'SpeedSlider', 1, 1, 15, false, function(value)
speed = value
end)
player:Toggle("速度开关", "speed", false, function(value)
tpEnabled = value
if value then
startTPWalk()
else
stopTPWalk()
end
end)
local jumpConnection
player:Toggle("连跳", "jump", false, function(value)
if value then jumpConnection=game:GetService("UserInputService").JumpRequest:Connect(function()if humanoid and humanoid.Health > 0 then humanoid:ChangeState(Enum.HumanoidStateType.Jumping)end end)else if jumpConnection then jumpConnection:Disconnect()jumpConnection=nil end end
end)

local players = game:GetService("Players"):GetPlayers()
local localPlayer = game:GetService("Players").LocalPlayer
local main = window:Tab("战斗")
local kill = main:section("战斗", true)
kill:Slider("物品栏数量", "taunt_interval", 6, 1, 9, false, function(value)
 local sum = require(game.ReplicatedStorage.devv.client.Objects.v3item.modules.inventory)sum.numSlots = value
end)

kill:Dropdown("攻击方式", "Player", {"超级拳", "普通拳"}, function(value)
    if value == "超级拳" then
        hitMOD = "meleemegapunch"
    elseif value == "普通拳" then
        hitMOD = "meleepunch"
    end
end)
kill:Toggle("杀戮光环", "Hit", false, function(state)
autokill = state
end)
kill:Toggle("踩踏光环", "Kill", false, function(state)
autostomp = state
end)
kill:Toggle("抓取光环", "grab", false, function(state)
grabplay = state
end)

SnowRUN.Heartbeat:Connect(function()
pcall(function()

if tp666 then
 if tp666 and selectedPlayer then spawn(function()local localPlayer=game:GetService("Players").LocalPlayer local character=localPlayer.Character or localPlayer.CharacterAdded:Wait()local humanoid=character:WaitForChild("Humanoid")local radius=5 local heightOffset=0 local angle=0 local rotationSpeed=0.8 while tp666 and selectedPlayer and selectedPlayer.Character do local targetChar=selectedPlayer.Character local targetRoot=targetChar:FindFirstChild("HumanoidRootPart")local localRoot=character:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot and targetChar:FindFirstChild("Humanoid")and targetChar.Humanoid.Health > 0 and humanoid.Health > 0 then angle=angle + rotationSpeed if angle > 2 * math.pi then angle=0 end local x=math.cos(angle)* radius local z=math.sin(angle)* radius local offset=Vector3.new(x,heightOffset,z)localRoot.CFrame=CFrame.new(targetRoot.Position + offset,targetRoot.Position)humanoid.AutoRotate=false else if not(targetChar and targetChar:FindFirstChild("Humanoid")and targetChar.Humanoid.Health > 0)then humanoid.AutoRotate=true break end end wait()end humanoid.AutoRotate=true end)end
 end

if isTeleporting then
 if isTeleporting and selectedPlayer then spawn(function()local localPlayer=game:GetService("Players").LocalPlayer local character=localPlayer.Character or localPlayer.CharacterAdded:Wait()local humanoid=character:WaitForChild("Humanoid")while isTeleporting and selectedPlayer and selectedPlayer.Character do local targetChar=selectedPlayer.Character local targetRoot=targetChar:FindFirstChild("HumanoidRootPart")local targetHumanoid=targetChar:FindFirstChild("Humanoid")local localRoot=character:FindFirstChild("HumanoidRootPart")if targetRoot and localRoot then local targetCFrame=targetRoot.CFrame local offset=targetCFrame.LookVector * -zDistance + Vector3.new(0,yDistance,0)localRoot.CFrame=targetCFrame + offset end wait()end end)end
 end
for i, v in next, b1 do if v.name == 'Fists' then qtid = v.guid break end end

if autokill then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health > 0 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                require(game:GetService("ReplicatedStorage").devv).load("Signal").FireServer("equip", qtid)
                require(game:GetService("ReplicatedStorage").devv).load("Signal").FireServer("meleeItemHit", "player", { hitPlayerId = uid, meleeType = hitMOD })
                break
            end
        end
    end
end
end

if autostomp then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health < 20 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                Signal.FireServer("stomp", player)
                break
            end
        end
    end
end
end

if grabplay then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer and player.Character then
        local targetChar = player.Character
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local targetHumanoid = targetChar:FindFirstChild("Humanoid")
        if targetHRP and targetHumanoid and targetHumanoid.Health < 20 then
            local distance = (rootPart.Position - targetHRP.Position).Magnitude
            if distance <= 40 then
                local uid = player.UserId
                Signal.FireServer("grabPlayer", player)
                break
            end
        end
    end
end
end

if autoatm then
local player=game:GetService("Players").LocalPlayer local character=player.Character or player.CharacterAdded:Wait()local rootPart=character:WaitForChild("HumanoidRootPart")for _,v in pairs(workspace.Game.Entities.CashBundle:GetDescendants())do if v:IsA("ClickDetector")then local detectorPos=v.Parent:GetPivot().Position local distance=(rootPart.Position - detectorPos).Magnitude if distance <=35 then fireclickdetector(v)end end end
for _, v in ipairs(workspace.Game.Props.ATM:GetChildren()) do
if v:IsA("Model") and (v:GetAttribute("health") or 0) > 0 then
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
currentATM = v
ATMguid = currentATM:GetAttribute("guid")
local pos = currentATM.WorldPivot.Position
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild('Humanoid')
if Humanoid then
local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
if HumanoidRootPart then
HumanoidRootPart.CFrame = CFrame.new(pos.x, pos.y, pos.z)
for i, v in next, item.inventory.items do
if v.name == 'Fists' then
qtid = v.guid
break
end
end
local distance = (HumanoidRootPart.Position - pos).Magnitude
if distance <= 40 then
local hitATM = {
meleeType = "meleepunch",
guid = ATMguid
}
Signal.FireServer("equip", qtid)
Signal.FireServer("meleeItemHit", "prop", hitATM)
end
end
end
break
end
end
end
end
end

if autojia then
Signal.InvokeServer("attemptPurchase", jiahit)
for i, v in next, item.inventory.items do
if v.name == jiahit then
light = v.guid
local armor = game:GetService('Players').LocalPlayer:GetAttribute('armor')
if armor == nil or armor <= 0 then
Signal.FireServer("equip", light)
Signal.FireServer("useConsumable", light)
Signal.FireServer("removeItem", light)
break
end
end
end
end

if autolok then
Signal.InvokeServer("attemptPurchase", 'Bandage')
for i, v in next, item.inventory.items do
if v.name == 'Bandage' then
bande = v.guid
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild('Humanoid')
if humanoid.Health < humanoid.MaxHealth then
Signal.FireServer("equip", bande)
Signal.FireServer("useConsumable", bande)
Signal.FireServer("removeItem", bande)
end
break
end
end
end
local devv = require(game:GetService('ReplicatedStorage').devv)
local item = devv.load('v3item')

if autouse then
for i, v in next, item.inventory.items do
if v.name == 'Green Lucky Block' or v.name == 'Orange Lucky Block' or v.name == 'Purple Lucky Block' or v.name == 'Electronics' or v.name == 'Weapon Parts' then
useid = v.guid
Signal.FireServer("equip", useid)
Signal.FireServer("useConsumable", useid)
Signal.FireServer("removeItem", useid)
break
end
end
end

if autosell then
for i, v in next, item.inventory.items do
if v.name == 'Amethyst' or v.name == 'Sapphire' or v.name == 'Emerald' or v.name == 'Topaz' or v.name == 'Ruby' or v.name == 'Diamond Ring' or v.name == "Gold Bar" or v.name == "AK-47" or v.name == "AR-15"  or v.name == "Diamond" then
sellid = v.guid
Signal.FireServer("equip", sellid)
Signal.FireServer("sellItem", sellid)
break
end
end
end

if autorem then
for i, v in next, item.inventory.items do
if v.name == 'Uzi' or v.name == 'Baseball Bat' or v.name == 'Basketball' or v.name == 'Bloxaide'or v.name == 'Bloxy Cola' or v.name == 'C4' or v.name == 'Cake' or v.name == 'Stop Sign'then
Signal.FireServer("removeItem", v.guid)
end
end
end

if autocl then
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Electronics" or e.ObjectText == "Weapon Parts" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end)
end)
------------------
kill:Toggle("反布娃娃状态[防止僵直]", "rea", false, function(state)
antirea = state
if antirea then
while antirea and task.wait() do
Signal.FireServer("setRagdoll", false)
end
end
end)
kill:Toggle("反坐下状态", "rea", false, function(state)
antisit = state
if antisit then
while antisit and task.wait() do
local Players = game:GetService("Players")
local player = Players.LocalPlayer
player.CharacterAdded:Connect(function(char)
local humanoid = char:WaitForChild("Humanoid")
humanoid.Sit = false
end)
end
end
end)
kill:Dropdown("选择护甲", "jiahit", {"轻型护甲100", "重型护甲2000", "军用护甲3500", "EOD护甲7500"}, function(value)
if value == "轻型护甲100" then
jiahit = "Light Vest"
elseif value == "重型护甲2000" then
jiahit = "Heavy Vest"
elseif value == "军用护甲3500" then
jiahit = "Military Vest"
elseif value == "EOD护甲7500" then
jiahit = "EOD Vest"
end
end)
kill:Toggle("自动穿甲", "jia", false, function(state)
autojia = state
end)
kill:Toggle("自动回血", "ban", false, function(state)
autolok = state
end)
local main = window:Tab("魔法")
local zzzz = main:section("魔法", true)
zzzz:Label("朝地面轰一炮即可触发 失效重新开起")
zzzz:Button("购买RPG武器", function()
Signal.InvokeServer("attemptPurchase", "RPG")
end)
zzzz:Button("购买RPG子弹", function()
Signal.InvokeServer("attemptPurchaseAmmo", "RPG")
end)
zzzz:Toggle("RPG全图轰炸", "rpgkill666", false, function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local function shouldIgnorePlayer(player)if player==localPlayer then return true end if player.Name=="PolarDream8" then return true end if player.Name=="X7Sdaydream_XD" then return true end local success,isFriend=pcall(function()return localPlayer:IsFriendsWith(player.UserId)end)if success and isFriend then return true end return false end local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do local otherPlayersPositions={}for _,player in ipairs(Players:GetPlayers())do if not shouldIgnorePlayer(player)and player.Character then local rootPart=player.Character:FindFirstChild("HumanoidRootPart")if rootPart then table.insert(otherPlayersPositions,rootPart.Position)end end end if #otherPlayersPositions > 0 then local randomIndex=math.random(1,#otherPlayersPositions)local modifiedArgs={lastArgs[1],lastArgs[2],otherPlayersPositions[randomIndex]}rocketHit:FireServer(unpack(modifiedArgs))end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
local killoppEnabled = false
local ignoreFriendsEnabled = false
zzzz:Toggle("射线枪子追开关", "sxq", false, function(state)
local Players=game:GetService("Players")local ReplicatedStorage=game:GetService("ReplicatedStorage")local LocalPlayer=Players.LocalPlayer local wepguid local devv=require(ReplicatedStorage.devv)local item=devv.load("v3item")for i,v in next,(item.inventory and item.inventory.items or{})do if v.type=="Gun" then wepguid=v.guid print(wepguid)end end local UserInputService=game:GetService("UserInputService")local RunService=game:GetService("RunService")local Camera=workspace.CurrentCamera local FOVCircle=Drawing.new("Circle")FOVCircle.Visible=true FOVCircle.Radius=200 FOVCircle.Color=Color3.fromRGB(255,255,255)FOVCircle.Thickness=1 FOVCircle.Transparency=1 FOVCircle.Filled=false FOVCircle.Position=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()FOVCircle.Position=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)end)local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local replicateProjectiles=ReplicatedStorage.devv.remoteStorage:FindFirstChild("replicateProjectiles")or findRemoteEvent("replicateProjectiles")local projectileHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("projectileHit")or findRemoteEvent("projectileHit")local guid=require(game:GetService("ReplicatedStorage").devv.shared.Helpers.string.GUID)local newGuid=guid()local function isFriend(player)return LocalPlayer:IsFriendsWith(player.UserId)end local function getClosestPlayer()local closestCharacter local closestDistance=math.huge for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer and player.Character and not isFriend(player)and player.Name ~="PolarDream8" then local character=player.Character local humanoid=character:FindFirstChildOfClass("Humanoid")local rootPart=character:FindFirstChild("HumanoidRootPart")local head=character:FindFirstChild("Head")if humanoid and humanoid.Health > 0 and rootPart and head then local screenPoint,onScreen=Camera:WorldToViewportPoint(head.Position)if onScreen then local distanceFromCenter=(Vector2.new(screenPoint.X,screenPoint.Y)- FOVCircle.Position).Magnitude if distanceFromCenter <=FOVCircle.Radius then local distance=(rootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude if distance < closestDistance then closestCharacter=character closestDistance=distance end end end end end end return closestCharacter end while true do if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")and LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health > 0 then local ClosestPlayer=getClosestPlayer()if ClosestPlayer then local spawnArgs={[1]=wepguid,[2]={[1]={[1]=newGuid,[2]=ClosestPlayer.Head.CFrame}},[3]="semi"}local hitArgs={[1]=newGuid,[2]="player",[3]={hitPart=ClosestPlayer.Hitbox.Head_Hitbox,hitPlayerId=Players:GetPlayerFromCharacter(ClosestPlayer).UserId,hitSize=ClosestPlayer.Head.Size,pos=ClosestPlayer.Head.CFrame}}replicateProjectiles:FireServer(unpack(spawnArgs))projectileHit:FireServer(unpack(hitArgs))end end wait()end
end)
zzzz:Toggle("子追开关", "killopp", false, function(state)
killoppEnabled = state
end)
zzzz:Toggle("忽略好友", "ignorefriends", false, function(state)
ignoreFriendsEnabled = state
end)

local game=game local Workspace=game:GetService("Workspace")local Players=game:GetService("Players")local LocalPlayer=Players.LocalPlayer local Camera=Workspace.CurrentCamera local RunService=game:GetService("RunService")local UserInputService=game:GetService("UserInputService")local old local TEXT_POSITION=Vector2.new(Camera.ViewportSize.X - 200,50)local TEXT_COLOR=Color3.new(1,1,1)local HEALTH_COLOR=Color3.new(0,1,0)local targetDisplay=Drawing.new("Text")targetDisplay.Visible=false targetDisplay.Size=20 targetDisplay.Center=false targetDisplay.Outline=true targetDisplay.OutlineColor=Color3.new(0,0,0)targetDisplay.Color=TEXT_COLOR targetDisplay.Text="目标: None" targetDisplay.Position=TEXT_POSITION targetDisplay.Font=2 local healthDisplay=Drawing.new("Text")healthDisplay.Visible=false healthDisplay.Size=18 healthDisplay.Center=true healthDisplay.Outline=true healthDisplay.OutlineColor=Color3.new(0,0,0)healthDisplay.Color=HEALTH_COLOR healthDisplay.Font=2 local usernameDisplay=Drawing.new("Text")usernameDisplay.Visible=false usernameDisplay.Size=18 usernameDisplay.Center=true usernameDisplay.Outline=true usernameDisplay.OutlineColor=Color3.new(0,0,0)usernameDisplay.Color=TEXT_COLOR usernameDisplay.Font=2 local function isFriend(player)if not ignoreFriendsEnabled then return false end local success,isFriend=pcall(function()return LocalPlayer:IsFriendsWith(player.UserId)end)return success and isFriend end local function updateDisplay(character,player)local head=character and character:FindFirstChild("Head")local humanoid=character and character:FindFirstChildOfClass("Humanoid")if not head or not humanoid then healthDisplay.Visible=false usernameDisplay.Visible=false return end local headPos,headOnScreen=Camera:WorldToViewportPoint(head.Position)if not headOnScreen then healthDisplay.Visible=false usernameDisplay.Visible=false return end healthDisplay.Text=math.floor(humanoid.Health).."/"..math.floor(humanoid.MaxHealth)healthDisplay.Position=Vector2.new(headPos.X,headPos.Y - 30)healthDisplay.Visible=true usernameDisplay.Text=player.Name usernameDisplay.Position=Vector2.new(headPos.X,headPos.Y - 50)usernameDisplay.Visible=true end local function getClosestHead()local closestHead local closestPlayer local closestCharacter local closestDistance=math.huge local cameraDirection=Camera.CFrame.LookVector local cameraPos=Camera.CFrame.Position for _,player in ipairs(Players:GetPlayers())do if player ~=LocalPlayer and player.Character then if ignoreFriendsEnabled and isFriend(player)then end local character=player.Character local head=character:FindFirstChild("Head")local humanoid=character:FindFirstChildOfClass("Humanoid")local forcefield=character:FindFirstChild("ForceField")if head and humanoid and not forcefield and humanoid.Health > 0 then local distance=(head.Position - cameraPos).Magnitude if distance < closestDistance then closestHead=head closestPlayer=player closestCharacter=character closestDistance=distance end end end end return closestHead,closestPlayer,closestCharacter end RunService.Heartbeat:Connect(function()if not killoppEnabled then targetDisplay.Visible=false healthDisplay.Visible=false usernameDisplay.Visible=false return end local closestHead,closestPlayer,closestCharacter=getClosestHead()if closestHead and closestPlayer then targetDisplay.Text="目标: "..closestPlayer.Name targetDisplay.Visible=true updateDisplay(closestCharacter,closestPlayer)else targetDisplay.Text="目标: None" targetDisplay.Visible=true healthDisplay.Visible=false usernameDisplay.Visible=false end end)old=hookmetamethod(game,"__namecall",function(self,...)if not killoppEnabled then return old(self,...)end local method=getnamecallmethod()local args={...}if(method=="Raycast" or method=="FindPartOnRay")and not checkcaller()and self==Workspace then local origin,direction if method=="Raycast" then origin=args[1]direction=args[2]else local ray=args[1]if typeof(ray)=="Ray" then origin=ray.Origin direction=ray.Direction end end if origin and direction then local closestHead,closestPlayer=getClosestHead()if closestHead and closestPlayer then if not(ignoreFriendsEnabled and isFriend(closestPlayer))then return{Instance=closestHead,Position=closestHead.Position,Normal=(closestHead.Position - origin).Unit,Material=Enum.Material.Plastic}end end end end return old(self,...)end)local function cleanup()targetDisplay:Remove()healthDisplay:Remove()usernameDisplay:Remove()end game:GetService("UserInputService").WindowFocusReleased:Connect(cleanup)
local main = window:Tab("购买")
local qtl = main:section("购买", true)
local dropdown = qtl:Dropdown("选择物品", "Items", {}, function(value)
    selectedItem = value 
end)
local itemsOnSale=workspace:FindFirstChild("ItemsOnSale")if itemsOnSale then local itemNames={}local seenNames={}for _,item in ipairs(itemsOnSale:GetChildren())do if not seenNames[item.Name]then table.insert(itemNames,item.Name)seenNames[item.Name]=true end end dropdown:SetOptions(itemNames)end
qtl:Button("购买物品", function()
if selectedItem then
Signal.InvokeServer("attemptPurchase", selectedItem)
end
end)

qtl:Button("购买子弹", function()
if selectedItem then
Signal.InvokeServer("attemptPurchaseAmmo", selectedItem)
end
end)
local main = window:Tab("附属")
local qtl1 = main:section("附属", true)
qtl1:Toggle("自动消耗品[幸运方块&材料]", "use", false, function(state)
autouse = state
end)
qtl1:Toggle("自动售卖物品", "sell", false, function(state)
autosell = state
end)
qtl1:Toggle("自动清理工作垃圾","", false, function(v)
autosd = v
if autosd then
while autosd and wait() do  
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() -- 确保角色存在
for _, v in ipairs(workspace.Game.Local.Rubbish:GetDescendants()) do
if v:IsA("ClickDetector") then
local parentPart = v.Parent
if parentPart:IsA("BasePart") then
character:PivotTo(parentPart:GetPivot())
task.wait(0.2)
fireclickdetector(v)
end
end
end
end
end
end)
qtl1:Toggle("自动移除背包内垃圾","", false, function(v)
autorem = v
end)
qtl1:Toggle("即时互动","", false, function(v)
autohlod = v
if autohlod then
local function modifyPrompt(prompt)prompt.HoldDuration=0 end local function isTargetPrompt(prompt)local parent=prompt.Parent while parent do if parent==workspace or parent==workspace.BankRobbery.VaultDoor then return true end parent=parent.Parent end return false end for _,prompt in ipairs(workspace:GetDescendants())do if prompt:IsA("ProximityPrompt")and isTargetPrompt(prompt)then modifyPrompt(prompt)end end workspace.DescendantAdded:Connect(function(instance)if instance:IsA("ProximityPrompt")and isTargetPrompt(instance)then modifyPrompt(instance)end end)
end
end)
local main = window:Tab("自动")
local auto = main:section("自动", true)
auto:Toggle("自动装备拳头", "zb", false, function(state)
autozb = state
if autozb then
while autozb and task.wait() do
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
for i, v in next, item.inventory.items do
if v.name == 'Fists' then
qtid = v.guid
Signal.FireServer("equip", qtid)
break
end
end
end
end
end
end
end)
auto:Toggle("自动攻击ATM", "", false, function(v)
autoatm = v
end)
auto:Toggle("自动抢劫银行", "16384", false, function(value)
autobank = value
if autobank then
while autobank and wait() do
local BankDoor=game:GetService("Workspace").BankRobbery.VaultDoor local BankCashs=game:GetService("Workspace").BankRobbery.BankCash local Players=game:GetService("Players")local LocalPlayer=Players.LocalPlayer local function getCharacter()local character=LocalPlayer.Character if character and character:FindFirstChild("Humanoid")and character.Humanoid.Health > 0 then return character end return nil end if BankDoor.Door.Attachment.ProximityPrompt.Enabled==true then BankDoor.Door.Attachment.ProximityPrompt.HoldDuration=0 BankDoor.Door.Attachment.ProximityPrompt.MaxActivationDistance=20 local character=getCharacter()if character then local epoh1=CFrame.new(1071.955810546875,9,-343.80816650390625)character.HumanoidRootPart.CFrame=epoh1 wait(0.3)BankDoor.Door.Attachment.ProximityPrompt:InputHoldBegin()wait(0.3)BankDoor.Door.Attachment.ProximityPrompt:InputHoldEnd()end else if BankCashs.Cash:FindFirstChild("Bundle")then local character=getCharacter()if character then character.HumanoidRootPart.CFrame=CFrame.new(1055.94153,3,-344.58374)BankCashs.Main.Attachment.ProximityPrompt.MaxActivationDistance=20 for _,obj in ipairs(workspace.BankRobbery.BankCash:GetDescendants())do if obj:IsA("ProximityPrompt")then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end end end if not BankCashs.Cash:FindFirstChild("Bundle")then BankCashs.Main.Attachment.ProximityPrompt:InputHoldEnd()end end
end 
end
end)
auto:Toggle("自动开保险&宝箱","", false, function(v)
bxbx = v
if bxbx then
while bxbx and wait() do  
local BankDoor = game:GetService("Workspace").BankRobbery.VaultDoor
local BankCashs = game:GetService("Workspace").BankRobbery.BankCash
local epoh2 = game:GetService("Players")
local epoh3 = epoh2.LocalPlayer.Character.HumanoidRootPart
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
if BankDoor.Door.Attachment.ProximityPrompt.Enabled then
BankDoor.Door.Attachment.ProximityPrompt.HoldDuration = 0
BankDoor.Door.Attachment.ProximityPrompt.MaxActivationDistance = 20
local epoh1 = CFrame.new(1071.955810546875, 9, -343.80816650390625)
epoh3.CFrame = epoh1
wait(0.3)
BankDoor.Door.Attachment.ProximityPrompt:InputHoldBegin()
wait(0.3)
BankDoor.Door.Attachment.ProximityPrompt:InputHoldEnd()
else
for _, obj in ipairs(workspace.Game.Entities:GetDescendants()) do
if obj:IsA("ProximityPrompt") and (obj.ActionText == "Crack Chest" or obj.ActionText == "Crack Safe") and obj.Enabled then
        if bxbx then
        obj.RequiresLineOfSight = false
        obj.HoldDuration = 0 
        local target = obj.Parent and obj.Parent.Parent
        if target and target:IsA("BasePart") then
            local snow4 = target.CFrame * CFrame.new(0, 2, 2)
            local snow5 = game:GetService("Players")
            local snow6 = snow5.LocalPlayer.Character.HumanoidRootPart
            snow6.CFrame = snow4
            wait(0.5) 
            fireproximityprompt(obj) 
        end
        end
    end
end
end
end
end
end
end
end)
auto:Toggle("自动购买撬锁","", false, function(v)
lock = v
if lock then
while lock and wait() do  
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
Signal.InvokeServer("attemptPurchase", "Lockpick")
end
end
end
end
end)
auto:Toggle("保险&箱子&银行光环","", false, function(v)
bxgh = v
if bxgh then
while bxgh and wait() do 
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart")
for _,obj in ipairs(workspace.Game.Entities.GoldJewelSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.SmallSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.SmallChest:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.LargeSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.MediumSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.LargeChest:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.Game.Entities.JewelSafe:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end for _,obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants())do if obj:IsA("ProximityPrompt")and rootPart and(obj.Parent.Position - rootPart.Position).Magnitude > 35 then obj.RequiresLineOfSight=false obj.HoldDuration=0 fireproximityprompt(obj)end end
end
end
end)
auto:Toggle("金钱光环","", false, function(v)
mngh = v
if mngh then
while mngh and wait() do 
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
local player=game:GetService("Players").LocalPlayer local character=player.Character or player.CharacterAdded:Wait()local rootPart=character:WaitForChild("HumanoidRootPart")for _,v in pairs(workspace.Game.Entities.CashBundle:GetDescendants())do if v:IsA("ClickDetector")then local detectorPos=v.Parent:GetPivot().Position local distance=(rootPart.Position - detectorPos).Magnitude if distance <=35 then fireclickdetector(v)end end end
end
end
end
end
end)
local main = window:Tab("收集")
local zzjwp = main:section("收集", true)
zzjwp:Toggle("查找放下来印钞机","", false, function(v)
czycj = v
if czycj then
while czycj and wait() do
local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local droppables=workspace.Game.Local.droppables if droppables and droppables:FindFirstChild("Money Printer")then local unusualMoneyPrinter=droppables:FindFirstChild("Money Printer")for _,child in pairs(unusualMoneyPrinter:GetChildren())do if child:IsA("MeshPart")then local humanoidRootPart=localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")if humanoidRootPart then humanoidRootPart.CFrame=CFrame.new(child.Position)end end end end
end
end
end)
zzjwp:Toggle("自动拾取材料", "auto", false, function(v)
autocl = v
end)
zzjwp:Toggle("自动拾取宝石", "auto", false, function(v)
autobs = v
if autobs then
while autobs and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Amethyst" or e.ObjectText == "Sapphire" or e.ObjectText == "Emerald"  or e.ObjectText == "Topaz"  or e.ObjectText == "Ruby"  or e.ObjectText == "Diamond Ring"  or e.ObjectText == "Diamond" or e.ObjectText == "Void Gem" or e.ObjectText == "Dark Matter Gem" or e.ObjectText == "Rollie" then
                                for _, obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants()) do
                                if obj:IsA("ProximityPrompt") then
                                if (obj.Parent.Position - rootPart.Position).Magnitude > 35 then
                                obj.RequiresLineOfSight = false
                                obj.HoldDuration = 0
                                fireproximityprompt(obj)
                                end
                                end
                                end
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取红卡", "auto", false, function(v)
autohk = v
if autohk then
while autohk and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Military Armory Keycard" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取印钞机", "auto", false, function(v)
automn = v
if automn then
while automn and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Money Printer" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取顶级物品", "auto", false, function(v)
autodj = v
if autodj then
while autodj and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Suitcase Nuke" or e.ObjectText == "Nuke Launcher" or e.ObjectText == "Easter Basket" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取金条", "auto", false, function(v)
autojt = v
if autojt then
while autojt and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" and e.ObjectText == "Gold Bar" then
                                for _, obj in ipairs(workspace.BankRobbery.VaultDoor:GetDescendants()) do
                                if obj:IsA("ProximityPrompt") then
                                if (obj.Parent.Position - rootPart.Position).Magnitude > 35 then
                                obj.RequiresLineOfSight = false
                                obj.HoldDuration = 0
                                fireproximityprompt(obj)
                                end
                                end
                                end
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取气球", "auto", false, function(v)
autoqq = v
if autoqq then
while autoqq and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Bunny Balloon" or e.ObjectText == "Ghost Balloon" or e.ObjectText == "Clover Balloon" or e.ObjectText == "Bat Balloon" or e.ObjectText == "Gold Clover Balloon" or e.ObjectText == "Golden Rose" or e.ObjectText == "Black Rose" or e.ObjectText == "Heart Balloon" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取蓝色糖果棒", "auto", false, function(v)
autoblue = v
if autoblue then
while autoblue and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Blue Candy Cane" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
zzjwp:Toggle("自动拾取幸运方块", "auto", false, function(v)
autoluck = v
if autoluck then
while autoluck and wait() do
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
if rootPart then
            for _, l in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
                for _, v in pairs(l:GetChildren()) do
                    if v.ClassName == "MeshPart" or v.ClassName == "Part" then
                        for _, e in pairs(v:GetChildren()) do
                            if e.ClassName == "ProximityPrompt" then
                                if e.ObjectText == "Green Lucky Block" or e.ObjectText == "Orange Lucky Block" or e.ObjectText == "Purple Lucky Block" then
                                local itemCFrame = v.CFrame
                                rootPart.CFrame = itemCFrame * CFrame.new(0, 2, 0)
                                e.RequiresLineOfSight = false
                                e.HoldDuration = 0
                                wait(0.1)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                fireproximityprompt(e)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
end
end)
local main = window:Tab("RPG轰炸玩法")
local RPGAUTO = main:section("RPG轰炸玩法", true)
RPGAUTO:Button("RPG环绕轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")if localRoot then local center=localRoot.Position local radius=50 local explosionCount=999 while isListening do for i=1,explosionCount do if not isListening then break end local angle=(i / explosionCount)* math.pi * 2 local x=center.X + math.cos(angle)* radius local y=center.Y local z=center.Z + math.sin(angle)* radius local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))end radius=radius + 5 task.wait()end end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
RPGAUTO:Button("RPG圆形轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")if localRoot then local radius=50 local angle=math.random()* 2 * math.pi local x=localRoot.Position.X + radius * math.cos(angle)local y=localRoot.Position.Y local z=localRoot.Position.Z + radius * math.sin(angle)local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
RPGAUTO:Button("RPG直线轰炸", function()
local ReplicatedStorage=game:GetService("ReplicatedStorage")local Players=game:GetService("Players")local localPlayer=Players.LocalPlayer local function findRemoteEvent(eventName)for _,v in next,getgc(false)do if typeof(v)=="function" then local source=debug.info(v,"s")local name=debug.info(v,"n")if source and source:find("Signal")and name=="FireServer" then local success,upvalue=pcall(getupvalue,v,1)if success and upvalue and typeof(upvalue)=="table" then for k,remote in pairs(upvalue)do if k==eventName then return typeof(remote)=="string" and ReplicatedStorage.devv.remoteStorage[remote]or remote end end end break end end end return nil end local rocketHit=ReplicatedStorage.devv.remoteStorage:FindFirstChild("rocketHit")or findRemoteEvent("rocketHit")local lastArgs=nil local isListening=false local originalNamecall originalNamecall=hookmetamethod(game,"__namecall",function(self,...)local args={...}local method=getnamecallmethod()if self==rocketHit and method=="FireServer" then if not lastArgs then lastArgs=args isListening=true coroutine.wrap(function()while isListening and lastArgs do if localPlayer.Character then local localRoot=localPlayer.Character:FindFirstChild("HumanoidRootPart")local humanoid=localPlayer.Character:FindFirstChildOfClass("Humanoid")if localRoot and humanoid then local lookVector=humanoid.RootPart.CFrame.LookVector lookVector=Vector3.new(lookVector.X,0,lookVector.Z).Unit for distance=10,math.huge,10 do if not isListening then break end local x=localRoot.Position.X +(lookVector.X * distance)local y=localRoot.Position.Y local z=localRoot.Position.Z +(lookVector.Z * distance)local modifiedArgs={lastArgs[1],lastArgs[2],Vector3.new(x,y,z)}rocketHit:FireServer(unpack(modifiedArgs))task.wait()end end end task.wait()end end)()end end return originalNamecall(self,...)end)
end)
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local function StopAnim()
	plr.Character.Animate.Disabled = false
    local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
    for i, track in pairs (animtrack) do
        track:Stop()
    end
end

game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
elseif game.GameId == 7008097940 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...墨水游戏...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/pagedcomic-design/ui/refs/heads/main/ui"))()

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Player = game.Players.LocalPlayer

-- Services
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Global Variables
_G.InfiniteJump = false
_G.AutoSpeed = false
_G.Speed = 50
_G.AutoHelpPlayer = false
_G.AutoTrollPlayer = false
_G.TugOfWar = false
_G.DoorExit = false
_G.AntiLag = false
_G.PartLag = {"FootstepEffect", "BulletHole", "GroundSmokeDIFFERENT", "ARshell", "effect debris", "effect", "DroppedMP5"}
_G.EspHighlight = false
_G.EspGui = false
_G.EspGuiTextSize = 7
_G.EspGuiTextColor = Color3.new(255, 255, 255)
_G.EspName = false
_G.EspDistance = false
_G.CollectBandage = false
_G.CollectFlashbang = false
_G.CollectGrenade = false
_G.AntiFling = false
_G.AntiBanana = false
_G.AutoDalgona = false
_G.HideSeekESP = false
_G.GlassBridgeVision = false
_G.AutoMingle = false
_G.AutoSkip = false
_G.NoCooldownProximity = false
_G.Float = false
_G.NoClip = false

local Loading = false
local Loading1 = false
local CooldownProximity = nil
local FloatConnection = nil
local NoClipConnection = nil

-- Create Main Window
local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心-付费版",
    Icon = "zap",
    Author = "墨水",
    Folder = "RbHub_InkGameV2_CN",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            WindUI:Notify({
                Title = "用户中心",
                Content = "Rb脚本中心用户资料",
                Duration = 3
            })
        end
    },
    SideBarWidth = 200,
})

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

Window:Tag({
    Title = "v1.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "测试版",
    Color = Color3.fromHex("#315dff")
})

-- Create Sections and Tabs
local Tabs = {
    Main = Window:Section({ Title = "主线关卡", Opened = true }),
    HideSeek = Window:Section({ Title = "躲猫猫", Opened = true }),
    Player = Window:Section({ Title = "杂项", Opened = true }),
    Other = Window:Section({ Title = "小游戏", Opened = true }),
}

local TabHandles = {
    MainGames = Tabs.Main:Tab({ Title = "红绿灯", Icon = "gamepad-2" }),
    Dalgona = Tabs.Main:Tab({ Title = "抠糖饼 & 拔河", Icon = "cookie" }),
    HideSeekESP = Tabs.HideSeek:Tab({ Title = "透视功能", Icon = "eye" }),
    HideSeekTeleport = Tabs.HideSeek:Tab({ Title = "传送收集", Icon = "move" }),
    Movement = Tabs.Player:Tab({ Title = "玩家设置", Icon = "user" }),
    Utilities = Tabs.Player:Tab({ Title = "实用功能", Icon = "settings" }),
    OtherGames = Tabs.Other:Tab({ Title = "其他关卡", Icon = "puzzle" }),
}

-- Utility Functions
function CheckWall(Target)
    local Direction = (Target.Position - Workspace.CurrentCamera.Position).unit * (Target.Position - Workspace.CurrentCamera.Position).Magnitude
    local RaycastParams = RaycastParams.new()
    RaycastParams.FilterDescendantsInstances = {Player.Character, Workspace.CurrentCamera}
    RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local Result = Workspace:Raycast(Workspace.CurrentCamera.Position, Direction, RaycastParams)
    return Result == nil or Result.Instance:IsDescendantOf(Target)
end

function HasTool(tool)
    for _, v in pairs(Player.Character:GetChildren()) do
        if v:IsA("Tool") and v.Name == tool then
            return true
        end
    end
    for _, v in pairs(Player.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.Name == tool then
            return true
        end
    end
    return false
end

function PartLagDe(g)
    for i, v in pairs(_G.PartLag) do
        if g.Name:find(v) then
            g:Destroy()
        end
    end
end

-- Setup Jump and Speed
UserInputService.JumpRequest:connect(function()
    if _G.InfiniteJump == true then
        Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").WalkSpeed = _G.AutoSpeed and _G.Speed or 16
    character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if _G.AutoSpeed == true then
            character.Humanoid.WalkSpeed = _G.Speed or 50
        end
    end)
end)

-- Main Games Tab - Red Light Green Light
TabHandles.MainGames:Button({
    Title = "一键到终点",
    Desc = "瞬间传送到终点",
    Icon = "zap",
    Callback = function()
        if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
            local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
            WindUI:Notify({
                Title = "传送成功",
                Content = "已抵达终点！",
                Icon = "check",
                Duration = 2
            })
        end
    end
})

TabHandles.MainGames:Button({
    Title = "帮助玩家",
    Desc = "扛起玩家传送至终点",
    Icon = "hand-helping",
    Callback = function()
        if Loading then return end
        Loading = true
        for _, v in pairs(game.Players:GetPlayers()) do
            if v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt") and v.Character.HumanoidRootPart.CarryPrompt.Enabled == true then
                if v.Character:FindFirstChild("SafeRedLightGreenLight") == nil then
                    Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                    wait(0.3)
                    repeat task.wait(0.1)
                        fireproximityprompt(v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt"))
                    until v.Character.HumanoidRootPart.CarryPrompt.Enabled == false
                    wait(0.5)
                    if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
                        local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
                        Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                    end
                    wait(0.4)
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                    break
                end
            end
        end
        Loading = false
    end
})

TabHandles.MainGames:Toggle({
    Title = "自动帮助玩家",
    Desc = "自动扛起未通关玩家传送到终点",
    Value = false,
    Callback = function(value)
        _G.AutoHelpPlayer = value
        while _G.AutoHelpPlayer do
            pcall(function()
                for _, v in pairs(game.Players:GetPlayers()) do
                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        local carryPrompt = v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt")
                        if carryPrompt and carryPrompt.Enabled and not v.Character:FindFirstChild("SafeRedLightGreenLight") then
                            Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                            wait(0.3)
                            repeat
                                fireproximityprompt(carryPrompt)
                                task.wait(0.1)
                            until not carryPrompt.Enabled or not carryPrompt.Parent
                            wait(0.5)
                            if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
                                local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
                                Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                            end
                            wait(0.4)
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                            break
                        end
                    end
                end
            end)
            task.wait(2)
        end
    end
})

TabHandles.MainGames:Toggle({
    Title = "自动恶搞玩家",
    Desc = "扛起玩家让他滚回起点",
    Value = false,
    Callback = function(value)
        _G.AutoTrollPlayer = value
        while _G.AutoTrollPlayer do
            pcall(function()
                for _, v in pairs(game.Players:GetPlayers()) do
                    if v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt") and v.Character.HumanoidRootPart.CarryPrompt.Enabled == true then
                        if v.Character:FindFirstChild("SafeRedLightGreenLight") == nil then
                            Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                            wait(0.3)
                            repeat task.wait(0.1)
                                fireproximityprompt(v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt"))
                            until v.Character.HumanoidRootPart.CarryPrompt.Enabled == false
                            wait(0.5)
                            if Workspace:FindFirstChild("RedLightGreenLight") then
                                Player.Character.HumanoidRootPart.CFrame = CFrame.new(-84, 1023, -537)
                            end
                            wait(0.4)
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                            break
                        end
                    end
                end
            end)
            task.wait()
        end
    end
})

-- Dalgona & Tug Tab
TabHandles.Dalgona:Button({
    Title = "一键完成扣糖饼",
    Desc = "瞬间完成扣糖饼",
    Icon = "cookie",
    Callback = function()
        pcall(function()
            if ReplicatedStorage:FindFirstChild("Modules") and ReplicatedStorage.Modules:FindFirstChild("Games") then
                local DalgonaClientModule = ReplicatedStorage.Modules.Games:FindFirstChild("DalgonaClient")
                if DalgonaClientModule then
                    for i, v in pairs(getreg()) do
                        if typeof(v) == "function" and islclosure(v) then
                            if getfenv(v).script == DalgonaClientModule then
                                if getinfo(v).nups == 73 then
                                    setupvalue(v, 31, 9e9)
                                    WindUI:Notify({
                                        Title = "椪糖完成",
                                        Content = "抠图已完成！",
                                        Icon = "check",
                                        Duration = 3
                                    })
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
})

TabHandles.Dalgona:Toggle({
    Title = "自动扣糖饼",
    Desc = "自动完成扣糖饼",
    Value = false,
    Callback = function(value)
        _G.AutoDalgona = value
        while _G.AutoDalgona do
            pcall(function()
                if ReplicatedStorage:FindFirstChild("Modules") and ReplicatedStorage.Modules:FindFirstChild("Games") then
                    local DalgonaClientModule = ReplicatedStorage.Modules.Games:FindFirstChild("DalgonaClient")
                    if DalgonaClientModule then
                        for i, v in pairs(getreg()) do
                            if typeof(v) == "function" and islclosure(v) then
                                if getfenv(v).script == DalgonaClientModule then
                                    if getinfo(v).nups == 73 then
                                        setupvalue(v, 31, 9e9)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            task.wait(5)
        end
    end
})

TabHandles.Dalgona:Toggle({
    Title = "自动拔河",
    Desc = "自动赢得拔河比赛",
    Value = false,
    Callback = function(value)
        _G.TugOfWar = value
        while _G.TugOfWar do
            pcall(function()
                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TemporaryReachedBindable"):FireServer({GameQTE = true})
            end)
            task.wait(0.1)
        end
    end
})

-- Hide & Seek ESP Tab
TabHandles.HideSeekESP:Toggle({
    Title = "出口透视",
    Desc = "显示出口大门",
    Value = false,
    Callback = function(value)
        _G.DoorExit = value
        if value then
            task.spawn(function()
                while _G.DoorExit do
            pcall(function()
                if Workspace:FindFirstChild("HideAndSeekMap") then
                    for i, v in pairs(Workspace:FindFirstChild("HideAndSeekMap"):GetChildren()) do
                        if v.Name == "NEWFIXEDDOORS" then
                            for k, m in pairs(v:GetChildren()) do
                                if m.Name:find("Floor") and m:FindFirstChild("EXITDOORS") then
                                    for _, a in pairs(m:FindFirstChild("EXITDOORS"):GetChildren()) do
                                        if a:IsA("Model") and a:FindFirstChild("DoorRoot") then
                                            -- Clean existing ESP
                                            for _, z in pairs(a.DoorRoot:GetChildren()) do
                                                if z.Name:find("Esp_") then
                                                    z:Destroy()
                                                end
                                            end

                                            -- Add highlight if enabled
                                            if _G.EspHighlight and not a.DoorRoot:FindFirstChild("Esp_Highlight") then
                                                local Highlight = Instance.new("Highlight")
                                                Highlight.Name = "Esp_Highlight"
                                                Highlight.FillColor = Color3.fromRGB(0, 255, 0)
                                                Highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
                                                Highlight.FillTransparency = 0.5
                                                Highlight.OutlineTransparency = 0
                                                Highlight.Adornee = a
                                                Highlight.Parent = a.DoorRoot
                                            end

                                            -- Add GUI ESP if enabled
                                            if _G.EspGui and not a.DoorRoot:FindFirstChild("Esp_Gui") then
                                                local BillboardGui = Instance.new("BillboardGui")
                                                BillboardGui.Name = "Esp_Gui"
                                                BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                                                BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                                BillboardGui.AlwaysOnTop = true
                                                BillboardGui.Parent = a.DoorRoot

                                                local TextLabel = Instance.new("TextLabel")
                                                TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                                TextLabel.BackgroundTransparency = 1
                                                TextLabel.Text = "出口大门"
                                                TextLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                                                TextLabel.TextScaled = true
                                                TextLabel.Font = Enum.Font.SourceSansBold
                                                TextLabel.Parent = BillboardGui

                                                local UIStroke = Instance.new("UIStroke")
                                                UIStroke.Color = Color3.new(0, 0, 0)
                                                UIStroke.Thickness = 1.5
                                                UIStroke.Parent = TextLabel
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            task.wait(1)
        end
            end)
        else
            -- Clean up all door ESP when disabled
            if Workspace:FindFirstChild("HideAndSeekMap") then
                for i, v in pairs(Workspace:FindFirstChild("HideAndSeekMap"):GetChildren()) do
                    if v.Name == "NEWFIXEDDOORS" then
                        for k, m in pairs(v:GetChildren()) do
                            if m.Name:find("Floor") and m:FindFirstChild("EXITDOORS") then
                                for _, a in pairs(m:FindFirstChild("EXITDOORS"):GetChildren()) do
                                    if a:IsA("Model") and a:FindFirstChild("DoorRoot") then
                                        for _, z in pairs(a.DoorRoot:GetChildren()) do
                                            if z.Name:find("Esp_") then
                                                z:Destroy()
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
})

TabHandles.HideSeekESP:Toggle({
    Title = "钥匙透视",
    Desc = "显示掉落钥匙",
    Value = false,
    Callback = function(value)
        _G.DoorKey = value
        if value then
            task.spawn(function()
                while _G.DoorKey do
                    pcall(function()
                        for _, a in pairs(Workspace.Effects:GetChildren()) do
                            if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                                -- Clean existing ESP
                                for _, z in pairs(a.Handle:GetChildren()) do
                                    if z.Name:find("Esp_") then
                                        z:Destroy()
                                    end
                                end

                                if _G.EspHighlight and not a.Handle:FindFirstChild("Esp_Highlight") then
                                    local Highlight = Instance.new("Highlight")
                                    Highlight.Name = "Esp_Highlight"
                                    Highlight.FillColor = Color3.fromRGB(255, 255, 0)
                                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
                                    Highlight.FillTransparency = 0.3
                                    Highlight.OutlineTransparency = 0
                                    Highlight.Adornee = a
                                    Highlight.Parent = a.Handle
                                end

                                if _G.EspGui and not a.Handle:FindFirstChild("Esp_Gui") then
                                    local BillboardGui = Instance.new("BillboardGui")
                                    BillboardGui.Name = "Esp_Gui"
                                    BillboardGui.Size = UDim2.new(0, 150, 0, 40)
                                    BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                    BillboardGui.AlwaysOnTop = true
                                    BillboardGui.Parent = a.Handle

                                    local TextLabel = Instance.new("TextLabel")
                                    TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                    TextLabel.BackgroundTransparency = 1
                                    TextLabel.Text = "钥匙"
                                    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                                    TextLabel.TextScaled = true
                                    TextLabel.Font = Enum.Font.SourceSansBold
                                    TextLabel.Parent = BillboardGui

                                    local UIStroke = Instance.new("UIStroke")
                                    UIStroke.Color = Color3.new(0, 0, 0)
                                    UIStroke.Thickness = 1.5
                                    UIStroke.Parent = TextLabel
                                end
                            end
                        end
                    end)
                    task.wait(1)
                end
            end)
        else
            -- Clean up all key ESP when disabled
            for _, a in pairs(Workspace.Effects:GetChildren()) do
                if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                    for _, z in pairs(a.Handle:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        end
    end
})

TabHandles.HideSeekESP:Toggle({
    Title = "躲藏玩家透视",
    Desc = "显示躲藏的玩家",
    Value = false,
    Callback = function(value)
        _G.HidePlayer = value
        if value then
            task.spawn(function()
                while _G.HidePlayer do
                    pcall(function()
                        for i, v in pairs(game.Players:GetChildren()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                                if v:GetAttribute("IsHider") then
                                    -- Clean existing ESP first
                                    for _, z in pairs(v.Character.Head:GetChildren()) do
                                        if z.Name:find("Esp_") then
                                            z:Destroy()
                                        end
                                    end

                                    if _G.EspHighlight and not v.Character.Head:FindFirstChild("Esp_Highlight") then
                                        local Highlight = Instance.new("Highlight")
                                        Highlight.Name = "Esp_Highlight"
                                        Highlight.FillColor = Color3.fromRGB(255, 0, 0)
                                        Highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                                        Highlight.FillTransparency = 0.5
                                        Highlight.OutlineTransparency = 0
                                        Highlight.Adornee = v.Character
                                        Highlight.Parent = v.Character.Head
                                    end

                                    if _G.EspGui and not v.Character.Head:FindFirstChild("Esp_Gui") then
                                        local BillboardGui = Instance.new("BillboardGui")
                                        BillboardGui.Name = "Esp_Gui"
                                        BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                                        BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                        BillboardGui.AlwaysOnTop = true
                                        BillboardGui.Parent = v.Character.Head

                                        local TextLabel = Instance.new("TextLabel")
                                        TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                        TextLabel.BackgroundTransparency = 1
                                        TextLabel.Text = v.Name .. " (躲藏中)"
                                        TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                                        TextLabel.TextScaled = true
                                        TextLabel.Font = Enum.Font.SourceSansBold
                                        TextLabel.Parent = BillboardGui

                                        local UIStroke = Instance.new("UIStroke")
                                        UIStroke.Color = Color3.new(0, 0, 0)
                                        UIStroke.Thickness = 1.5
                                        UIStroke.Parent = TextLabel
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(1)
                end
            end)
        else
            -- Clean up all player ESP when disabled
            for i, v in pairs(game.Players:GetChildren()) do
                if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                    for _, z in pairs(v.Character.Head:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        end
    end
})

-- Hide & Seek Teleport Tab
TabHandles.HideSeekTeleport:Button({
    Title = "一键收集全部钥匙",
    Desc = "自动收集钥匙",
    Icon = "key",
    Callback = function()
        if Player:GetAttribute("IsHider") and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            local OldCFrame = Player.Character.HumanoidRootPart.CFrame
            for _, a in pairs(Workspace.Effects:GetChildren()) do
                if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                    Player.Character.HumanoidRootPart.CFrame = a.Handle.CFrame
                    wait(0.5)
                end
            end
            Player.Character.HumanoidRootPart.CFrame = OldCFrame
            WindUI:Notify({
                Title = "收集完成",
                Content = "已收集全部钥匙",
                Icon = "check",
                Duration = 3
            })
        end
    end
})

TabHandles.HideSeekTeleport:Button({
    Title = "传送到躲藏玩家",
    Desc = "传送到躲藏玩家身边",
    Icon = "eye",
    Callback = function()
        for i, v in pairs(game.Players:GetChildren()) do
            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                if v:GetAttribute("IsHider") and v.Character.Humanoid.Health > 0 then
                    Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                    WindUI:Notify({
                        Title = "传送成功",
                        Content = "已传送到 " .. v.Name,
                        Icon = "move",
                        Duration = 2
                    })
                    break
                end
            end
        end
    end
})

-- Player Movement Tab
TabHandles.Movement:Slider({
    Title = "移动速度",
    Desc = "自定义你的移速",
    Value = { Min = 16, Max = 1000, Default = 50 },
    Callback = function(val)
        _G.Speed = val
        if _G.AutoSpeed and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = val
        end
    end
})

TabHandles.Movement:Toggle({
    Title = "开启移速",
    Desc = "变成闪电侠",
    Value = false,
    Callback = function(value)
        _G.AutoSpeed = value
        if value and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = _G.Speed or 50
        elseif Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = 16
        end
    end
})

TabHandles.Movement:Toggle({
    Title = "无限跳",
    Desc = "踏空",
    Value = false,
    Callback = function(value)
        _G.InfiniteJump = value
    end
})

-- Float Feature
TabHandles.Movement:Toggle({
    Title = "锁定高度",
    Desc = "锁定你所在位置高度",
    Value = false,
    Callback = function(value)
        _G.Float = value
        if value then
            FloatConnection = RunService.Heartbeat:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = Player.Character.HumanoidRootPart
                    local bodyVelocity = rootPart:FindFirstChild("FloatVelocity")

                    if not bodyVelocity then
                        bodyVelocity = Instance.new("BodyVelocity")
                        bodyVelocity.Name = "FloatVelocity"
                        bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                        bodyVelocity.Parent = rootPart
                    end
                end
            end)
            WindUI:Notify({
                Title = "锁定高度已开启",
                Content = "已开启",
                Icon = "move",
                Duration = 2
            })
        else
            if FloatConnection then
                FloatConnection:Disconnect()
                FloatConnection = nil
            end
            if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                local bodyVelocity = Player.Character.HumanoidRootPart:FindFirstChild("FloatVelocity")
                if bodyVelocity then
                    bodyVelocity:Destroy()
                end
            end
            WindUI:Notify({
                Title = "锁定高度已关闭",
                Content = "已关闭",
                Icon = "move",
                Duration = 2
            })
        end
    end
})

-- NoClip Feature
TabHandles.Movement:Toggle({
    Title = "穿墙",
    Desc = "穿墙",
    Value = false,
    Callback = function(value)
        _G.NoClip = value
        if value then
            NoClipConnection = RunService.Stepped:Connect(function()
                if Player.Character then
                    for _, part in pairs(Player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            WindUI:Notify({
                Title = "穿墙已开启",
                Content = "可自由穿透",
                Icon = "move",
                Duration = 2
            })
        else
            if NoClipConnection then
                NoClipConnection:Disconnect()
                NoClipConnection = nil
            end
            if Player.Character then
                for _, part in pairs(Player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            WindUI:Notify({
                Title = "穿墙已关闭",
                Content = "穿墙已关闭",
                Icon = "move",
                Duration = 2
            })
        end
    end
})

-- Player Utilities Tab
TabHandles.Utilities:Toggle({
    Title = "自动跳过对话",
    Desc = "自动跳过所有剧情对话",
    Value = false,
    Callback = function(value)
        _G.AutoSkip = value
        if value then
            task.spawn(function()
                while _G.AutoSkip do
                    pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("DialogueRemote"):FireServer("Skipped")
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TemporaryReachedBindable"):FireServer()
                    end)
                    task.wait(0.8)
                end
            end)
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "零交互延迟",
    Desc = "去除所有交互按钮的按住时间",
    Value = false,
    Callback = function(value)
        _G.NoCooldownProximity = value
        if value then
            for i, v in pairs(Workspace:GetDescendants()) do
                if v.ClassName == "ProximityPrompt" then
                    v.HoldDuration = 0
                end
            end
            if CooldownProximity then
                CooldownProximity:Disconnect()
            end
            CooldownProximity = Workspace.DescendantAdded:Connect(function(Cooldown)
                if _G.NoCooldownProximity and Cooldown:IsA("ProximityPrompt") then
                    Cooldown.HoldDuration = 0
                end
            end)
        else
            if CooldownProximity then
                CooldownProximity:Disconnect()
                CooldownProximity = nil
            end
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "性能优化",
    Desc = "降低画质提升帧率",
    Value = false,
    Callback = function(value)
        _G.AntiLag = value
        if value then
            local Terrain = Workspace:FindFirstChildOfClass("Terrain")
            if Terrain then
                Terrain.WaterWaveSize = 0
                Terrain.WaterWaveSpeed = 0
                Terrain.WaterReflectance = 0
                Terrain.WaterTransparency = 1
            end
            game.Lighting.GlobalShadows = false
            game.Lighting.FogEnd = 9e9
            game.Lighting.FogStart = 9e9

            task.spawn(function()
                while _G.AntiLag do
                    pcall(function()
                        for i, v in pairs(Workspace:FindFirstChild("Effects"):GetChildren()) do
                            PartLagDe(v)
                        end
                    end)
                    task.wait(1)
                end
            end)
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "防被甩飞",
    Desc = "防止被出生甩飞",
    Value = false,
    Callback = function(value)
        _G.AntiFling = value
        while _G.AntiFling do
            pcall(function()
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                    Player.Character.HumanoidRootPart.Anchored = true
                    Player.Character.HumanoidRootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                    Player.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                    Player.Character.HumanoidRootPart.Anchored = false
                end
            end)
            task.wait(0.1)
        end
    end
})

-- Other Games Tab
TabHandles.OtherGames:Button({
    Title = "一键完成跳绳",
    Desc = "直接传送到跳绳终点",
    Icon = "activity",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("JumpRope") and Workspace.JumpRope:FindFirstChild("Important") then
                local model = Workspace.JumpRope.Important:FindFirstChild("Model")
                if model and model:FindFirstChild("LEGS") then
                    local pos = model.LEGS.Position
                    Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                    WindUI:Notify({
                        Title = "完成",
                        Content = "已通关",
                        Icon = "check",
                        Duration = 3
                    })
                end
            end
        end)
    end
})

TabHandles.OtherGames:Button({
    Title = "玻璃桥透视",
    Desc = "显示玻璃桥安全玻璃",
    Icon = "eye",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("GlassBridge") then
                local GlassHolder = Workspace.GlassBridge:FindFirstChild("GlassHolder")
                if GlassHolder then
                    for i, v in pairs(GlassHolder:GetChildren()) do
                        for k, j in pairs(v:GetChildren()) do
                            if j:IsA("Model") and j.PrimaryPart then
                                local isSafe = not j.PrimaryPart:GetAttribute("exploitingisevil")
                                local Color = isSafe and Color3.fromRGB(28, 235, 87) or Color3.fromRGB(248, 87, 87)
                                j.PrimaryPart.Color = Color
                                j.PrimaryPart.Transparency = 0
                                j.PrimaryPart.Material = Enum.Material.Neon
                            end
                        end
                    end
                    WindUI:Notify({
                        Title = "玻璃桥透视",
                        Content = "已开启",
                        Icon = "eye",
                        Duration = 3
                    })
                end
            end
        end)
    end
})

TabHandles.OtherGames:Button({
    Title = "一键通过玻璃桥",
    Desc = "直接传送到玻璃桥终点",
    Icon = "zap",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("GlassBridge") and Workspace.GlassBridge:FindFirstChild("End") and Workspace.GlassBridge.End.PrimaryPart then
                local pos = Workspace.GlassBridge.End.PrimaryPart.Position + Vector3.new(0, 8, 0)
                Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                WindUI:Notify({
                    Title = "已通关",
                    Content = "已传送到终点",
                    Icon = "check",
                    Duration = 3
                })
            end
        end)
    end
})

TabHandles.OtherGames:Toggle({
    Title = "自动抱团",
    Desc = "自动完成抱团小游戏",
    Value = false,
    Callback = function(value)
        _G.AutoMingle = value
        while _G.AutoMingle do
            pcall(function()
                for i, v in ipairs(Player.Character:GetChildren()) do
                    if v.Name == "RemoteForQTE" then
                        v:FireServer()
                    end
                end
            end)
            task.wait(0.1)
        end
    end
})


-- Final notification
WindUI:Notify({
    Title = "Rb脚本中心-付费版",
    Content = "加载完成",
    Icon = "zap",
    Duration = 5
})
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
else
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {{
        Title = "取消",
        -- Icon = "",
        Callback = function()
        end,
        Variant = "Secondary" -- Primary, Secondary, Tertiary
    }, {
        Title = "确认",
        Icon = "arrow-right",
        Callback = function()
            Confirmed = true
        end,
        Variant = "Primary" -- Primary, Secondary, Tertiary
    }}
})

WindUI.Services.LuarmorService = {
    Name = "Luarmor 验证",
    Icon = "key",
    Args = {"ScriptId", "Discord"},
    New = function(ScriptId, Discord)
        print("初始化Luarmor服务: ScriptId=", ScriptId, "Discord=", Discord)
        
        -- 安全加载Luarmor库
        local success, API = pcall(function()
            return loadstring(game:HttpGet("https://sdkapi-public.luarmor.net/library.lua"))()
        end)
        
        if not success or not API then
            warn("无法加载Luarmor库: " .. tostring(API))
            return {
                Verify = function() return false, "服务初始化失败" end,
                Copy = function() return "无法复制" end
            }
        end
        
        API.script_id = ScriptId
        
        return {
            Verify = function(key)
                print("验证卡密: " .. tostring(key))
                local status = API.check_key(key)
                
                if not status then
                    warn("验证API返回nil")
                    return false, "验证服务无响应"
                end
                
                print("验证状态: ", status.code, " - ", status.message)
                
                if status.code == "KEY_VALID" then
                    return true, "验证成功"
                elseif status.code == "KEY_HWID_LOCKED" then
                    return false, "HWID不匹配，请通过Discord重置"
                elseif status.code == "KEY_EXPIRED" then
                    return false, "卡密已过期"
                else
                    return false, "卡密无效 (" .. (status.message or "未知错误") .. ")"
                end
            end,
            
            Copy = function()
                print("复制Discord链接: " .. Discord)
                if setclipboard then
                    setclipboard(Discord)
                elseif toclipboard then
                    toclipboard(Discord)
                else
                    return "无法复制，注入器不支持剪贴板操作"
                end
                return "Discord链接已复制"
            end
        }
    end
}

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = {
            Color = Color3.fromHex("#0f0c29"),
            Transparency = 1
        },
        ["100"] = {
            Color = Color3.fromHex("#302b63"),
            Transparency = 0.9
        }
    }, {
        Rotation = 45
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()

            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
KeySystem = {
        Note = "请输入您的卡密进行验证",
        Thumbnail = {
            Image = "rbxassetid://119970903874014",
            Title = "Rb脚本中心"
        },
        API = {{
            Type = "LuarmorService",  -- 使用新的服务名称
            ScriptId = "6fa2f5b2bc6d2ae88b069bdb76c0e1e8",  -- 确保这是正确的ScriptId
            Discord = "https://ads.luarmor.net/get_key?for=Rb_Script_HUB_FFB-AGCdDBQkFGED"  -- 确保这是正确的Discord链接
        }},
        SaveKey = false
    },
    HideSearchBar = false,
    ScrollBarEnabled = true
})

if Window.KeySystem and Window.KeySystem.API then
    local service = Window.KeySystem.API[1]
    if service and service.Verify then
        -- 在实际验证流程中，这里会调用service:Verify(key)
        print("服务验证函数可用")
    else
        warn("服务验证函数不可用")
    end
else
    warn("KeySystem API未正确初始化")
end

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的：" .. game.Players.LocalPlayer.Character.Name ..
                     "付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new {ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
                                      ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
                                      ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
                                      ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
                                      ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
                                      ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
                                      ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
                                      ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
                                      ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
                                      ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
                                      ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {
    Rotation = 360
})
tween:Play()

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: " .. WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

Window:CreateTopbarButton("MyCustomButton2", "droplet-off",  function()
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local API_KEY = "sk-aa4018ed6a5745dc844fd78ef81a1c09"
local MODEL = "deepseek-chat"

local old = PlayerGui:FindFirstChild("CuteAI_ChatUI")
if old then old:Destroy() end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CuteAI_ChatUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 420, 0, 360)
frame.Position = UDim2.new(0.5, -210, 0.5, -180)
frame.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

-- ===== 侧边栏（人设设置） =====
local sidebar = Instance.new("Frame", frame)
sidebar.Size = UDim2.new(0, 160, 1, 0)
sidebar.BackgroundColor3 = Color3.fromRGB(240, 220, 240)
sidebar.BorderSizePixel = 0
sidebar.Position = UDim2.new(0, -160, 0, 0)
Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0, 12)

-- 人设输入框
local personaBox = Instance.new("TextBox", sidebar)
personaBox.Size = UDim2.new(1, -20, 0, 100)
personaBox.Position = UDim2.new(0, 10, 0, 10)
personaBox.Text = "你是\\Rb娘化版·小云\\，一个可爱活泼的二次元AI助手，温柔贴心，使用中文，带点颜文字(≧▽≦)"
personaBox.TextWrapped = true
personaBox.TextSize = 14
personaBox.ClearTextOnFocus = false
personaBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
personaBox.TextColor3 = Color3.fromRGB(50, 50, 50)
Instance.new("UICorner", personaBox).CornerRadius = UDim.new(0, 8)

-- 新建对话按钮
local newChatBtn = Instance.new("TextButton", sidebar)
newChatBtn.Size = UDim2.new(1, -20, 0, 30)
newChatBtn.Position = UDim2.new(0, 10, 0, 120)
newChatBtn.Text = "+ 新建对话"
newChatBtn.Font = Enum.Font.GothamBold
newChatBtn.TextSize = 14
newChatBtn.BackgroundColor3 = Color3.fromRGB(255, 200, 220)
newChatBtn.TextColor3 = Color3.fromRGB(80, 40, 60)
Instance.new("UICorner", newChatBtn).CornerRadius = UDim.new(0, 8)

-- 按钮 hover 效果函数
local function styleButton(btn, default, hover, pressed)
    btn.TextColor3 = default
    btn.MouseEnter:Connect(function()
        btn.TextColor3 = hover
    end)
    btn.MouseLeave:Connect(function()
        btn.TextColor3 = default
    end)
    btn.MouseButton1Down:Connect(function()
        btn.TextColor3 = pressed
        btn.TextSize = btn.TextSize - 2
    end)
    btn.MouseButton1Up:Connect(function()
        btn.TextColor3 = hover
        btn.TextSize = btn.TextSize + 2
    end)
end

styleButton(newChatBtn, Color3.fromRGB(80,40,60), Color3.fromRGB(120,50,80), Color3.fromRGB(40,20,40))

-- 使用说明
local usageLabel = Instance.new("TextLabel", sidebar)
usageLabel.Size = UDim2.new(1, -20, 0, 180)
usageLabel.Position = UDim2.new(0, 10, 0, 160)
usageLabel.TextWrapped = true
usageLabel.Font = Enum.Font.Gotham
usageLabel.TextSize = 14
usageLabel.TextColor3 = Color3.fromRGB(60, 40, 80)
usageLabel.BackgroundTransparency = 1
usageLabel.TextXAlignment = Enum.TextXAlignment.Left
usageLabel.TextYAlignment = Enum.TextYAlignment.Top
usageLabel.Text = "💡 使用说明：\n" ..
    "1. 输入文字即可和小云聊天。\n" ..
    "2. 点击『新建对话』会清空旧消息并应用当前人设。\n" ..
    "3. 小云会记住当前 Roblox 游戏的信息，当你询问与游戏相关的信息时会自动回答。\n" ..
    "4. 也可以问其他问题，小云会像普通 AI 一样回答。\n"

-- 制作者署名
local creditLabel = Instance.new("TextLabel", sidebar)
creditLabel.Size = UDim2.new(1, -20, 0, 20)
creditLabel.Position = UDim2.new(0, 10, 1, -25)
creditLabel.Text = "--- Yungengxin制作 ---"
creditLabel.Font = Enum.Font.Gotham
creditLabel.TextSize = 12
creditLabel.TextColor3 = Color3.fromRGB(120, 100, 140)
creditLabel.BackgroundTransparency = 1
creditLabel.TextXAlignment = Enum.TextXAlignment.Center

-- 聊天框
local chatBox = Instance.new("ScrollingFrame", frame)
chatBox.Size = UDim2.new(1, -20, 1, -96)
chatBox.Position = UDim2.new(0, 10, 0, 40)
chatBox.BackgroundTransparency = 1
chatBox.BorderSizePixel = 0
chatBox.ScrollBarThickness = 6
chatBox.AutomaticCanvasSize = Enum.AutomaticSize.Y
chatBox.CanvasSize = UDim2.new(0, 0, 0, 0)
local list = Instance.new("UIListLayout", chatBox)
list.Padding = UDim.new(0, 6)
list.SortOrder = Enum.SortOrder.LayoutOrder

-- 标题栏
local titleBar = Instance.new("Frame", frame)
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(230, 200, 230)
Instance.new("UICorner", titleBar).CornerRadius = UDim.new(0, 12)

local title = Instance.new("TextLabel", titleBar)
title.Text = "Rb脚本中心AI · 小云 v_1.0.0"
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextColor3 = Color3.fromRGB(90, 50, 80)
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -200, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)

-- 缩小按钮
local minimizeBtn = Instance.new("TextButton", titleBar)
minimizeBtn.Size = UDim2.new(0, 60, 0, 30)
minimizeBtn.Position = UDim2.new(1, -90, 0, 0)
minimizeBtn.Text = "—"
minimizeBtn.TextSize = 22
minimizeBtn.Font = Enum.Font.GothamBold
minimizeBtn.BackgroundColor3 = Color3.fromRGB(230,200,230)
minimizeBtn.BorderSizePixel = 0
Instance.new("UICorner", minimizeBtn).CornerRadius = UDim.new(0, 8)
styleButton(minimizeBtn, Color3.fromRGB(80,80,80), Color3.fromRGB(40,40,40), Color3.fromRGB(20,20,20))

-- 清空按钮
local clearBtn = Instance.new("TextButton", titleBar)
clearBtn.Size = UDim2.new(0, 30, 0, 30)
clearBtn.Position = UDim2.new(1, -150, 0, 0)
clearBtn.Text = "🗑"
clearBtn.TextSize = 18
clearBtn.Font = Enum.Font.GothamBold
clearBtn.BackgroundColor3 = Color3.fromRGB(255,220,220)
clearBtn.TextColor3 = Color3.fromRGB(180,0,0)
clearBtn.BorderSizePixel = 0
Instance.new("UICorner", clearBtn).CornerRadius = UDim.new(0, 8)
styleButton(clearBtn, Color3.fromRGB(180,0,0), Color3.fromRGB(255,0,0), Color3.fromRGB(120,0,0))

-- 关闭按钮
local closeBtn = Instance.new("TextButton", titleBar)
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(1, -30, 0, 0)
closeBtn.Text = "X"
closeBtn.TextSize = 20
closeBtn.Font = Enum.Font.GothamBold
closeBtn.BackgroundColor3 = Color3.fromRGB(255,200,200)
closeBtn.TextColor3 = Color3.fromRGB(200,50,50)
closeBtn.BorderSizePixel = 0
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 8)
styleButton(closeBtn, Color3.fromRGB(200,50,50), Color3.fromRGB(255,0,0), Color3.fromRGB(150,0,0))

-- 输入框和发送按钮
local input = Instance.new("TextBox", frame)
input.Size = UDim2.new(1, -100, 0, 44)
input.Position = UDim2.new(0, 10, 1, -54)
input.PlaceholderText = "和小云聊天"
input.Text = ""
input.TextSize = 18
input.ClearTextOnFocus = false
input.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
input.TextColor3 = Color3.fromRGB(50, 50, 50)
Instance.new("UICorner", input).CornerRadius = UDim.new(0, 8)

local sendBtn = Instance.new("TextButton", frame)
sendBtn.Size = UDim2.new(0, 70, 0, 44)
sendBtn.Position = UDim2.new(1, -80, 1, -54)
sendBtn.Text = "发送"
sendBtn.TextSize = 18
sendBtn.Font = Enum.Font.GothamBold
sendBtn.BackgroundColor3 = Color3.fromRGB(255, 182, 193)
sendBtn.TextColor3 = Color3.fromRGB(90, 50, 80)
Instance.new("UICorner", sendBtn).CornerRadius = UDim.new(0, 8)
styleButton(sendBtn, Color3.fromRGB(90,50,80), Color3.fromRGB(120,70,100), Color3.fromRGB(60,30,50))

-- 输入提示
local typing = Instance.new("TextLabel", frame)
typing.Text = ""
typing.Font = Enum.Font.Gotham
typing.TextSize = 14
typing.TextColor3 = Color3.fromRGB(140, 120, 140)
typing.BackgroundTransparency = 1
typing.Size = UDim2.new(1, -20, 0, 18)
typing.Position = UDim2.new(0, 10, 1, -78)

-- ============ Roblox API 游戏信息 ============
local function getLocalGameInfo()
    return {
        name = game.Name,
        placeId = game.PlaceId,
        universeId = game.GameId,
        players = Players.NumPlayers
    }
end

local function fetchGameDetails(universeId)
    local success, result = pcall(function()
        return HttpService:GetAsync("https://games.roblox.com/v1/games?universeIds=" .. tostring(universeId))
    end)

    if success then
        local data = HttpService:JSONDecode(result)
        if data.data and #data.data > 0 then
            local gameInfo = data.data[1]
            return {
                name = gameInfo.name,
                description = gameInfo.description,
                creatorName = gameInfo.creator and gameInfo.creator.name or "未知",
                creatorType = gameInfo.creator and gameInfo.creator.type or "未知",
                playing = gameInfo.playing,
                visits = gameInfo.visits,
                favorites = gameInfo.favoritedCount
            }
        end
    end
    return nil
end

local function formatGameInfo()
    local localInfo = getLocalGameInfo()
    local apiInfo = fetchGameDetails(localInfo.universeId)

    local text = string.format(
        "游戏名称: %s\\nPlaceId: %d\\nUniverseId: %d\\n当前玩家数: %d",
        localInfo.name, localInfo.placeId, localInfo.universeId, localInfo.players
    )

    if apiInfo then
        text = text .. string.format(
            "\\n描述: %s\\n作者: %s (%s)\\n在线人数: %d\\n总访问量: %d\\n收藏数: %d",
            apiInfo.description, apiInfo.creatorName, apiInfo.creatorType,
            apiInfo.playing, apiInfo.visits, apiInfo.favorites
        )
    end

    return text
end


-- ============ 聊天逻辑 ============
local currentHistory = {}
local persona = personaBox.Text

local function addBubble(sender, text, isMe, typingEffect)
    local container = Instance.new("Frame", chatBox)
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, 0, 0, 0)
    container.AutomaticSize = Enum.AutomaticSize.Y

    local lbl = Instance.new("TextLabel", container)
    lbl.TextWrapped = true
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 16
    lbl.Text = ""
    lbl.AutomaticSize = Enum.AutomaticSize.Y
    lbl.Size = UDim2.new(0.7, 0, 0, 0)
    lbl.BackgroundColor3 = isMe and Color3.fromRGB(200, 230, 255) or Color3.fromRGB(255, 230, 240)
    lbl.TextColor3 = Color3.fromRGB(40, 40, 40)
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    Instance.new("UICorner", lbl).CornerRadius = UDim.new(0, 12)

    local pad = Instance.new("UIPadding", lbl)
    pad.PaddingTop = UDim.new(0, 8)
    pad.PaddingBottom = UDim.new(0, 8)
    pad.PaddingLeft = UDim.new(0, 10)
    pad.PaddingRight = UDim.new(0, 10)

    if isMe then
        lbl.AnchorPoint = Vector2.new(1, 0)
        lbl.Position = UDim2.new(1, -10, 0, 0)
    else
        lbl.AnchorPoint = Vector2.new(0, 0)
        lbl.Position = UDim2.new(0, 10, 0, 0)
    end

    lbl:GetPropertyChangedSignal("TextBounds"):Connect(function()
        container.Size = UDim2.new(1, 0, 0, lbl.TextBounds.Y + 16)
    end)

    if typingEffect then
        for i = 1, #text do
            lbl.Text = string.sub(text, 1, i)
            task.wait(0.03)
        end
    else
        lbl.Text = text
    end
end

local function buildSystemPrompt()
    local gameInfoText = formatGameInfo()
    return persona ..
        "\\n你运行在 Roblox 游戏环境中，可以参考以下当前游戏的详细信息回答问题（仅在用户询问游戏相关时使用）：\\n" ..
        gameInfoText ..
        "\\n另外，你了解 Roblox 平台相关的知识，请在需要时结合这些知识回答用户。"
end


local function newChat()
    busy = false
    currentHistory = {
        { role = "system", content = buildSystemPrompt() }
    }
    for _, child in ipairs(chatBox:GetChildren()) do
        if child:IsA("Frame") then child:Destroy() end
    end
    addBubble("小云", "新会话已创建 (｡･ω･｡)ﾉ♡", false, true)
end

newChatBtn.MouseButton1Click:Connect(function()
    persona = personaBox.Text ~= "" and personaBox.Text or persona
    newChat()
end)

-- 清空功能
local function clearChat()
    busy = false
    currentHistory = {
        { role = "system", content = buildSystemPrompt() }
    }
    for _, child in ipairs(chatBox:GetChildren()) do
        if child:IsA("Frame") then child:Destroy() end
    end
    addBubble("小云", "聊天记录已清空 (｡•́︿•̀｡)", false, true)
end
clearBtn.MouseButton1Click:Connect(clearChat)

-- AI 调用
local function callAI()
    local payload = {
        model = MODEL,
        messages = currentHistory
    }
    local requestData = {
        Url = "https://api.deepseek.com/v1/chat/completions",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
            ["Authorization"] = "Bearer " .. API_KEY
        },
        Body = HttpService:JSONEncode(payload)
    }
    local response = HttpService:RequestAsync(requestData)
    if response.Success then
        local data = HttpService:JSONDecode(response.Body)
        if data.choices and data.choices[1] and data.choices[1].message then
            return data.choices[1].message.content
        else
            return "（API返回格式异常）"
        end
    else
        return "（请求失败：" .. tostring(response.StatusCode) .. "）"
    end
end

local busy = false
local timeoutDuration = 15 -- 超时时间（秒）

local function send(text)
    if busy then return end
    text = string.gsub(text, "^%s*(.-)%s*$", "%1")
    if text == "" then return end

    addBubble("你", text, true, false)
    input.Text = ""
    busy = true
    typing.Text = "小云正在输入…"

    local timestamp = tick()
    table.insert(currentHistory, { role = "user", content = text, timestamp = timestamp })

    task.delay(timeoutDuration, function()
        if busy and currentHistory[#currentHistory].timestamp == timestamp then
            busy = false
            typing.Text = ""
            addBubble("系统", "（请求超时，已自动解锁）", false, false)
        end
    end)

    local reply = callAI()
    table.insert(currentHistory, { role = "assistant", content = reply })

    typing.Text = ""
    addBubble("小云", reply, false, true)
    busy = false
end

sendBtn.MouseButton1Click:Connect(function()
    send(input.Text)
end)

input.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        send(input.Text)
    end
end)

-- 缩小逻辑
local minimized = false
minimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        chatBox.Visible = false
        input.Visible = false
        sendBtn.Visible = false
        typing.Visible = false
        sidebar.Visible = false
        frame.Size = UDim2.new(0, 420, 0, 40)
    else
        chatBox.Visible = true
        input.Visible = true
        sendBtn.Visible = true
        typing.Visible = true
        sidebar.Visible = true
        frame.Size = UDim2.new(0, 420, 0, 360)
    end
end)

-- 关闭逻辑
closeBtn.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- 初始化
newChat() 

end,  989)

local Tabs = {
    Main = Window:Section({
        Title = "通用",
        Opened = true
    }),
    gn = Window:Section({
        Title = "功能",
        Opened = true
    }),
    Settings = Window:Section({
        Title = "UI设置",
        Opened = true
    }),
    Utilities = Window:Section({
        Title = "保存配置",
        Opened = true
    })
}

local TabHandles = {
    xx = Tabs.Main:Tab({
        Title = "游戏信息",
        Icon = "layout-grid"
    }),
    Elements = Tabs.Main:Tab({
        Title = "玩家功能",
        Icon = "layout-grid"
    }),
    gn = Tabs.gn:Tab({
        Title = "加载游戏",
        Icon = "layout-grid"
    }),
    Appearance = Tabs.Settings:Tab({
        Title = "UI外观",
        Icon = "brush"
    }),
    Config = Tabs.Utilities:Tab({
        Title = "调整配置",
        Icon = "settings"
    })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = "" .. game:GetService("Players").LocalPlayer.DisplayName .. "",
    Buttons = {{
        Title = "复制您的名称",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Icon = "copy",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = "" .. game:GetService("Players").LocalPlayer.Name .. "",
    Buttons = {{
        Title = "复制您的用户名",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard(game:GetService("Players").LocalPlayer.Name)

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = "" .. game:GetService("Players").LocalPlayer.UserId .. "",
    Buttons = {{
        Title = "复制您的用户名ID",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard(game:GetService("Players").LocalPlayer.UserId)

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = "" .. game:GetService("Players").LocalPlayer.AccountAge .. "",
    Buttons = {{
        Title = "复制您的注册时间",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = "" .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name .. "",
    Buttons = {{
        Title = "复制您所在的服务器名称",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = "" .. game.PlaceId .. "",
    Buttons = {{
        Title = "复制您所在的服务器ID",
        Icon = "copy",
        Variant = "Primary",
        Callback = function()

            setclipboard("无法复制")

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功复制！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = "" .. identifyexecutor() .. "",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {{
        Title = "测试您注入器的UNC",
        Variant = "Primary",
        Callback = function()
            Window:Dialog({
                Title = "Rb脚本中心",
                Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
                Icon = "bell",
                Buttons = {{
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function()
                        print("ok")
                    end
                }}
            })
            loadstring(game:HttpGet "https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

            local Sound = Instance.new("Sound", game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
            WindUI:Notify({
                Title = "Rb脚本中心---提示：",
                Content = "已成功执行，请在控制台查看UNC！",
                Icon = "bell",
                IconThemed = true, -- automatic color icon to theme 
                Duration = 5
            })

        end,
        Icon = "bird"
    }}
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]]
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]]
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = {
        Min = 0,
        Max = 1000,
        Default = 16
    },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = {
        Min = 0,
        Max = 10,
        Default = 0
    },
    Callback = function(value)
        local tpWalk = {}

        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")

        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local teleportDistance = value -- 每次传送的距离
        local isTeleporting = true -- 是否正在传送

        -- 禁用所有与移动相关的状态
        local function DisableDefaultMovement()
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        end

        -- 启用所有与移动相关的状态
        local function EnableDefaultMovement()
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
        end

        -- 自定义传送函数
        local function Teleport()
            if not isTeleporting or not rootPart or not humanoid then
                return
            end

            -- 获取移动方向
            local moveDirection = humanoid.MoveDirection
            if moveDirection.Magnitude == 0 then
                return -- 如果没有移动方向，则停止传送
            end

            -- 计算传送向量
            local teleportVector = moveDirection * teleportDistance

            -- 检测前方是否有障碍物
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

            local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

            if raycastResult then
                -- 如果有障碍物，调整传送向量
                teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
            end

            -- 更新位置
            rootPart.CFrame = rootPart.CFrame + teleportVector
        end

        -- 控制开关函数
        function tpWalk:Enabled(enabled)
            isTeleporting = enabled
            if enabled then
                DisableDefaultMovement()
            else
                EnableDefaultMovement()
            end
        end

        function tpWalk:GetEnabled()
            return isTeleporting
        end

        function tpWalk:SetSpeed(speed)
            teleportDistance = speed or 0.1
        end

        function tpWalk:GetSpeed()
            return teleportDistance
        end

        -- 每帧更新传送
        RunService.Heartbeat:Connect(function()
            if isTeleporting then
                Teleport()
            end
        end)

        return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = {
        Min = 0,
        Max = 1000,
        Default = 50
    },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = {
        Min = 0,
        Max = 1000,
        Default = 309
    },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})

TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state)
        if state then
            game.Lighting.Ambient = Color3.new(1, 1, 1)
        else
            game.Lighting.Ambient = Color3.new(0, 0, 0)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and
            not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state)
        if state then
            xrayEnabled = true
            xray()
        else
            xrayEnabled = false
            xray()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or
                "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
        NoFog()
        local Sound = Instance.new("Sound", game:GetService("SoundService"))
        Sound.SoundId = "rbxassetid://2865227271"
        Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
        local Sound = Instance.new("Sound", game:GetService("SoundService"))
        Sound.SoundId = "rbxassetid://2865227271"
        Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

local wpgn

TabHandles.gn:Button({
    Title = "自动检测服务器并加载对应脚本",
    Icon = "bell",
    Callback = function()
if game.GameId == 3808081382 then  --- Doors Lobby
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", -- Required
	Text = "正在加载...最强战场...", -- Required
	Icon = "rbxassetid://119970903874014" -- Optional
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()



local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 最强战场",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
            local StarterGui = game:GetService("StarterGui")
            local RunService = game:GetService("RunService")
            local TweenService = game:GetService("TweenService")
            local UserInputService = game:GetService("UserInputService")
            local VirtualInputManager = game:GetService("VirtualInputManager")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Camera = game:GetService('Workspace').CurrentCamera

            local RunService = game:GetService("RunService")
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Humanoid
            local HumanoidRootPart

local function SafeDebugPrint(message)
                print("[DEBUG] " .. message)
            end

            local function InitializeHumanoid()
                local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if character then
                    Humanoid = character:FindFirstChild("Humanoid")
                    if Humanoid then
                        HumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                        if not HumanoidRootPart then
                            SafeDebugPrint("HumanoidRootPart not found for " .. LocalPlayer.Name)
                        else
                            SafeDebugPrint("HumanoidRootPart initialized for " .. LocalPlayer.Name)
                        end
                    else
                        SafeDebugPrint("Humanoid not found for " .. LocalPlayer.Name)
                    end
                end
            end

            if LocalPlayer.Character then
                InitializeHumanoid()
            end

            LocalPlayer.CharacterAdded:Connect(InitializeHumanoid)

            local kenConfiguration = {
                Main = {
                    Combat = {
                        AttackAura = false,
                        AutoParry = false
                    },
                    Farm = {
                        KillFarm = false,
                        AutoUltimate = true
                    }
                },
                Player = {
                    Character = {
                        OverwriteProperties = false,
                        WalkSpeed = 50,
                        JumpPower = 50
                    }
                }
            }

            local Functions = {}

            function Functions.BestTarget(MaxDistance)
                MaxDistance = MaxDistance or math.huge
                local Target = nil
                local MinKills = math.huge

                for _, v in pairs(Players:GetPlayers()) do
                    if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
                        local rootPart = v.Character:FindFirstChild("HumanoidRootPart")
                        if rootPart then
                            local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                            local kills = v:GetAttribute("Kills") or 0

                            if distance < MaxDistance and kills < MinKills then
                                Target = v
                                MaxDistance = distance
                                MinKills = kills
                            end
                        end
                    end
                end

                SafeDebugPrint("Best target found: " .. (Target and Target.Name or "None"))
                return Target
            end

            function Functions.UseAbility(Ability)
                if not LocalPlayer.Character then
                    return
                end
                local Tool = LocalPlayer.Backpack:FindFirstChild(Ability)
                if Tool then
                    SafeDebugPrint("Using ability: " .. Ability)
                    LocalPlayer.Character.Communicate:FireServer(
                        {
                            Tool = Tool,
                            Goal = "Console Move",
                            ToolName = tostring(Ability)
                        }
                    )
                else
                    SafeDebugPrint("Ability not found: " .. Ability)
                end
            end

            function Functions.RandomAbility()
                if not LocalPlayer.PlayerGui:FindFirstChild("Hotbar") then
                    return nil
                end
                local Hotbar = LocalPlayer.PlayerGui.Hotbar.Backpack.Hotbar
                local Abilities = {}

                for _, v in pairs(Hotbar:GetChildren()) do
                    if v.ClassName ~= "UIListLayout" and v.Visible and v.Base.ToolName.Text ~= "N/A" and not v.Base:FindFirstChild("Cooldown") then
                        table.insert(Abilities, v)
                    end
                end

                if #Abilities > 0 then
                    local RandomAbility = Abilities[math.random(1, #Abilities)]
                    return RandomAbility.Base.ToolName.Text
                else
                    SafeDebugPrint("No available abilities")
                    return nil
                end
            end

            function Functions.ActivateUltimate()
                local UltimateBar = LocalPlayer:GetAttribute("Ultimate") or 0
                if UltimateBar >= 100 then
                    LocalPlayer.Character.Communicate:FireServer(
                        {
                            MoveDirection = Vector3.new(0, 0, 0),
                            Key = Enum.KeyCode.G,
                            Goal = "KeyPress"
                        }
                    )
                    SafeDebugPrint("Ultimate activated")
                else
                    SafeDebugPrint("Ultimate not ready: " .. UltimateBar .. "%")
                end
            end

            function Functions.TeleportUnderPlayer(player)
                if not player.Character then
                    return
                end
                local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
                if rootPart and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local targetCFrame = rootPart.CFrame * CFrame.new(0, -5, 0)
                    LocalPlayer.Character:SetPrimaryPartCFrame(targetCFrame)
                    SafeDebugPrint("Teleported under player: " .. player.Name)
                else
                    SafeDebugPrint("Failed to teleport under player: " .. player.Name)
                end
            end

local gnDropdown = TabHandles.gn:Dropdown({
    Title = "地图传送",
    Values = { "地图", "山脉", "安全港", "秘密房间1", "秘密房间2" },
    Value = "地图",
    Callback = function(option)
                            if option == "地图" then
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(63.4928513, 440.505829, -92.9229507)
                        elseif option == "山脉" then
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(253.515198, 699.103455, 420.533813)
                        elseif option == "安全港" then
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-774.454834, -137.237228, 126.384216)
                        elseif option == "秘密房间1" then
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62, 29, 20338)
                        elseif option == "秘密房间2" then
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1068, 133, 23015)
                        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..option,
            Duration = 2
        })
    end
})

local TPYW

TabHandles.gn:Button({
    Title = "设置传送位置",
    Icon = "bell",
    Callback = function()
    TPYW = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已设置",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Button({
    Title = "传送至设置位置",
    Icon = "bell",
    Callback = function()
                        if TPYW then
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = TPYW
                        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Toggle({
    Title = "好友白名单",
    Value = false,
    Callback = function(state)
        BCXZJHYT = state
    end
})

TabHandles.gn:Divider()

local AUTO_TRASH_MASTER = false

TabHandles.gn:Toggle({
    Title = "自动拾取垃圾桶攻击",
    Value = false,
    Callback = function(state)
        AUTO_TRASH_MASTER = state

                        if state then
                            task.spawn(
                                function()
                                    local Players = game:GetService("Players")
                                    local Workspace = game:GetService("Workspace")
                                    local RunService = game:GetService("RunService")
                                    local TRASH_RANGE = 15
                                    local PLAYER_RANGE = 100
                                    local PICKUP_DISTANCE = 2
                                    local ATTACK_DISTANCE = 2
                                    local HEIGHT_OFFSET = 3
                                    local localPlayer = Players.LocalPlayer
                                    local character, rootPart, humanoid

                                    local function updateCharacter()
                                        character = localPlayer.Character
                                        if character then
                                            rootPart = character:FindFirstChild("HumanoidRootPart")
                                            humanoid = character:FindFirstChildOfClass("Humanoid")
                                        else
                                            rootPart = nil
                                            humanoid = nil
                                        end
                                    end

                                    updateCharacter()
                                    localPlayer.CharacterAdded:Connect(updateCharacter)

                                    local function getTrashPart(trashModel)
                                        return trashModel:FindFirstChild("Handle") or trashModel:FindFirstChild("MainPart") or trashModel:FindFirstChild("TrashCan") or trashModel.PrimaryPart or trashModel:FindFirstChildWhichIsA("BasePart")
                                    end

                                    local function performAction(action)
                                        if AUTO_TRASH_MASTER and character then
                                            local communicate = character:FindFirstChild("Communicate")
                                            if communicate then
                                                communicate:FireServer({["Goal"] = action})
                                            end
                                        end
                                    end

                                    local function calculateOffsetPosition(targetPos, referencePos)
                                        local direction = (targetPos - referencePos).Unit
                                        direction = Vector3.new(direction.X, 0, direction.Z).Unit

                                        if direction.Magnitude < 0.1 then
                                            direction = Vector3.new(math.random(), 0, math.random()).Unit
                                        end

                                        return targetPos + (direction * PICKUP_DISTANCE)
                                    end

                                    local function calculateBehindPosition(targetRoot)
                                        local lookVector = targetRoot.CFrame.LookVector
                                        lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit

                                        return targetRoot.Position - (lookVector * ATTACK_DISTANCE)
                                    end

                                    local function findNearestPlayer()
                                        if not rootPart then
                                            return nil, nil
                                        end

                                        local nearestPlayer = nil
                                        local nearestDistance = math.huge
                                        local targetPosition = nil

                                        for _, targetPlayer in ipairs(Players:GetPlayers()) do
                                            if targetPlayer ~= localPlayer and targetPlayer.Character then
                                                local targetChar = targetPlayer.Character
                                                local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
                                                local targetHum = targetChar:FindFirstChildOfClass("Humanoid")

                                                if targetRoot and targetHum and targetHum.Health > 0 then
                                                    local distance = (rootPart.Position - targetRoot.Position).Magnitude
                                                    if distance <= PLAYER_RANGE and distance < nearestDistance then
                                                        nearestDistance = distance
                                                        nearestPlayer = targetPlayer
                                                        targetPosition = calculateBehindPosition(targetRoot)
                                                    end
                                                end
                                            end
                                        end

                                        return nearestPlayer, targetPosition
                                    end

                                    local function teleportTo(position, faceTarget)
                                        if rootPart and AUTO_TRASH_MASTER then
                                            local raycastParams = RaycastParams.new()
                                            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                                            raycastParams.FilterDescendantsInstances = {character}

                                            local groundPosition = position
                                            local ray = Workspace:Raycast(position + Vector3.new(0, 10, 0), Vector3.new(0, -20, 0), raycastParams)
                                            if ray and ray.Position then
                                                groundPosition = ray.Position + Vector3.new(0, HEIGHT_OFFSET, 0)
                                            else
                                                groundPosition = position + Vector3.new(0, HEIGHT_OFFSET, 0)
                                            end

                                            if faceTarget then
                                                local lookVector = (faceTarget - groundPosition).Unit
                                                rootPart.CFrame = CFrame.new(groundPosition, groundPosition + lookVector)
                                            else
                                                rootPart.CFrame = CFrame.new(groundPosition)
                                            end
                                        end
                                    end

                                    while AUTO_TRASH_MASTER and game:GetService("RunService").Heartbeat:Wait() do
                                        pcall(
                                            function()
                                                updateCharacter()
                                                if not character or not rootPart or not humanoid or humanoid.Health <= 0 then
                                                    task.wait(1)
                                                    return
                                                end

                                                if not character:GetAttribute("HasTrashcan") then
                                                    local trashFolder = Workspace:FindFirstChild("Trash") or (Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Trash"))

                                                    if not trashFolder then
                                                        task.wait(1)
                                                        return
                                                    end

                                                    local nearestTrash, nearestDistance, trashPosition
                                                    for _, trashModel in ipairs(trashFolder:GetChildren()) do
                                                        if trashModel:IsA("Model") then
                                                            local trashPart = getTrashPart(trashModel)
                                                            if trashPart then
                                                                local distance = (rootPart.Position - trashPart.Position).Magnitude
                                                                if distance <= TRASH_RANGE and (not nearestDistance or distance < nearestDistance) then
                                                                    nearestTrash = trashModel
                                                                    nearestDistance = distance
                                                                    trashPosition = trashPart.Position
                                                                end
                                                            end
                                                        end
                                                    end

                                                    if nearestTrash and trashPosition then
                                                        local offsetPosition = calculateOffsetPosition(trashPosition, rootPart.Position)

                                                        teleportTo(offsetPosition, trashPosition)
                                                        task.wait(0.2)

                                                        local direction = (trashPosition - rootPart.Position).Unit
                                                        local lookVector = Vector3.new(direction.X, 0, direction.Z).Unit
                                                        if lookVector.Magnitude > 0.1 then
                                                            rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
                                                        end

                                                        performAction("LeftClick")
                                                        task.wait(0.15)
                                                        performAction("LeftClickRelease")

                                                        local waitTime = 0
                                                        while waitTime < 2 and AUTO_TRASH_MASTER do
                                                            if character:GetAttribute("HasTrashcan") then
                                                                SafeDebugPrint("成功拾取垃圾桶")
                                                                break
                                                            end
                                                            task.wait(0.1)
                                                            waitTime = waitTime + 0.1
                                                        end
                                                    else
                                                        task.wait(1)
                                                    end
                                                else
                                                    local nearestPlayer, behindPos = findNearestPlayer()

                                                    if nearestPlayer and behindPos then
                                                        local targetChar = nearestPlayer.Character
                                                        local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")

                                                        if not targetRoot then
                                                            task.wait(0.5)
                                                            return
                                                        end

                                                        teleportTo(behindPos, targetRoot.Position)
                                                        task.wait(0.2)

                                                        local direction = (targetRoot.Position - rootPart.Position).Unit
                                                        local lookVector = Vector3.new(direction.X, 0, direction.Z).Unit
                                                        if lookVector.Magnitude > 0.1 then
                                                            rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
                                                        end

                                                        performAction("LeftClick")
                                                        task.wait(0.1)
                                                        performAction("LeftClickRelease")

                                                        SafeDebugPrint("攻击玩家: " .. nearestPlayer.Name)

                                                        task.wait(1.5)
                                                    else
                                                        SafeDebugPrint("未找到可攻击玩家")
                                                        task.wait(1)
                                                    end
                                                end
                                            end
                                        )
                                    end
                                end
                            )
                        end
    end
})

TabHandles.gn:Divider()

local attackAuraConnection

TabHandles.gn:Toggle({
    Title = "自动攻击最近玩家",
    Value = false,
    Callback = function(state)
        kenConfiguration.Main.Combat.AttackAura = state
                        SafeDebugPrint("自动攻击: " .. tostring(state))

                        if attackAuraConnection then
                            attackAuraConnection:Disconnect()
                            attackAuraConnection = nil
                        end

                        if state then
                            attackAuraConnection =
                                RunService.RenderStepped:Connect(
                                function()
                                    if not kenConfiguration.Main.Combat.AttackAura then
                                        return
                                    end
                                    if not HumanoidRootPart or not LocalPlayer.Character then
                                        return
                                    end

                                    local NearestTarget = Functions.BestTarget(5)
                                    if NearestTarget then
                                        Functions.TeleportUnderPlayer(NearestTarget)
                                        local RandomAbility = Functions.RandomAbility()
                                        if RandomAbility then
                                            Functions.UseAbility(RandomAbility)
                                        else
                                            if kenConfiguration.Main.Farm.AutoUltimate then
                                                Functions.ActivateUltimate()
                                            end
                                        end
                                    end
                                end
                            )
                        end
    end
})

local killFarmConnection

TabHandles.gn:Toggle({
    Title = "自动战斗",
    Value = false,
    Callback = function(state)
        kenConfiguration.Main.Farm.KillFarm = state
                        SafeDebugPrint("杀戮光环: " .. tostring(state))

                        if killFarmConnection then
                            killFarmConnection:Disconnect()
                            killFarmConnection = nil
                        end

                        if state then
                            killFarmConnection =
                                RunService.RenderStepped:Connect(
                                function()
                                    if not kenConfiguration.Main.Farm.KillFarm then
                                        return
                                    end
                                    if not HumanoidRootPart or not LocalPlayer.Character then
                                        return
                                    end

                                    local BestTarget = Functions.BestTarget()
                                    if BestTarget then
                                        Functions.TeleportUnderPlayer(BestTarget)
                                        local RandomAbility = Functions.RandomAbility()
                                        if RandomAbility then
                                            Functions.UseAbility(RandomAbility)
                                        else
                                            if kenConfiguration.Main.Farm.AutoUltimate then
                                                Functions.ActivateUltimate()
                                            end
                                        end
                                    end
                                end
                            )
                        end
    end
})

local ZDGJT = false

TabHandles.gn:Toggle({
    Title = "自动攻击",
    Value = false,
    Callback = function(state)
        ZDGJT = state
                        if state then
                            task.spawn(
                                function()
                                    while ZDGJT and task.wait(0.3) do
                                        if Character then
                                            local communicate = Character:FindFirstChild("Communicate")
                                            if communicate then
                                                communicate:FireServer({["Goal"] = "LeftClick"})
                                                task.wait(0.05)
                                                communicate:FireServer({["Goal"] = "LeftClickRelease"})
                                            end
                                        end
                                    end
                                end
                            )
                        end
    end
})

TabHandles.gn:Toggle({
    Title = "自动觉醒",
    Value = false,
    Callback = function(state)
                        kenConfiguration.Main.Farm.AutoUltimate = state
                        SafeDebugPrint("自动终极技能: " .. tostring(state))
    end
})

local ELZRCSXKT = false

TabHandles.gn:Toggle({
    Title = "将敌方传送至虚空",
    Desc = "仅“英雄猎人”角色二技能",
    Value = false,
    Callback = function(state)
        ELZRCSXKT = state

                        local Players = game:GetService("Players")
                        local ReplicatedStorage = game:GetService("ReplicatedStorage")
                        local UserInputService = game:GetService("UserInputService")
                        local LocalPlayer = Players.LocalPlayer
                        local Backpack = LocalPlayer:WaitForChild("Backpack")
                        local targetToolName = "Lethal Whirlwind Stream"
                        if state then
                            Backpack.ChildAdded:Connect(
                                function(tool)
                                    if ELZRCSXKT and tool:IsA("Tool") and tool.Name == targetToolName then
                                        tool.Equipped:Connect(
                                            function()
                                                local A = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                                                task.wait(1)
                                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-62, 29, 20338)
                                                task.wait(3)
                                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = A
                                            end
                                        )
                                    end
                                end
                            )
                        end
    end
})

local ZDNLJTT = false

TabHandles.gn:Toggle({
    Title = "自动拿垃圾桶",
    Value = false,
    Callback = function(state)
        ZDNLJTT = state
                        if state then
                            task.spawn(
                                function()
                                    local Players = game:GetService("Players")
                                    local Workspace = game:GetService("Workspace")
                                    local TRASH_RANGE = 5

                                    while ZDNLJTT and task.wait(0.1) do
                                        pcall(
                                            function()
                                                local localPlayer = Players.LocalPlayer
                                                local character = localPlayer.Character

                                                if character then
                                                    local humanoid = character:FindFirstChild("Humanoid")
                                                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                                                    local trashFolder = Workspace:FindFirstChild("Trash") or (Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Trash"))

                                                    if trashFolder and rootPart then
                                                        local nearestTrash = nil
                                                        local nearestDistance = math.huge

                                                        for _, trashModel in pairs(trashFolder:GetChildren()) do
                                                            if trashModel:IsA("Model") then
                                                                local trashPosition = trashModel:GetPivot().Position
                                                                local distance = (rootPart.Position - trashPosition).Magnitude

                                                                if distance <= TRASH_RANGE and distance < nearestDistance then
                                                                    nearestDistance = distance
                                                                    nearestTrash = trashModel
                                                                end
                                                            end
                                                        end

                                                        if nearestTrash then
                                                            local trashPosition = nearestTrash:GetPivot().Position
                                                            local direction = (trashPosition - rootPart.Position).Unit

                                                            local lookVector = Vector3.new(direction.X, 0, direction.Z).Unit
                                                            rootPart.CFrame = CFrame.lookAt(rootPart.Position, rootPart.Position + lookVector)

                                                            local communicate = character:FindFirstChild("Communicate")
                                                            if communicate and character:GetAttribute("HasTrashcan") == false then
                                                                communicate:FireServer({["Goal"] = "LeftClick"})
                                                                task.wait(0.05)
                                                                communicate:FireServer({["Goal"] = "LeftClickRelease"})
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        )
                                    end
                                end
                            )
                        end
    end
})

local awdawdwaT = false

TabHandles.gn:Toggle({
    Title = "屏蔽冲刺后摇",
    Desc = "仅电脑，或使用键盘脚本",
    Value = false,
    Callback = function(state)
        awdawdwaT = state

                        local plr = game:GetService("Players").LocalPlayer
                        local uis = game:GetService("UserInputService")
                        local isMobile = uis.TouchEnabled

                        getgenv()._TempestAlreadyRan = true

                        local frontDashArgs = {
                            [1] = {
                                Dash = Enum.KeyCode.W,
                                Key = Enum.KeyCode.Q,
                                Goal = "KeyPress"
                            }
                        }

                        local function frontDash()
                            if plr.Character then
                                local communicate = plr.Character:FindFirstChild("Communicate")
                                if communicate then
                                    communicate:FireServer(unpack(frontDashArgs))
                                end
                            end
                        end

                        local function stopAnimation(char, animationId)
                            local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                            if humanoid then
                                local animator = humanoid:FindFirstChildWhichIsA("Animator")
                                if animator then
                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                        if track.Animation and track.Animation.AnimationId == "rbxassetid://" .. tostring(animationId) then
                                            track:Stop()
                                        end
                                    end
                                end
                            end
                        end

                        local function isAnimationRunning(char, animationId)
                            local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                            if humanoid then
                                local animator = humanoid:FindFirstChildWhichIsA("Animator")
                                if animator then
                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                        if track.Animation and track.Animation.AnimationId == "rbxassetid://" .. tostring(animationId) then
                                            return true
                                        end
                                    end
                                end
                            end
                            return false
                        end

                        local function getMovementAngle(hrp, moveDirection)
                            if moveDirection.Magnitude == 0 then
                                return 0
                            end

                            local relativeMoveDir = hrp.CFrame:VectorToObjectSpace(moveDirection)
                            local angle = math.deg(math.atan2(relativeMoveDir.Z, relativeMoveDir.X))

                            return (angle + 360) % 360
                        end

                        local inputBeganConnections = {}
                        local characterAddedConnections = {}
                        local dashButtonConnections = {}

                        local function setupNoEndlagDash()
                            if not plr.Character then
                                return
                            end

                            local connection =
                                uis.InputBegan:Connect(
                                function(input, t)
                                    if t then
                                        return
                                    end

                                    if awdawdwaT and input.KeyCode == Enum.KeyCode.Q and not uis:IsKeyDown(Enum.KeyCode.D) and not uis:IsKeyDown(Enum.KeyCode.A) and not uis:IsKeyDown(Enum.KeyCode.S) and plr.Character:FindFirstChild("UsedDash") then
                                        frontDash()
                                    end
                                end
                            )

                            table.insert(inputBeganConnections, connection)

                            local destroyConn =
                                plr.Character.Destroying:Connect(
                                function()
                                    for i, conn in ipairs(inputBeganConnections) do
                                        if conn == connection then
                                            conn:Disconnect()
                                            table.remove(inputBeganConnections, i)
                                            break
                                        end
                                    end
                                    destroyConn:Disconnect()
                                end
                            )
                        end

                        local function setupEmoteDash()
                            if not plr.Character then
                                return
                            end

                            local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
                            if not hrp then
                                return
                            end

                            local connection =
                                uis.InputBegan:Connect(
                                function(input, t)
                                    if t then
                                        return
                                    end

                                    if awdawdwaT and input.KeyCode == Enum.KeyCode.Q and not uis:IsKeyDown(Enum.KeyCode.W) and not uis:IsKeyDown(Enum.KeyCode.S) and not isAnimationRunning(plr.Character, 10491993682) then
                                        local vel = hrp:FindFirstChild("dodgevelocity")
                                        if vel then
                                            vel:Destroy()
                                            stopAnimation(plr.Character, 10480793962)
                                            stopAnimation(plr.Character, 10480796021)
                                        end
                                    end
                                end
                            )

                            table.insert(inputBeganConnections, connection)

                            local destroyConn =
                                plr.Character.Destroying:Connect(
                                function()
                                    for i, conn in ipairs(inputBeganConnections) do
                                        if conn == connection then
                                            conn:Disconnect()
                                            table.remove(inputBeganConnections, i)
                                            break
                                        end
                                    end
                                    destroyConn:Disconnect()
                                end
                            )
                        end

                        local function setupMobileDash()
                            if not isMobile or not plr.Character then
                                return
                            end

                            local dashButton
                            local playerGui = plr:FindFirstChild("PlayerGui")
                            if playerGui then
                                local touchGui = playerGui:FindFirstChild("TouchGui")
                                if touchGui then
                                    local controlFrame = touchGui:FindFirstChild("TouchControlFrame")
                                    if controlFrame then
                                        local jumpButton = controlFrame:FindFirstChild("JumpButton")
                                        if jumpButton then
                                            dashButton = jumpButton:FindFirstChild("DashButton")
                                        end
                                    end
                                end
                            end

                            if dashButton then
                                local connection =
                                    dashButton.MouseButton1Down:Connect(
                                    function()
                                        if not awdawdwaT or not plr.Character then
                                            return
                                        end

                                        local hum = plr.Character:FindFirstChild("Humanoid")
                                        local hrp = plr.Character:FindFirstChild("HumanoidRootPart")

                                        if not hum or not hrp then
                                            return
                                        end

                                        local angle = getMovementAngle(hrp, hum.MoveDirection)
                                        local directionResult = nil

                                        if angle == 0 then
                                            directionResult = "front"
                                        elseif angle >= 315 or angle < 45 then
                                            directionResult = "right"
                                        elseif angle >= 135 and angle < 225 then
                                            directionResult = "left"
                                        elseif angle >= 45 and angle < 135 then
                                            directionResult = "back"
                                        elseif angle >= 225 and angle < 315 then
                                            directionResult = "front"
                                        end

                                        if awdawdwaT and directionResult == "front" and not plr.Character:FindFirstChild("Freeze") and not plr.Character:FindFirstChild("Slowed") and not plr.Character:FindFirstChild("WallCombo") then
                                            frontDash()
                                        end

                                        if awdawdwaT and (directionResult == "left" or directionResult == "right") and not isAnimationRunning(plr.Character, 10491993682) then
                                            local vel = hrp:FindFirstChild("dodgevelocity")

                                            if vel then
                                                vel:Destroy()
                                                stopAnimation(plr.Character, 10480793962)
                                                stopAnimation(plr.Character, 10480796021)
                                            end
                                        end
                                    end
                                )

                                table.insert(dashButtonConnections, connection)

                                local destroyConn =
                                    plr.Character.Destroying:Connect(
                                    function()
                                        for i, conn in ipairs(dashButtonConnections) do
                                            if conn == connection then
                                                conn:Disconnect()
                                                table.remove(dashButtonConnections, i)
                                                break
                                            end
                                        end
                                        destroyConn:Disconnect()
                                    end
                                )
                            end
                        end

                        local function cleanupConnections()
                            for _, conn in ipairs(inputBeganConnections) do
                                conn:Disconnect()
                            end
                            for _, conn in ipairs(characterAddedConnections) do
                                conn:Disconnect()
                            end
                            for _, conn in ipairs(dashButtonConnections) do
                                conn:Disconnect()
                            end

                            inputBeganConnections = {}
                            characterAddedConnections = {}
                            dashButtonConnections = {}
                        end

                        if state then
                            if plr.Character then
                                setupNoEndlagDash()
                                setupEmoteDash()

                                if isMobile then
                                    setupMobileDash()
                                end
                            end

                            local charAddedConn1 = plr.CharacterAdded:Connect(setupNoEndlagDash)
                            local charAddedConn2 = plr.CharacterAdded:Connect(setupEmoteDash)

                            table.insert(characterAddedConnections, charAddedConn1)
                            table.insert(characterAddedConnections, charAddedConn2)

                            if isMobile then
                                local dashButtonConn =
                                    plr.PlayerGui.DescendantAdded:Connect(
                                    function(d)
                                        if d.Name == "DashButton" and plr.Character then
                                            setupMobileDash()
                                        end
                                    end
                                )

                                table.insert(characterAddedConnections, dashButtonConn)
                            end
                        else
                            cleanupConnections()
                        end
    end
})

local ZDFYT = false
            local Settings = {
                Autoparry = {
                    Toggle = ZDFYT,
                    Range = 25,
                    Delay = 0,
                    Fov = 180,
                    Facing = false,
                    Dodgerange = 3,
                    Aimhelper = false
                }
            }

            local anims = {
                ["rbxassetid://10469493270"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://10469630950"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://10469639222"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://10469643643"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13532562418"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13532600125"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13532604085"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13294471966"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13491635433"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13296577783"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13295919399"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13295936866"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13370310513"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13390230973"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13378751717"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13378708199"] = {[1] = 0, [2] = 0.30},
                ["rbxassetid://13500000000"] = {[1] = 0, [2] = 0.35},
                ["rbxassetid://13500000001"] = {[1] = 0.1, [2] = 0.4},
                ["rbxassetid://13500000002"] = {[1] = 0.05, [2] = 0.35},
                abilities = {}
            }

            local dodges = {
                ["rbxassetid://10479335397"] = {[1] = 0, [2] = 0.50},
                ["rbxassetid://13380255751"] = {[1] = 0, [2] = 0.50},
                ["rbxassetid://13500000003"] = {[1] = 0, [2] = 0.55},
                ["rbxassetid://13500000004"] = {[1] = 0.1, [2] = 0.6}
            }

            local barrages = {
                ["rbxassetid://10466974800"] = {[1] = 0.20, [2] = 1.80},
                ["rbxassetid://12534735382"] = {[1] = 0.20, [2] = 1.80},
                ["rbxassetid://13500000005"] = {[1] = 0.15, [2] = 1.75},
                ["rbxassetid://13500000006"] = {[1] = 0.25, [2] = 1.85}
            }

            local abilities = {
                ["rbxassetid://10468665991"] = {[1] = 0.15, [2] = 0.60},
                ["rbxassetid://13376869471"] = {[1] = 0.05, [2] = 1},
                ["rbxassetid://13376962659"] = {[1] = 0, [2] = 2},
                ["rbxassetid://12296882427"] = {[1] = 0.05, [2] = 1},
                ["rbxassetid://13309500827"] = {[1] = 0.05, [2] = 1},
                ["rbxassetid://13365849295"] = {[1] = 0, [2] = 1},
                ["rbxassetid://13377153603"] = {[1] = 0, [2] = 1},
                ["rbxassetid://12509505723"] = {[1] = 0.09, [2] = 2},
                ["rbxassetid://13500000007"] = {[1] = 0.1, [2] = 0.65},
                ["rbxassetid://13500000008"] = {[1] = 0.05, [2] = 1.1}
            }

            local closestplr, anim, plrDirection, unit, value, dodge
            local cd = false
            local parryCooldown = 0.2

            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer

            local function GetCharacterParts(char)
                if not char then
                    return nil, nil, nil
                end
                local root = char:FindFirstChild("HumanoidRootPart")
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                local head = char:FindFirstChild("Head")
                return root, humanoid, head
            end

            function closest()
                local closestPlayers = {}
                local localChar = LocalPlayer.Character
                local localRoot, localHumanoid = GetCharacterParts(localChar)

                if not localRoot or not localHumanoid or localHumanoid.Health <= 0 then
                    return closestPlayers
                end

                local myPosition = localRoot.Position

                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer then
                        local char = player.Character
                        local theirRoot, theirHumanoid = GetCharacterParts(char)

                        if theirRoot and theirHumanoid and theirHumanoid.Health > 0 then
                            local distance = (myPosition - theirRoot.Position).Magnitude
                            if distance < Settings.Autoparry.Range then
                                table.insert(closestPlayers, player)
                            end
                        end
                    end
                end

                table.sort(
                    closestPlayers,
                    function(a, b)
                        local aRoot = GetCharacterParts(a.Character)
                        local bRoot = GetCharacterParts(b.Character)
                        if not aRoot or not bRoot then
                            return false
                        end
                        return (myPosition - aRoot.Position).Magnitude < (myPosition - bRoot.Position).Magnitude
                    end
                )

                return closestPlayers
            end

            function attackchecker()
                local char = LocalPlayer.Character
                if not char then
                    return false
                end

                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if not humanoid or humanoid.Health <= 0 then
                    return false
                end

                local animator = humanoid:FindFirstChild("Animator")
                if not animator then
                    return false
                end

                for _, animTrack in ipairs(animator:GetPlayingAnimationTracks()) do
                    local animId = animTrack.Animation and animTrack.Animation.AnimationId
                    if animId then
                        if anims[animId] or dodges[animId] or abilities[animId] or barrages[animId] then
                            return true
                        end
                    end
                end

                return false
            end

            function isfacing(enemyChar)
                if not Settings.Autoparry.Toggle then
                    return false
                end
                if not Settings.Autoparry.Facing then
                    return true
                end

                local localChar = LocalPlayer.Character
                local enemyHead = enemyChar and enemyChar:FindFirstChild("Head")
                local localHead = localChar and localChar:FindFirstChild("Head")

                if not localHead or not enemyHead then
                    return false
                end

                plrDirection = localHead.CFrame.LookVector
                unit = (enemyHead.CFrame.p - localHead.CFrame.p).Unit
                value = math.pow((plrDirection - unit).Magnitude / 2, 2)

                return value < (Settings.Autoparry.Fov / 360)
            end

            function allowed(enemyChar)
                if not enemyChar then
                    return false
                end

                local localChar = LocalPlayer.Character
                if not localChar then
                    return false
                end

                if localChar:FindFirstChild("M1ing") then
                    return false
                end
                if attackchecker() then
                    return false
                end

                return isfacing(enemyChar)
            end

            local durations = {
                ["anim"] = 0.3,
                ["dodge"] = 0.9,
                ["barrage"] = 0.9,
                ["ability"] = 0.6
            }

            function def(action)
                if cd then
                    return
                end
                task.wait(Settings.Autoparry.Delay)

                cd = true
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("Communicate") then
                    char.Communicate:FireServer({["Goal"] = "KeyPress", ["Key"] = Enum.KeyCode.F})
                end

                task.wait(durations[action])

                if char and char:FindFirstChild("Communicate") then
                    char.Communicate:FireServer({["Goal"] = "KeyRelease", ["Key"] = Enum.KeyCode.F})
                end

                cd = false
            end

            function lookat(enemyChar)
                if not Settings.Autoparry.Aimhelper then
                    return
                end

                local localChar = LocalPlayer.Character
                if not localChar then
                    return
                end

                local localRoot = localChar:FindFirstChild("HumanoidRootPart")
                local enemyRoot = enemyChar and enemyChar:FindFirstChild("HumanoidRootPart")

                if localRoot and enemyRoot then
                    localRoot.CFrame = CFrame.lookAt(localRoot.Position, enemyRoot.Position)
                end
            end

            function parry()
                local closestPlayers = closest()

                for _, player in ipairs(closestPlayers) do
                    if not Settings.Autoparry.Toggle then
                        break
                    end

                    local enemyChar = player.Character
                    if not enemyChar then
                        continue
                    end

                    local enemyRoot, enemyHumanoid = GetCharacterParts(enemyChar)
                    if not enemyRoot or not enemyHumanoid or enemyHumanoid.Health <= 0 then
                        continue
                    end

                    local animator = enemyHumanoid:FindFirstChild("Animator")
                    if not animator then
                        continue
                    end

                    if not allowed(enemyChar) then
                        continue
                    end

                    for _, animTrack in ipairs(animator:GetPlayingAnimationTracks()) do
                        if not Settings.Autoparry.Toggle then
                            break
                        end

                        local animId = animTrack.Animation and animTrack.Animation.AnimationId
                        local animData = anims[animId]
                        local dodgeData = dodges[animId]
                        local abilityData = abilities[animId]
                        local barrageData = barrages[animId]

                        local timePos = animTrack.TimePosition

                        if animData and timePos >= animData[1] and timePos <= animData[2] then
                            task.spawn(
                                function()
                                    def("anim")
                                    lookat(enemyChar)
                                end
                            )
                            task.wait(parryCooldown)
                            break
                        elseif dodgeData and timePos >= dodgeData[1] and timePos <= dodgeData[2] then
                            task.spawn(
                                function()
                                    def("dodge")
                                    lookat(enemyChar)
                                end
                            )
                            task.wait(parryCooldown)
                            break
                        elseif barrageData and timePos >= barrageData[1] and timePos <= barrageData[2] then
                            task.spawn(
                                function()
                                    def("barrage")
                                    lookat(enemyChar)
                                end
                            )
                            task.wait(parryCooldown)
                            break
                        elseif abilityData and timePos >= abilityData[1] and timePos <= abilityData[2] then
                            task.spawn(
                                function()
                                    def("ability")
                                    lookat(enemyChar)
                                end
                            )
                            task.wait(parryCooldown)
                            break
                        end

                    end
                end
            end

TabHandles.gn:Toggle({
    Title = "自动格挡",
    Value = false,
    Callback = function(state)
        Settings.Autoparry.Toggle = state
                        if state then
                            task.spawn(
                                function()
                                    while Settings.Autoparry.Toggle do
                                        pcall(parry)
                                        task.wait(0.05)
                                    end
                                end
                            )
                        end
    end
})

local YCDSHYT = false

TabHandles.gn:Toggle({
    Title = "屏蔽攻击四下后摇",
    Value = false,
    Callback = function(state)
        YCDSHYT = state
                        if state then
                            task.spawn(
                                function()
                                    while YCDSHYT and task.wait(0.1) do
                                        pcall(
                                            function()
                                                local Freeze = LocalPlayer.Character:FindFirstChild("Freeze")
                                                if Freeze then
                                                    Freeze:Destroy()
                                                end
                                                local ComboStun = LocalPlayer.Character:FindFirstChild("ComboStun")
                                                if ComboStun then
                                                    ComboStun:Destroy()
                                                end
                                            end
                                        )
                                    end
                                end
                            )
                        end
    end
})

TabHandles.gn:Input({
    Title = "修改击杀数",
    Desc = "仅你可见",
    Value = "",
    Type = "Input",
    Placeholder = "",
    Callback = function(input)
        pcall(
                            function()
                                game:GetService("Players").LocalPlayer.leaderstats.Kills.Value = tonumber(input) or 0
                            end
                        )
    end
})

TabHandles.gn:Input({
    Title = "修改总击杀数",
    Desc = "仅你可见",
    Value = "",
    Type = "Input",
    Placeholder = "",
    Callback = function(input)
        pcall(
                            function()
                                game:GetService("Players").LocalPlayer.leaderstats["Total Kills"].Value = tonumber(input) or 0
                            end
                        )
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})
  elseif game.GameId == 7009714292 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...启示录...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()



WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 启示录",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "主要功能", Icon = "layout-grid" }),
    xzgn = Tabs.gn:Tab({ Title = "箱子功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

local s5 = false
TabHandles.gn:Toggle({
    Title = "自动砍树",
    Desc = "需你拿着对应工具",
    Icon = "check",
    Value = false,
    Callback = function(Value)
    local s5 = Value
if Value then
while s5 do
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree5"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree4"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree3"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree2"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Tree1"),false)
wait(0.000000000000000000000000000000000000000000000001)
end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动砍树" or "已关闭自动砍树",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

local s = false
TabHandles.gn:Toggle({
    Title = "自动挖石",
    Desc = "需你拿着对应工具",
    Icon = "check",
    Value = false,
    Callback = function(Value)
    local s = Value
if Value then
while s do
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Stone"),false)
wait(0.000000000000000000000000000000000000000000000001)
end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动挖石" or "已关闭自动挖石",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

local m = false
TabHandles.gn:Toggle({
    Title = "自动挖煤",
    Desc = "需你拿着对应工具",
    Icon = "check",
    Value = false,
    Callback = function(Value)
    local m = Value
if Value then
while m do
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("Coal"),false)
wait(0.000000000000000000000000000000000000000000000001)
end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动挖煤" or "已关闭自动挖煤",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

local t = false
TabHandles.gn:Toggle({
    Title = "自动挖铁",
    Desc = "需你拿着对应工具",
    Icon = "check",
    Value = false,
    Callback = function(Value)
    local t = Value
if Value then
while t do
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("IronOre"),false)
wait(0.000000000000000000000000000000000000000000000001)
end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动挖铁" or "已关闭自动挖铁",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

local tong = false
TabHandles.gn:Toggle({
    Title = "自动挖铜",
    Desc = "需你拿着对应工具",
    Icon = "check",
    Value = false,
    Callback = function(Value)
    local tong = Value
if Value then
while tong do
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Items"):WaitForChild("ToolAction"):FireServer("click",workspace:WaitForChild("Spawned"):WaitForChild("CopperOre"),false)
wait(0.000000000000000000000000000000000000000000000001)
end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自动挖铜" or "已关闭自动挖铜",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

local function TeleportToThing(thing)
    -- 安全获取本地玩家角色部件
    local LP = game.Players.LocalPlayer
    local character = LP.Character or LP.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- 遍历场景寻找目标物品
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == thing then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                -- 将玩家传送到目标物品位置（保留原始高度偏移）
                humanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 2, 0)
                return true  -- 成功传送后退出
            end
        end
    end
    return false  -- 未找到目标
end

TabHandles.xzgn:Paragraph({
    Title = "注意箱子周边僵尸",
    Color = "White",
})

TabHandles.xzgn:Button({
    Title = "传送至普通箱子",
    Icon = "bell",
    Callback = function()
TeleportToThing("CommonLoot")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.xzgn:Button({
    Title = "传送至稀有箱子",
    Icon = "bell",
    Callback = function()
TeleportToThing("UncommonLoot")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.xzgn:Button({
    Title = "传送至传奇箱子",
    Icon = "bell",
    Callback = function()
TeleportToThing("RareLoot")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

local TPYW

TabHandles.xzgn:Button({
    Title = "设置传送位置",
    Icon = "bell",
    Callback = function()
    TPYW = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已设置",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.xzgn:Button({
    Title = "传送至设置位置",
    Icon = "bell",
    Callback = function()
                        if TPYW then
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = TPYW
                        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- 等待 Data 和 Stamina 文件夹加载
local dataFolder = player:WaitForChild("Data")
local staminaFolder = dataFolder:WaitForChild("Stamina")

TabHandles.fzgn:Toggle({
    Title = "无限体力",
    Icon = "check",
    Value = false,
    Callback = function(Value)
if Value then
staminaFolder.Name = "_Stamina"
else
staminaFolder.Name = "Stamina"
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启无限体力" or "已关闭无限体力",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

TabHandles.fzgn:Toggle({
    Title = "秒救",
    Icon = "check",
    Value = false,
    Callback = function(Value)
if Value then
        if not connection then
            connection = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
                prompt.HoldDuration = 0
            end)
        end
else
        if not connection then
            connection = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
                prompt.HoldDuration = 10
            end)
        end
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启秒救" or "已关闭秒救",
            Icon = Value and "check" or "x",
            Duration = 2
        })
   end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 7008097940 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...墨水游戏...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/pagedcomic-design/ui/refs/heads/main/ui"))()

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Player = game.Players.LocalPlayer

-- Services
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Global Variables
_G.InfiniteJump = false
_G.AutoSpeed = false
_G.Speed = 50
_G.AutoHelpPlayer = false
_G.AutoTrollPlayer = false
_G.TugOfWar = false
_G.DoorExit = false
_G.AntiLag = false
_G.PartLag = {"FootstepEffect", "BulletHole", "GroundSmokeDIFFERENT", "ARshell", "effect debris", "effect", "DroppedMP5"}
_G.EspHighlight = false
_G.EspGui = false
_G.EspGuiTextSize = 7
_G.EspGuiTextColor = Color3.new(255, 255, 255)
_G.EspName = false
_G.EspDistance = false
_G.CollectBandage = false
_G.CollectFlashbang = false
_G.CollectGrenade = false
_G.AntiFling = false
_G.AntiBanana = false
_G.AutoDalgona = false
_G.HideSeekESP = false
_G.GlassBridgeVision = false
_G.AutoMingle = false
_G.AutoSkip = false
_G.NoCooldownProximity = false
_G.Float = false
_G.NoClip = false

local Loading = false
local Loading1 = false
local CooldownProximity = nil
local FloatConnection = nil
local NoClipConnection = nil

-- Create Main Window
local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心-付费版",
    Icon = "zap",
    Author = "墨水",
    Folder = "RbHub_InkGameV2_CN",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            WindUI:Notify({
                Title = "用户中心",
                Content = "Rb脚本中心用户资料",
                Duration = 3
            })
        end
    },
    SideBarWidth = 200,
})

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

Window:Tag({
    Title = "v1.0",
    Color = Color3.fromHex("#30ff6a")
})
Window:Tag({
    Title = "测试版",
    Color = Color3.fromHex("#315dff")
})

-- Create Sections and Tabs
local Tabs = {
    Main = Window:Section({ Title = "主线关卡", Opened = true }),
    HideSeek = Window:Section({ Title = "躲猫猫", Opened = true }),
    Player = Window:Section({ Title = "杂项", Opened = true }),
    Other = Window:Section({ Title = "小游戏", Opened = true }),
}

local TabHandles = {
    MainGames = Tabs.Main:Tab({ Title = "红绿灯", Icon = "gamepad-2" }),
    Dalgona = Tabs.Main:Tab({ Title = "抠糖饼 & 拔河", Icon = "cookie" }),
    HideSeekESP = Tabs.HideSeek:Tab({ Title = "透视功能", Icon = "eye" }),
    HideSeekTeleport = Tabs.HideSeek:Tab({ Title = "传送收集", Icon = "move" }),
    Movement = Tabs.Player:Tab({ Title = "玩家设置", Icon = "user" }),
    Utilities = Tabs.Player:Tab({ Title = "实用功能", Icon = "settings" }),
    OtherGames = Tabs.Other:Tab({ Title = "其他关卡", Icon = "puzzle" }),
}

-- Utility Functions
function CheckWall(Target)
    local Direction = (Target.Position - Workspace.CurrentCamera.Position).unit * (Target.Position - Workspace.CurrentCamera.Position).Magnitude
    local RaycastParams = RaycastParams.new()
    RaycastParams.FilterDescendantsInstances = {Player.Character, Workspace.CurrentCamera}
    RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local Result = Workspace:Raycast(Workspace.CurrentCamera.Position, Direction, RaycastParams)
    return Result == nil or Result.Instance:IsDescendantOf(Target)
end

function HasTool(tool)
    for _, v in pairs(Player.Character:GetChildren()) do
        if v:IsA("Tool") and v.Name == tool then
            return true
        end
    end
    for _, v in pairs(Player.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.Name == tool then
            return true
        end
    end
    return false
end

function PartLagDe(g)
    for i, v in pairs(_G.PartLag) do
        if g.Name:find(v) then
            g:Destroy()
        end
    end
end

-- Setup Jump and Speed
UserInputService.JumpRequest:connect(function()
    if _G.InfiniteJump == true then
        Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").WalkSpeed = _G.AutoSpeed and _G.Speed or 16
    character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if _G.AutoSpeed == true then
            character.Humanoid.WalkSpeed = _G.Speed or 50
        end
    end)
end)

-- Main Games Tab - Red Light Green Light
TabHandles.MainGames:Button({
    Title = "一键到终点",
    Desc = "瞬间传送到终点",
    Icon = "zap",
    Callback = function()
        if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
            local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
            WindUI:Notify({
                Title = "传送成功",
                Content = "已抵达终点！",
                Icon = "check",
                Duration = 2
            })
        end
    end
})

TabHandles.MainGames:Button({
    Title = "帮助玩家",
    Desc = "扛起玩家传送至终点",
    Icon = "hand-helping",
    Callback = function()
        if Loading then return end
        Loading = true
        for _, v in pairs(game.Players:GetPlayers()) do
            if v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt") and v.Character.HumanoidRootPart.CarryPrompt.Enabled == true then
                if v.Character:FindFirstChild("SafeRedLightGreenLight") == nil then
                    Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                    wait(0.3)
                    repeat task.wait(0.1)
                        fireproximityprompt(v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt"))
                    until v.Character.HumanoidRootPart.CarryPrompt.Enabled == false
                    wait(0.5)
                    if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
                        local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
                        Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                    end
                    wait(0.4)
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                    break
                end
            end
        end
        Loading = false
    end
})

TabHandles.MainGames:Toggle({
    Title = "自动帮助玩家",
    Desc = "自动扛起未通关玩家传送到终点",
    Value = false,
    Callback = function(value)
        _G.AutoHelpPlayer = value
        while _G.AutoHelpPlayer do
            pcall(function()
                for _, v in pairs(game.Players:GetPlayers()) do
                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        local carryPrompt = v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt")
                        if carryPrompt and carryPrompt.Enabled and not v.Character:FindFirstChild("SafeRedLightGreenLight") then
                            Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                            wait(0.3)
                            repeat
                                fireproximityprompt(carryPrompt)
                                task.wait(0.1)
                            until not carryPrompt.Enabled or not carryPrompt.Parent
                            wait(0.5)
                            if Workspace:FindFirstChild("RedLightGreenLight") and Workspace.RedLightGreenLight:FindFirstChild("sand") and Workspace.RedLightGreenLight.sand:FindFirstChild("crossedover") then
                                local pos = Workspace.RedLightGreenLight.sand.crossedover.Position + Vector3.new(0, 5, 0)
                                Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                            end
                            wait(0.4)
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                            break
                        end
                    end
                end
            end)
            task.wait(2)
        end
    end
})

TabHandles.MainGames:Toggle({
    Title = "自动恶搞玩家",
    Desc = "扛起玩家让他滚回起点",
    Value = false,
    Callback = function(value)
        _G.AutoTrollPlayer = value
        while _G.AutoTrollPlayer do
            pcall(function()
                for _, v in pairs(game.Players:GetPlayers()) do
                    if v.Character:FindFirstChild("HumanoidRootPart") and v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt") and v.Character.HumanoidRootPart.CarryPrompt.Enabled == true then
                        if v.Character:FindFirstChild("SafeRedLightGreenLight") == nil then
                            Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                            wait(0.3)
                            repeat task.wait(0.1)
                                fireproximityprompt(v.Character.HumanoidRootPart:FindFirstChild("CarryPrompt"))
                            until v.Character.HumanoidRootPart.CarryPrompt.Enabled == false
                            wait(0.5)
                            if Workspace:FindFirstChild("RedLightGreenLight") then
                                Player.Character.HumanoidRootPart.CFrame = CFrame.new(-84, 1023, -537)
                            end
                            wait(0.4)
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClickedButton"):FireServer({tryingtoleave = true})
                            break
                        end
                    end
                end
            end)
            task.wait()
        end
    end
})

-- Dalgona & Tug Tab
TabHandles.Dalgona:Button({
    Title = "一键完成扣糖饼",
    Desc = "瞬间完成扣糖饼",
    Icon = "cookie",
    Callback = function()
        pcall(function()
            if ReplicatedStorage:FindFirstChild("Modules") and ReplicatedStorage.Modules:FindFirstChild("Games") then
                local DalgonaClientModule = ReplicatedStorage.Modules.Games:FindFirstChild("DalgonaClient")
                if DalgonaClientModule then
                    for i, v in pairs(getreg()) do
                        if typeof(v) == "function" and islclosure(v) then
                            if getfenv(v).script == DalgonaClientModule then
                                if getinfo(v).nups == 73 then
                                    setupvalue(v, 31, 9e9)
                                    WindUI:Notify({
                                        Title = "椪糖完成",
                                        Content = "抠图已完成！",
                                        Icon = "check",
                                        Duration = 3
                                    })
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
})

TabHandles.Dalgona:Toggle({
    Title = "自动扣糖饼",
    Desc = "自动完成扣糖饼",
    Value = false,
    Callback = function(value)
        _G.AutoDalgona = value
        while _G.AutoDalgona do
            pcall(function()
                if ReplicatedStorage:FindFirstChild("Modules") and ReplicatedStorage.Modules:FindFirstChild("Games") then
                    local DalgonaClientModule = ReplicatedStorage.Modules.Games:FindFirstChild("DalgonaClient")
                    if DalgonaClientModule then
                        for i, v in pairs(getreg()) do
                            if typeof(v) == "function" and islclosure(v) then
                                if getfenv(v).script == DalgonaClientModule then
                                    if getinfo(v).nups == 73 then
                                        setupvalue(v, 31, 9e9)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            task.wait(5)
        end
    end
})

TabHandles.Dalgona:Toggle({
    Title = "自动拔河",
    Desc = "自动赢得拔河比赛",
    Value = false,
    Callback = function(value)
        _G.TugOfWar = value
        while _G.TugOfWar do
            pcall(function()
                ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TemporaryReachedBindable"):FireServer({GameQTE = true})
            end)
            task.wait(0.1)
        end
    end
})

-- Hide & Seek ESP Tab
TabHandles.HideSeekESP:Toggle({
    Title = "出口透视",
    Desc = "显示出口大门",
    Value = false,
    Callback = function(value)
        _G.DoorExit = value
        if value then
            task.spawn(function()
                while _G.DoorExit do
            pcall(function()
                if Workspace:FindFirstChild("HideAndSeekMap") then
                    for i, v in pairs(Workspace:FindFirstChild("HideAndSeekMap"):GetChildren()) do
                        if v.Name == "NEWFIXEDDOORS" then
                            for k, m in pairs(v:GetChildren()) do
                                if m.Name:find("Floor") and m:FindFirstChild("EXITDOORS") then
                                    for _, a in pairs(m:FindFirstChild("EXITDOORS"):GetChildren()) do
                                        if a:IsA("Model") and a:FindFirstChild("DoorRoot") then
                                            -- Clean existing ESP
                                            for _, z in pairs(a.DoorRoot:GetChildren()) do
                                                if z.Name:find("Esp_") then
                                                    z:Destroy()
                                                end
                                            end

                                            -- Add highlight if enabled
                                            if _G.EspHighlight and not a.DoorRoot:FindFirstChild("Esp_Highlight") then
                                                local Highlight = Instance.new("Highlight")
                                                Highlight.Name = "Esp_Highlight"
                                                Highlight.FillColor = Color3.fromRGB(0, 255, 0)
                                                Highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
                                                Highlight.FillTransparency = 0.5
                                                Highlight.OutlineTransparency = 0
                                                Highlight.Adornee = a
                                                Highlight.Parent = a.DoorRoot
                                            end

                                            -- Add GUI ESP if enabled
                                            if _G.EspGui and not a.DoorRoot:FindFirstChild("Esp_Gui") then
                                                local BillboardGui = Instance.new("BillboardGui")
                                                BillboardGui.Name = "Esp_Gui"
                                                BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                                                BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                                BillboardGui.AlwaysOnTop = true
                                                BillboardGui.Parent = a.DoorRoot

                                                local TextLabel = Instance.new("TextLabel")
                                                TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                                TextLabel.BackgroundTransparency = 1
                                                TextLabel.Text = "出口大门"
                                                TextLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                                                TextLabel.TextScaled = true
                                                TextLabel.Font = Enum.Font.SourceSansBold
                                                TextLabel.Parent = BillboardGui

                                                local UIStroke = Instance.new("UIStroke")
                                                UIStroke.Color = Color3.new(0, 0, 0)
                                                UIStroke.Thickness = 1.5
                                                UIStroke.Parent = TextLabel
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            task.wait(1)
        end
            end)
        else
            -- Clean up all door ESP when disabled
            if Workspace:FindFirstChild("HideAndSeekMap") then
                for i, v in pairs(Workspace:FindFirstChild("HideAndSeekMap"):GetChildren()) do
                    if v.Name == "NEWFIXEDDOORS" then
                        for k, m in pairs(v:GetChildren()) do
                            if m.Name:find("Floor") and m:FindFirstChild("EXITDOORS") then
                                for _, a in pairs(m:FindFirstChild("EXITDOORS"):GetChildren()) do
                                    if a:IsA("Model") and a:FindFirstChild("DoorRoot") then
                                        for _, z in pairs(a.DoorRoot:GetChildren()) do
                                            if z.Name:find("Esp_") then
                                                z:Destroy()
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
})

TabHandles.HideSeekESP:Toggle({
    Title = "钥匙透视",
    Desc = "显示掉落钥匙",
    Value = false,
    Callback = function(value)
        _G.DoorKey = value
        if value then
            task.spawn(function()
                while _G.DoorKey do
                    pcall(function()
                        for _, a in pairs(Workspace.Effects:GetChildren()) do
                            if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                                -- Clean existing ESP
                                for _, z in pairs(a.Handle:GetChildren()) do
                                    if z.Name:find("Esp_") then
                                        z:Destroy()
                                    end
                                end

                                if _G.EspHighlight and not a.Handle:FindFirstChild("Esp_Highlight") then
                                    local Highlight = Instance.new("Highlight")
                                    Highlight.Name = "Esp_Highlight"
                                    Highlight.FillColor = Color3.fromRGB(255, 255, 0)
                                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
                                    Highlight.FillTransparency = 0.3
                                    Highlight.OutlineTransparency = 0
                                    Highlight.Adornee = a
                                    Highlight.Parent = a.Handle
                                end

                                if _G.EspGui and not a.Handle:FindFirstChild("Esp_Gui") then
                                    local BillboardGui = Instance.new("BillboardGui")
                                    BillboardGui.Name = "Esp_Gui"
                                    BillboardGui.Size = UDim2.new(0, 150, 0, 40)
                                    BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                    BillboardGui.AlwaysOnTop = true
                                    BillboardGui.Parent = a.Handle

                                    local TextLabel = Instance.new("TextLabel")
                                    TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                    TextLabel.BackgroundTransparency = 1
                                    TextLabel.Text = "钥匙"
                                    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                                    TextLabel.TextScaled = true
                                    TextLabel.Font = Enum.Font.SourceSansBold
                                    TextLabel.Parent = BillboardGui

                                    local UIStroke = Instance.new("UIStroke")
                                    UIStroke.Color = Color3.new(0, 0, 0)
                                    UIStroke.Thickness = 1.5
                                    UIStroke.Parent = TextLabel
                                end
                            end
                        end
                    end)
                    task.wait(1)
                end
            end)
        else
            -- Clean up all key ESP when disabled
            for _, a in pairs(Workspace.Effects:GetChildren()) do
                if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                    for _, z in pairs(a.Handle:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        end
    end
})

TabHandles.HideSeekESP:Toggle({
    Title = "躲藏玩家透视",
    Desc = "显示躲藏的玩家",
    Value = false,
    Callback = function(value)
        _G.HidePlayer = value
        if value then
            task.spawn(function()
                while _G.HidePlayer do
                    pcall(function()
                        for i, v in pairs(game.Players:GetChildren()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                                if v:GetAttribute("IsHider") then
                                    -- Clean existing ESP first
                                    for _, z in pairs(v.Character.Head:GetChildren()) do
                                        if z.Name:find("Esp_") then
                                            z:Destroy()
                                        end
                                    end

                                    if _G.EspHighlight and not v.Character.Head:FindFirstChild("Esp_Highlight") then
                                        local Highlight = Instance.new("Highlight")
                                        Highlight.Name = "Esp_Highlight"
                                        Highlight.FillColor = Color3.fromRGB(255, 0, 0)
                                        Highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                                        Highlight.FillTransparency = 0.5
                                        Highlight.OutlineTransparency = 0
                                        Highlight.Adornee = v.Character
                                        Highlight.Parent = v.Character.Head
                                    end

                                    if _G.EspGui and not v.Character.Head:FindFirstChild("Esp_Gui") then
                                        local BillboardGui = Instance.new("BillboardGui")
                                        BillboardGui.Name = "Esp_Gui"
                                        BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                                        BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
                                        BillboardGui.AlwaysOnTop = true
                                        BillboardGui.Parent = v.Character.Head

                                        local TextLabel = Instance.new("TextLabel")
                                        TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                        TextLabel.BackgroundTransparency = 1
                                        TextLabel.Text = v.Name .. " (躲藏中)"
                                        TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                                        TextLabel.TextScaled = true
                                        TextLabel.Font = Enum.Font.SourceSansBold
                                        TextLabel.Parent = BillboardGui

                                        local UIStroke = Instance.new("UIStroke")
                                        UIStroke.Color = Color3.new(0, 0, 0)
                                        UIStroke.Thickness = 1.5
                                        UIStroke.Parent = TextLabel
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(1)
                end
            end)
        else
            -- Clean up all player ESP when disabled
            for i, v in pairs(game.Players:GetChildren()) do
                if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                    for _, z in pairs(v.Character.Head:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        end
    end
})

-- Hide & Seek Teleport Tab
TabHandles.HideSeekTeleport:Button({
    Title = "一键收集全部钥匙",
    Desc = "自动收集钥匙",
    Icon = "key",
    Callback = function()
        if Player:GetAttribute("IsHider") and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            local OldCFrame = Player.Character.HumanoidRootPart.CFrame
            for _, a in pairs(Workspace.Effects:GetChildren()) do
                if a.Name:find("DroppedKey") and a:FindFirstChild("Handle") then
                    Player.Character.HumanoidRootPart.CFrame = a.Handle.CFrame
                    wait(0.5)
                end
            end
            Player.Character.HumanoidRootPart.CFrame = OldCFrame
            WindUI:Notify({
                Title = "收集完成",
                Content = "已收集全部钥匙",
                Icon = "check",
                Duration = 3
            })
        end
    end
})

TabHandles.HideSeekTeleport:Button({
    Title = "传送到躲藏玩家",
    Desc = "传送到躲藏玩家身边",
    Icon = "eye",
    Callback = function()
        for i, v in pairs(game.Players:GetChildren()) do
            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                if v:GetAttribute("IsHider") and v.Character.Humanoid.Health > 0 then
                    Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
                    WindUI:Notify({
                        Title = "传送成功",
                        Content = "已传送到 " .. v.Name,
                        Icon = "move",
                        Duration = 2
                    })
                    break
                end
            end
        end
    end
})

-- Player Movement Tab
TabHandles.Movement:Slider({
    Title = "移动速度",
    Desc = "自定义你的移速",
    Value = { Min = 16, Max = 1000, Default = 50 },
    Callback = function(val)
        _G.Speed = val
        if _G.AutoSpeed and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = val
        end
    end
})

TabHandles.Movement:Toggle({
    Title = "开启移速",
    Desc = "变成闪电侠",
    Value = false,
    Callback = function(value)
        _G.AutoSpeed = value
        if value and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = _G.Speed or 50
        elseif Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = 16
        end
    end
})

TabHandles.Movement:Toggle({
    Title = "无限跳",
    Desc = "踏空",
    Value = false,
    Callback = function(value)
        _G.InfiniteJump = value
    end
})

-- Float Feature
TabHandles.Movement:Toggle({
    Title = "锁定高度",
    Desc = "锁定你所在位置高度",
    Value = false,
    Callback = function(value)
        _G.Float = value
        if value then
            FloatConnection = RunService.Heartbeat:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = Player.Character.HumanoidRootPart
                    local bodyVelocity = rootPart:FindFirstChild("FloatVelocity")

                    if not bodyVelocity then
                        bodyVelocity = Instance.new("BodyVelocity")
                        bodyVelocity.Name = "FloatVelocity"
                        bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
                        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                        bodyVelocity.Parent = rootPart
                    end
                end
            end)
            WindUI:Notify({
                Title = "锁定高度已开启",
                Content = "已开启",
                Icon = "move",
                Duration = 2
            })
        else
            if FloatConnection then
                FloatConnection:Disconnect()
                FloatConnection = nil
            end
            if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                local bodyVelocity = Player.Character.HumanoidRootPart:FindFirstChild("FloatVelocity")
                if bodyVelocity then
                    bodyVelocity:Destroy()
                end
            end
            WindUI:Notify({
                Title = "锁定高度已关闭",
                Content = "已关闭",
                Icon = "move",
                Duration = 2
            })
        end
    end
})

-- NoClip Feature
TabHandles.Movement:Toggle({
    Title = "穿墙",
    Desc = "穿墙",
    Value = false,
    Callback = function(value)
        _G.NoClip = value
        if value then
            NoClipConnection = RunService.Stepped:Connect(function()
                if Player.Character then
                    for _, part in pairs(Player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            WindUI:Notify({
                Title = "穿墙已开启",
                Content = "可自由穿透",
                Icon = "move",
                Duration = 2
            })
        else
            if NoClipConnection then
                NoClipConnection:Disconnect()
                NoClipConnection = nil
            end
            if Player.Character then
                for _, part in pairs(Player.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            WindUI:Notify({
                Title = "穿墙已关闭",
                Content = "穿墙已关闭",
                Icon = "move",
                Duration = 2
            })
        end
    end
})

-- Player Utilities Tab
TabHandles.Utilities:Toggle({
    Title = "自动跳过对话",
    Desc = "自动跳过所有剧情对话",
    Value = false,
    Callback = function(value)
        _G.AutoSkip = value
        if value then
            task.spawn(function()
                while _G.AutoSkip do
                    pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("DialogueRemote"):FireServer("Skipped")
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TemporaryReachedBindable"):FireServer()
                    end)
                    task.wait(0.8)
                end
            end)
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "零交互延迟",
    Desc = "去除所有交互按钮的按住时间",
    Value = false,
    Callback = function(value)
        _G.NoCooldownProximity = value
        if value then
            for i, v in pairs(Workspace:GetDescendants()) do
                if v.ClassName == "ProximityPrompt" then
                    v.HoldDuration = 0
                end
            end
            if CooldownProximity then
                CooldownProximity:Disconnect()
            end
            CooldownProximity = Workspace.DescendantAdded:Connect(function(Cooldown)
                if _G.NoCooldownProximity and Cooldown:IsA("ProximityPrompt") then
                    Cooldown.HoldDuration = 0
                end
            end)
        else
            if CooldownProximity then
                CooldownProximity:Disconnect()
                CooldownProximity = nil
            end
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "性能优化",
    Desc = "降低画质提升帧率",
    Value = false,
    Callback = function(value)
        _G.AntiLag = value
        if value then
            local Terrain = Workspace:FindFirstChildOfClass("Terrain")
            if Terrain then
                Terrain.WaterWaveSize = 0
                Terrain.WaterWaveSpeed = 0
                Terrain.WaterReflectance = 0
                Terrain.WaterTransparency = 1
            end
            game.Lighting.GlobalShadows = false
            game.Lighting.FogEnd = 9e9
            game.Lighting.FogStart = 9e9

            task.spawn(function()
                while _G.AntiLag do
                    pcall(function()
                        for i, v in pairs(Workspace:FindFirstChild("Effects"):GetChildren()) do
                            PartLagDe(v)
                        end
                    end)
                    task.wait(1)
                end
            end)
        end
    end
})

TabHandles.Utilities:Toggle({
    Title = "防被甩飞",
    Desc = "防止被出生甩飞",
    Value = false,
    Callback = function(value)
        _G.AntiFling = value
        while _G.AntiFling do
            pcall(function()
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                    Player.Character.HumanoidRootPart.Anchored = true
                    Player.Character.HumanoidRootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                    Player.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                    Player.Character.HumanoidRootPart.Anchored = false
                end
            end)
            task.wait(0.1)
        end
    end
})

-- Other Games Tab
TabHandles.OtherGames:Button({
    Title = "一键完成跳绳",
    Desc = "直接传送到跳绳终点",
    Icon = "activity",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("JumpRope") and Workspace.JumpRope:FindFirstChild("Important") then
                local model = Workspace.JumpRope.Important:FindFirstChild("Model")
                if model and model:FindFirstChild("LEGS") then
                    local pos = model.LEGS.Position
                    Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                    WindUI:Notify({
                        Title = "完成",
                        Content = "已通关",
                        Icon = "check",
                        Duration = 3
                    })
                end
            end
        end)
    end
})

TabHandles.OtherGames:Button({
    Title = "玻璃桥透视",
    Desc = "显示玻璃桥安全玻璃",
    Icon = "eye",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("GlassBridge") then
                local GlassHolder = Workspace.GlassBridge:FindFirstChild("GlassHolder")
                if GlassHolder then
                    for i, v in pairs(GlassHolder:GetChildren()) do
                        for k, j in pairs(v:GetChildren()) do
                            if j:IsA("Model") and j.PrimaryPart then
                                local isSafe = not j.PrimaryPart:GetAttribute("exploitingisevil")
                                local Color = isSafe and Color3.fromRGB(28, 235, 87) or Color3.fromRGB(248, 87, 87)
                                j.PrimaryPart.Color = Color
                                j.PrimaryPart.Transparency = 0
                                j.PrimaryPart.Material = Enum.Material.Neon
                            end
                        end
                    end
                    WindUI:Notify({
                        Title = "玻璃桥透视",
                        Content = "已开启",
                        Icon = "eye",
                        Duration = 3
                    })
                end
            end
        end)
    end
})

TabHandles.OtherGames:Button({
    Title = "一键通过玻璃桥",
    Desc = "直接传送到玻璃桥终点",
    Icon = "zap",
    Callback = function()
        pcall(function()
            if Workspace:FindFirstChild("GlassBridge") and Workspace.GlassBridge:FindFirstChild("End") and Workspace.GlassBridge.End.PrimaryPart then
                local pos = Workspace.GlassBridge.End.PrimaryPart.Position + Vector3.new(0, 8, 0)
                Player.Character.HumanoidRootPart.CFrame = CFrame.new(pos, pos + Vector3.new(0, 0, -1))
                WindUI:Notify({
                    Title = "已通关",
                    Content = "已传送到终点",
                    Icon = "check",
                    Duration = 3
                })
            end
        end)
    end
})

TabHandles.OtherGames:Toggle({
    Title = "自动抱团",
    Desc = "自动完成抱团小游戏",
    Value = false,
    Callback = function(value)
        _G.AutoMingle = value
        while _G.AutoMingle do
            pcall(function()
                for i, v in ipairs(Player.Character:GetChildren()) do
                    if v.Name == "RemoteForQTE" then
                        v:FireServer()
                    end
                end
            end)
            task.wait(0.1)
        end
    end
})


-- Final notification
WindUI:Notify({
    Title = "Rb脚本中心-付费版",
    Content = "加载完成",
    Icon = "zap",
    Duration = 5
})
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 7436755782 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...种植花园...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            Callback = function() end,
            Variant = "Secondary",
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

local seeds = {
    "Carrot",
    "Strawberry",
    "Blueberry",
    "Orange",
    "Tomato",
    "Corn",
    "Daffodil",
    "Watermelon",
    "Pumpkin",
    "Apple",
    "Bamboo",
    "Coconut",
    "Cactus",
    "Dragon",
    "Mango",
    "Grape",
    "Mushroom",
    "Pepper",
    "Cacao",
    "Beanstalk",
    "Ember Lily",
    "Sugar Apple",
    "Burning Bud",
    "Giant Pinecone"
}

local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock")
local autoBuySeedsEnabled = false
local buyDelay = 0.02

TabHandles.gn:Toggle({
    Title = "自动购买种子",
    Desc = "自动购买所有类型的种子",
    Value = autoBuySeedsEnabled,
    Callback = function(state)
        autoBuySeedsEnabled = state
        if state then
            while autoBuySeedsEnabled do
                for _, seed in ipairs(seeds) do
                    if not autoBuySeedsEnabled then break end
                    local args = {seed}
                    remote:FireServer(unpack(args))
                    task.wait(buyDelay)
                end
            end
        end
    end
})

TabHandles.gn:Slider({
    Title = "购买间隔",
    Desc = "设置种子购买间隔时间(秒)",
    Value = { Min = 0.01, Max = 1, Default = 0.02 },
    Callback = function(value)
        buyDelay = value
    end
})

TabHandles.gn:Divider()

TabHandles.gn:Button({
    Title = "售卖所有",
    Icon = "bell",
    Callback = function()
    local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local originalCFrame = humanoidRootPart.CFrame

local targetCFrame = CFrame.new(
    86.5860291, 2.99999976, 0.426784307, 
    -0.00028669351, -1.82249966e-08, -0.99999994, 
    -6.22621052e-11, 1, -1.82249789e-08, 
    0.99999994, 5.70371181e-11, -0.00028669351
)

humanoidRootPart.CFrame = targetCFrame

task.wait(0.2)

local closestPrompt = nil
local closestDistance = math.huge

for _, prompt in ipairs(workspace:GetDescendants()) do
    if prompt:IsA("ProximityPrompt") then
        local distance = (prompt.Parent.Position - humanoidRootPart.Position).Magnitude
        if distance < closestDistance then
            closestDistance = distance
            closestPrompt = prompt
        end
    end
end

if closestPrompt then
    closestPrompt:InputHoldBegin()
    task.wait(0.1)
    closestPrompt:InputHoldEnd()
end

game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()

humanoidRootPart.CFrame = originalCFrame
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "售卖成功！",
            Icon = "bell",
            Duration = 3
        })
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local INTERACTIONS_PER_SECOND = 800
local SCAN_INTERVAL = 0.05
local MAX_DISTANCE = 45

local collectPrompts = {}
local lastScanTime = 0
local lastInteractionTime = 0
local frameTime = 1/INTERACTIONS_PER_SECOND

local function scanForPrompts()
    collectPrompts = {}
    for _, instance in ipairs(workspace:GetDescendants()) do
        if instance:IsA("ProximityPrompt") and instance.ActionText == "Collect" and instance.Enabled then
            table.insert(collectPrompts, instance)
        end
    end
end

local function getNearestPrompt()
    local nearestPrompt = nil
    local minDistance = math.huge
    local myPos = humanoidRootPart.Position
    
    for _, prompt in ipairs(collectPrompts) do
        if prompt.Parent then
            local distance = (prompt.Parent.Position - myPos).Magnitude
            if distance <= MAX_DISTANCE and distance < minDistance then
                minDistance = distance
                nearestPrompt = prompt
            end
        end
    end
    
    return nearestPrompt
end

RunService.Heartbeat:Connect(function()
    local now = os.clock()
    
    if now - lastScanTime >= SCAN_INTERVAL then
        scanForPrompts()
        lastScanTime = now
    end
    
    if now - lastInteractionTime >= frameTime then
        local nearestPrompt = getNearestPrompt()
        if nearestPrompt then
            fireproximityprompt(nearestPrompt)
        end
        lastInteractionTime = now
    end
end)

TabHandles.gn:Toggle({
    Title = "自动收割所有果实",
    Desc = "自动种植所有类型的种子",
    Value = false,
    Callback = function(state)
        getgenv().scanForPrompts = state
        scanForPrompts()
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local cropData = {
    ["Carrot Seed"] = "Carrot",
    ["Strawberry Seed"] = "Strawberry",
    ["Blueberry Seed"] = "Blueberry",
    ["Orange Tulip Seed"] = "Orange Tulip",
    ["Tomato Seed"] = "Tomato",
    ["Corn Seed"] = "Corn",
    ["Daffodil Seed"] = "Daffodil",
    ["Watermelon Seed"] = "Watermelon",
    ["Pumpkin Seed"] = "Pumpkin",
    ["Apple Seed"] = "Apple",
    ["Bamboo Seed"] = "Bamboo",
    ["Coconut Seed"] = "Coconut",
    ["Cactus Seed"] = "Cactus",
    ["Dragon Seed"] = "Dragon",
    ["Mango Seed"] = "Mango",
    ["Grape Seed"] = "Grape",
    ["Mushroom Seed"] = "Mushroom",
    ["Pepper Seed"] = "Pepper",
    ["Cacao Seed"] = "Cacao",
    ["Beanstalk Seed"] = "Beanstalk",
    ["Ember Lily Seed"] = "Ember Lily",
    ["sugar Apple Seed"] = "sugar Apple",
    ["Burning Bud Seed"] = "Burning Bud",
    ["Giant Pinecone Seed"] = "Giant Pinecone",
    ["Elder Strawberry Seed"] = "Elder Strawberry",
    ["Romanesco"] = "Romanesco"
}

local function getSeedCount(toolName)
    local count = toolName:match("%[X(%d+)%]")
    return count and tonumber(count) or 1
end

local function autoPlant()
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local plantEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Plant_RE")
    
    while getgenv().autoPlant == true do
        for toolName, cropType in pairs(cropData) do
            for _, tool in ipairs(player.Backpack:GetChildren()) do
                if tool:IsA("Tool") and tool.Name:find(toolName, 1, true) then
                    humanoid:EquipTool(tool)
                    task.wait(0.05)
                    
                    local count = getSeedCount(tool.Name)
                    for i = 1, count do
                        local args = {
                            Vector3.new(rootPart.Position.X, 0.13552704453468323, rootPart.Position.Z),
                            cropType
                        }
                        plantEvent:FireServer(unpack(args))
                        task.wait(0.05)
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

TabHandles.gn:Toggle({
    Title = "自动种植所有种子",
    Desc = "自动种你背包内的种子",
    Value = false,
    Callback = function(state)
        getgenv().autoPlant = state
        autoPlant()
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local cropTypes = {
    "Carrot", "Strawberry", "Blueberry", "Orange", "Tomato", "Corn",
    "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut",
    "Cactus", "Dragon", "Mango", "Grape", "Mushroom", "Pepper",
    "Cacao", "Beanstalk", "Ember Lily", "sugar Apple", "Burning Bud",
    "Giant Pinecone", "Elder Strawberry","Romanesco"
}

local function getSeedCount(toolName)
    local count = toolName:match("%[X(%d+)%]")
    return count and tonumber(count) or 1
end

local function getSeedTool(cropType)
    local seedName = cropType .. " Seed"
    for _, tool in ipairs(player.Backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:find(seedName, 1, true) then
            return tool, getSeedCount(tool.Name)
        end
    end
    return nil, 0
end

local function plantCrop(cropType, count)
    local seedTool, toolCount = getSeedTool(cropType)
    if not seedTool or toolCount <= 0 then return 0 end
    
    local planted = 0
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return 0 end
    
    humanoid:EquipTool(seedTool)
    task.wait(0.1)
    
    local plantEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Plant_RE")
    local actualCount = math.min(count, toolCount)
    
    for i = 1, actualCount do
        local args = {
            Vector3.new(rootPart.Position.X, 0.13552704453468323, rootPart.Position.Z),
            cropType
        }
        plantEvent:FireServer(unpack(args))
        planted = planted + 1
        task.wait(0.1)
    end
    
    return planted
end

local function autoPlantAll()
while getgenv().autoPlantAll == true do
    for _, cropType in ipairs(cropTypes) do
        plantCrop(cropType, math.huge)
    end
wait()
end
end

TabHandles.gn:Toggle({
    Title = "自动种植所有种子V2",
    Desc = "自动种植背包内的种子",
    Value = false,
    Callback = function(state)
        getgenv().autoPlantAll = state
        autoPlantAll()
    end
})

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard(game:GetService("Players").LocalPlayer.DisplayName)
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Icon = "copy",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard(game:GetService("Players").LocalPlayer.Name)
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard(game:GetService("Players").LocalPlayer.UserId)
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard(game:GetService("Players").LocalPlayer.AccountAge)
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
                setclipboard("无法复制")
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功复制！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42,
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120,
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
                Window:Dialog({
                    Title = "Rb脚本中心",
                    Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
                    Icon = "bell",
                    Buttons = {
                        {
                            Title = "确定",
                            Variant = "Primary",
                            Callback = function() 
                                print("ok")
                            end,
                        }
                    }
                })
                loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()
                local Sound = Instance.new("Sound",game:GetService("SoundService"))
                Sound.SoundId = "rbxassetid://2865227271"
                Sound:Play()
                WindUI:Notify({
                    Title = "Rb脚本中心---提示：",
                    Content = "已成功执行，请在控制台查看UNC！",
                    Icon = "bell",
                    IconThemed = true,
                    Duration = 5,
                })
            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")

        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local teleportDistance = value
        local isTeleporting = true

        local function DisableDefaultMovement()
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        end

        local function EnableDefaultMovement()
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
        end

        local function Teleport()
            if not isTeleporting or not rootPart or not humanoid then
                return
            end

            local moveDirection = humanoid.MoveDirection
            if moveDirection.Magnitude == 0 then
                return
            end

            local teleportVector = moveDirection * teleportDistance

            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

            local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

            if raycastResult then
                teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
            end

            rootPart.CFrame = rootPart.CFrame + teleportVector
        end

        function tpWalk:Enabled(enabled)
            isTeleporting = enabled
            if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
        end

        function tpWalk:GetEnabled()
            return isTeleporting
        end

        function tpWalk:SetSpeed(speed)
            teleportDistance = speed or 0.1
        end

        function tpWalk:GetSpeed()
            return teleportDistance
        end

        RunService.Heartbeat:Connect(function()
            if isTeleporting then
                Teleport()
            end
        end)

        return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 6331902150 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...被遗弃...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 被遗弃",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    wpgn = Tabs.gn:Tab({ Title = "物品功能", Icon = "layout-grid" }),
    jsgn = Tabs.gn:Tab({ Title = "角色功能", Icon = "layout-grid" }),
    ESPgn = Tabs.gn:Tab({ Title = "ESP功能", Icon = "layout-grid" }),
    tsgn = Tabs.gn:Tab({ Title = "提示功能", Icon = "layout-grid" }),
    dzgn = Tabs.gn:Tab({ Title = "动作功能", Icon = "layout-grid" }),
    pbgn = Tabs.gn:Tab({ Title = "屏蔽功能", Icon = "layout-grid" }),
    tlgn = Tabs.gn:Tab({ Title = "体力功能", Icon = "layout-grid" }),
    smgn = Tabs.gn:Tab({ Title = "生命功能", Icon = "layout-grid" }),
    zdgn = Tabs.gn:Tab({ Title = "炸弹功能", Icon = "layout-grid" }),
    gdgn = Tabs.gn:Tab({ Title = "自动格挡", Icon = "layout-grid" }),
    xjgn = Tabs.gn:Tab({ Title = "自动修机", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")


if not table.clone then
    table.clone = function(t)
        local nt = {}
        for k,v in pairs(t) do nt[k] = v end
        return nt
    end
end

local _env = getgenv and getgenv() or {}
local _hrp = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")



game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
    if _env.NoStun == true and game.Players.LocalPlayer.Character.Humanoid.WalkSpeed < 16 then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
    end
end)

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if _env.NoStun == true and game.Players.LocalPlayer.Character.Humanoid.WalkSpeed < 16 then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
end)

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 3, Default = 1 },
    Callback = function(v)
                _env.SpeedBoostValue = v
    end
})

_env.SpeedBoostValue = 1

sdToggle = TabHandles.Elements:Toggle({
    Title = "速度开启",
    Value = false,
    Callback = function(v) 
        _env.SpeedBoost = v
        while _env.SpeedBoost do
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame += game.Players.LocalPlayer.Character.Humanoid.MoveDirection * _env.SpeedBoostValue
            game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = true
            task.wait()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "速度已开启" or "速度已关闭",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

gnSlider = TabHandles.Elements:Slider({
    Title = "亮度调节",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 3, Default = 0 },
    Callback = function(v)
                _env.Brightness = v
    end
})

sdToggle = TabHandles.Elements:Toggle({
    Title = "去除阴影",
    Value = false,
    Callback = function(v) 
        _env.GlobalShadows = v
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已去除" or "已关闭",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})

sdToggle = TabHandles.Elements:Toggle({
    Title = "去雾V2",
    Value = false,
    Callback = function(v) 
        _env.NoFog = v
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已去除" or "已关闭",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.Elements:Divider()

sdToggle = TabHandles.Elements:Toggle({
    Title = "一键开启所有视觉优化",
    Value = false,
    Callback = function(v) 
                _env.Fullbright = v
        game:GetService("RunService").RenderStepped:Connect(function()
            if not game.Lighting:GetAttribute("FogStart") then 
                game.Lighting:SetAttribute("FogStart", game.Lighting.FogStart) 
            end
            if not game.Lighting:GetAttribute("FogEnd") then 
                game.Lighting:SetAttribute("FogEnd", game.Lighting.FogEnd) 
            end
            game.Lighting.FogStart = _env.NoFog and 0 or game.Lighting:GetAttribute("FogStart")
            game.Lighting.FogEnd = _env.NoFog and math.huge or game.Lighting:GetAttribute("FogEnd")
            
            local fog = game.Lighting:FindFirstChildOfClass("Atmosphere")
            if fog then
                if not fog:GetAttribute("Density") then 
                    fog:SetAttribute("Density", fog.Density) 
                end
                fog.Density = _env.NoFog and 0 or fog:GetAttribute("Density")
            end
            
            if _env.Fullbright then
                game.Lighting.OutdoorAmbient = Color3.new(1,1,1)
                game.Lighting.Brightness = _env.Brightness or 0
                game.Lighting.GlobalShadows = not _env.GlobalShadows
            else
                game.Lighting.OutdoorAmbient = Color3.fromRGB(55,55,55)
                game.Lighting.Brightness = 0
                game.Lighting.GlobalShadows = true
            end
        end)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启" or "已关闭",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})



gnToggle = TabHandles.gn:Toggle({
    Title = "去除前后摇/缓慢动作",
    Value = false,
    Callback = function(v) 
_env.NoStun = v
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "功能已开启" or "功能已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

ltToggle = TabHandles.gn:Toggle({
    Title = "聊天框可见",
    Desc = "需每局开启一次",
    Value = false,
    Callback = function(state) 
    if state then
    game.TextChatService.ChatWindowConfiguration.Enabled = true
    else
    game.TextChatService.ChatWindowConfiguration.Enabled = false    
    end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "聊天框已开启" or "聊天框已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.gn:Divider()

local intensitySlider = TabHandles.gn:Slider({
    Title = "视野范围",
    Desc = "speedwalk",
    Value = { Min = 70, Max = 120, Default = 70 },
    Callback = function(v)
        _env.FovValue = v
    end
})

_G.FovValue = 70

sdToggle = TabHandles.gn:Toggle({
    Title = "范围开启",
    Value = false,
    Callback = function(v) 
        _env.FOV = v
        game:GetService("RunService").RenderStepped:Connect(function()
            if _env.FOV then
                workspace.Camera.FieldOfView = _env.FovValue
            end
        end)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启" or "已关闭",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.wpgn:Toggle({
    Title = "自动捡医疗包",
    Value = false,
    Callback = function(state) 
        autoTeleportMedkitEnabled = state
        
        if autoTeleportMedkitEnabled then
            teleportMedkitThread = task.spawn(function()
                while autoTeleportMedkitEnabled and task.wait(0.5) do
                  
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local humanoidRootPart = character.HumanoidRootPart
                        
                      
                        local medkit = workspace:FindFirstChild("Map", true)
                        if medkit then
                            medkit = medkit:FindFirstChild("Ingame", true)
                            if medkit then
                                medkit = medkit:FindFirstChild("Medkit", true)
                                if medkit then
                                    local itemRoot = medkit:FindFirstChild("ItemRoot", true)
                                    if itemRoot then
                                       
                                        itemRoot.CFrame = humanoidRootPart.CFrame + humanoidRootPart.CFrame.LookVector * 3
                                        
                                       
                                        local prompt = itemRoot:FindFirstChild("ProximityPrompt", true)
                                        if prompt then
                                            fireproximityprompt(prompt)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        elseif teleportMedkitThread then
            task.cancel(teleportMedkitThread)
            teleportMedkitThread = nil
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启自动捡医疗包" or "已关闭自动捡医疗包",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.wpgn:Toggle({
    Title = "自动捡可乐",
    Value = false,
    Callback = function(state) 
        autoTeleportColaEnabled = state
        
        if autoTeleportColaEnabled then
            teleportColaThread = task.spawn(function()
                while autoTeleportColaEnabled and task.wait(0.5) do
                    -- 获取玩家角色
                    local character = game.Players.LocalPlayer.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local humanoidRootPart = character.HumanoidRootPart
                        
                        -- 查找可乐
                        local cola = workspace:FindFirstChild("Map", true)
                        if cola then
                            cola = cola:FindFirstChild("Ingame", true)
                            if cola then
                                cola = cola:FindFirstChild("BloxyCola", true)
                                if cola then
                                    local itemRoot = cola:FindFirstChild("ItemRoot", true)
                                    if itemRoot then
                                        -- 将可乐传送到玩家前方3个单位的位置
                                        itemRoot.CFrame = humanoidRootPart.CFrame + humanoidRootPart.CFrame.LookVector * 3
                                        
                                        -- 查找互动提示并触发
                                        local prompt = itemRoot:FindFirstChild("ProximityPrompt", true)
                                        if prompt then
                                            fireproximityprompt(prompt)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        elseif teleportColaThread then
            task.cancel(teleportColaThread)
            teleportColaThread = nil
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启自动捡可乐" or "已关闭自动捡可乐",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.wpgn:Toggle({
    Title = "自动用医疗包",
    Value = false,
    Callback = function(state) 
                autoMedkitEnabled = state
        
        if autoMedkitEnabled then
            medkitThread = task.spawn(function()
                while autoMedkitEnabled and task.wait(0.5) do
                    local medkit = workspace:FindFirstChild("Map", true)
                    if medkit then
                        medkit = medkit:FindFirstChild("Ingame", true)
                        if medkit then
                            medkit = medkit:FindFirstChild("Medkit", true)
                            if medkit then
                                local itemRoot = medkit:FindFirstChild("ItemRoot", true)
                                if itemRoot then
                                    local prompt = itemRoot:FindFirstChild("ProximityPrompt", true)
                                    if prompt then
                                        fireproximityprompt(prompt)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        elseif medkitThread then
            task.cancel(medkitThread)
            medkitThread = nil
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启自动用医疗包" or "已关闭自动用医疗包",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.wpgn:Toggle({
    Title = "自动用可乐",
    Value = false,
    Callback = function(state) 
        autoColaEnabled = state
        
        if autoColaEnabled then
            colaThread = task.spawn(function()
                while autoColaEnabled and task.wait(0.5) do
                    local cola = workspace:FindFirstChild("Map", true)
                    if cola then
                        cola = cola:FindFirstChild("Ingame", true)
                        if cola then
                            cola = cola:FindFirstChild("BloxyCola", true)
                            if cola then
                                local itemRoot = cola:FindFirstChild("ItemRoot", true)
                                if itemRoot then
                                    local prompt = itemRoot:FindFirstChild("ProximityPrompt", true)
                                    if prompt then
                                        fireproximityprompt(prompt)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        elseif colaThread then
            task.cancel(colaThread)
            colaThread = nil
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启自动用可乐" or "已关闭自动用可乐",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})



local Size = 5
local speed = 1
local player = game:GetService("Players").LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local rootPart = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")


local function aimbot1x1x1x1(state)
    local aimbot1x1sounds = {
        "rbxassetid://79782181585087",
        "rbxassetid://128711903717226"
    }
    
    aimbot1x1 = state
    
    if game:GetService("Players").LocalPlayer.Character.Name ~= "1x1x1x1" and state then
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用1x1x1x1角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
        return 
    end

    if state then
        aimbot1x1loop = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not aimbot1x1 then return end
            for _, v in pairs(aimbot1x1sounds) do
                if child.Name == v then
                    local survivors = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game:GetService("Players").LocalPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                table.insert(survivors, character)
                            end
                        end
                    end

                    local nearestSurvivor = nil
                    local shortestDistance = math.huge  
                    
                    for _, survivor in pairs(survivors) do
                        local survivorHRP = survivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestSurvivor = survivor
                            end
                        end
                    end
                    
                    if nearestSurvivor then
                        local nearestHRP = nearestSurvivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local direction = (nearestHRP.Position - playerHRP.Position).Unit
                            local num = 1
                            local maxIterations = 100 
                            
                            while num <= maxIterations do
                                task.wait(0.01)
                                num = num + 1
                                workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, nearestHRP.Position)
                                playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, Vector3.new(nearestHRP.Position.X, nearestHRP.Position.Y, nearestHRP.Position.Z))
                            end
                        end
                    end
                end
            end
        end)
    else
        if aimbot1x1loop then
            aimbot1x1loop:Disconnect()
            aimbot1x1loop = nil
        end
    end
end

-- 酷小孩角色自瞄
local function cool(state)
    local coolsounds = {
        "rbxassetid://111033845010938",
        "rbxassetid://106484876889079"
    }
    
    cool = state

    if game:GetService("Players").LocalPlayer.Character.Name ~= "c00lkidd" and state then
                WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用c00lkidd角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
        return 
    end

    if state then
        coolloop = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not cool then return end
            for _, v in pairs(coolsounds) do
                if child.Name == v then
                    local survivors = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game:GetService("Players").LocalPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                table.insert(survivors, character)
                            end
                        end
                    end

                    local nearestSurvivor = nil
                    local shortestDistance = math.huge  
                    
                    for _, survivor in pairs(survivors) do
                        local survivorHRP = survivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestSurvivor = survivor
                            end
                        end
                    end
                    
                    if nearestSurvivor then
                        local nearestHRP = nearestSurvivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local direction = (nearestHRP.Position - playerHRP.Position).Unit
                            local num = 1
                            local maxIterations = 100 
                            
                            if child.Name == "rbxassetid://79782181585087" then
                                maxIterations = 220  
                            end

                            while num <= maxIterations do
                                task.wait(0.01)
                                num = num + 1
                                workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, nearestHRP.Position)
                            end
                        end
                    end
                end
            end
        end)
    else
        if coolloop then
            coolloop:Disconnect()
            coolloop = nil
        end
    end
end

-- 两次角色自瞄
local function TWO(state)
    local TWOsounds = {
        "rbxassetid://86710781315432",
        "rbxassetid://99820161736138"
    }
    
    TWOTIME = state

    if game:GetService("Players").LocalPlayer.Character.Name ~= "TwoTime" and state then
                WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用Two Time角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
        return 
    end

    if state then
        TWOloop = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not TWOTIME then return end
            for _, v in pairs(TWOsounds) do
                if child.Name == v then
                    local survivors = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game:GetService("Players").LocalPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                table.insert(survivors, character)
                            end
                        end
                    end

                    local nearestSurvivor = nil
                    local shortestDistance = math.huge  
                    
                    for _, survivor in pairs(survivors) do
                        local survivorHRP = survivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestSurvivor = survivor
                            end
                        end
                    end
                    
                    if nearestSurvivor then
                        local nearestHRP = nearestSurvivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local direction = (nearestHRP.Position - playerHRP.Position).Unit
                            local num = 1
                            local maxIterations = 100 
                            
                            if child.Name == "rbxassetid://79782181585087" then
                                maxIterations = 220  
                            end

                            while num <= maxIterations do
                                task.wait(0.01)
                                num = num + 1
                                workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, nearestHRP.Position)
                                playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, Vector3.new(nearestHRP.Position.X, nearestHRP.Position.Y, nearestHRP.Position.Z))  
                            end
                        end
                    end
                end
            end
        end)
    else
        if TWOloop then
            TWOloop:Disconnect()
            TWOloop = nil
        end
    end
end

-- 约翰角色自瞄
local function johnaimbot(state)
    local johnaimbotsounds = {
        "rbxassetid://109525294317144"
    }
    
    johnaim = state
    if game:GetService("Players").LocalPlayer.Character.Name ~= "JohnDoe" and state then
                WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用约翰·多角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
        return 
    end
    
    if state then
        johnloop = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not johnaim then return end
            for _, v in pairs(johnaimbotsounds) do
                if child.Name == v then
                    local survivors = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game:GetService("Players").LocalPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                table.insert(survivors, character)
                            end
                        end
                    end

                    local nearestSurvivor = nil
                    local shortestDistance = math.huge  
                    
                    for _, survivor in pairs(survivors) do
                        local survivorHRP = survivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestSurvivor = survivor
                            end
                        end
                    end
                    
                    if nearestSurvivor then
                        local nearestHRP = nearestSurvivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        local maxIterations = 330
                        if playerHRP then
                            local direction = (nearestHRP.Position - playerHRP.Position).Unit
                            local num = 1
                            
                            while num <= maxIterations do
                                task.wait(0.01)
                                num = num + 1
                                workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, nearestHRP.Position)
                                playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, Vector3.new(nearestHRP.Position.X, nearestHRP.Position.Y, nearestHRP.Position.Z))
                            end
                        end
                    end
                end
            end
        end)
    else
        if johnloop then
            johnloop:Disconnect()
            johnloop = nil
        end
    end
end

-- 杰森角色自瞄
local function jasonaimbot(state)
    local jasonaimbotsounds = {
        "rbxassetid://112809109188560",
        "rbxassetid://102228729296384"
    }
    
    jasonaim = state
    if game:GetService("Players").LocalPlayer.Character.Name ~= "Jason" and state then
                WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用杰森角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
        return 
    end
    
    if state then
        jasonaimbotloop = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not jasonaim then return end
            for _, v in pairs(jasonaimbotsounds) do
                if child.Name == v then
                    local survivors = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game:GetService("Players").LocalPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                table.insert(survivors, character)
                            end
                        end
                    end

                    local nearestSurvivor = nil
                    local shortestDistance = math.huge  
                    
                    for _, survivor in pairs(survivors) do
                        local survivorHRP = survivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        
                        if playerHRP then
                            local distance = (survivorHRP.Position - playerHRP.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestSurvivor = survivor
                            end
                        end
                    end
                    
                    if nearestSurvivor then
                        local nearestHRP = nearestSurvivor.HumanoidRootPart
                        local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        local maxIterations = 70
                        if playerHRP then
                            local direction = (nearestHRP.Position - playerHRP.Position).Unit
                            local num = 1
                            
                            while num <= maxIterations do
                                task.wait(0.01)
                                num = num + 1
                                playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, Vector3.new(nearestHRP.Position.X, nearestHRP.Position.Y, nearestHRP.Position.Z))
                            end
                        end
                    end
                end
            end
        end)
    else
        if jasonaimbotloop then
            jasonaimbotloop:Disconnect()
            jasonaimbotloop = nil
        end
    end
end

-- 机会角色自瞄
local function chanceAimbot(state)
    CA = state
    if state then
        if game.Players.LocalPlayer.Character.Name ~= "Chance" then
                    WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用机会角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
            return
        end
        
        local RemoteEvent = game:GetService("ReplicatedStorage")
            :WaitForChild("Modules")
            :WaitForChild("Network")
            :WaitForChild("RemoteEvent")
            
        CAbotConnection = RemoteEvent.OnClientEvent:Connect(function(...)
            local args = {...}
            if args[1] == "UseActorAbility" and args[2] == "Shoot" then 
                local killerContainer = game.Workspace.Players:FindFirstChild("Killers")
                if killerContainer then 
                    local killer = killerContainer:FindFirstChildOfClass("Model")
                    if killer and killer:FindFirstChild("HumanoidRootPart") then 
                        local killerHRP = killer.HumanoidRootPart
                        local playerHRP = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if playerHRP then 
                            local TMP = 0.35
                            local AMD = 2
                            local endTime = tick() + AMD
                            while tick() < endTime do
                                RunService.RenderStepped:Wait()
                                local predictedTarget = killerHRP.Position + (killerHRP.Velocity * TMP)
                                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = killerHRP.CFrame + Vector3.new(0, 0, -2)
                            end
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = PICF
                        end
                    end
                end
            end
        end)
    else
        if CAbotConnection then
            CAbotConnection:Disconnect()
            CAbotConnection = nil
        end
    end
end

-- 谢德利茨基角色自瞄
local function shedletskyAimbot(state)
    shedaim = state
    if state then
        if game:GetService("Players").LocalPlayer.Character.Name ~= "Shedletsky" then
                    WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "请使用谢德利茨基角色来使用此功能!",
            Icon = "x",
            Duration = 2
        })
            return
        end
        
        shedloop = game:GetService("Players").LocalPlayer.Character.Sword.ChildAdded:Connect(function(child)
            if not shedaim then return end
            if child:IsA("Sound") then 
                local FAN = child.Name
                if FAN == "rbxassetid://12222225" or FAN == "83851356262523" then 
                    local killersFolder = game.Workspace.Players:FindFirstChild("Killers")
                    if killersFolder then 
                        local killer = killersFolder:FindFirstChildOfClass("Model")
                        if killer and killer:FindFirstChild("HumanoidRootPart") then 
                            local killerHRP = killer.HumanoidRootPart
                            local playerHRP = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if playerHRP then 
                                local num = 1
                                local maxIterations = 100
                                while num <= maxIterations do
                                    task.wait(0.01)
                                    num = num + 1
                                    workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, killerHRP.Position)
                                    playerHRP.CFrame = CFrame.lookAt(playerHRP.Position, killerHRP.Position)
                                end
                            end
                        end
                    end
                end
            end
        end)
    else
        if shedloop then 
            shedloop:Disconnect()
            shedloop = nil
        end
    end
end

TabHandles.jsgn:Paragraph({
    Title = "幸存者自瞄功能",
    Color = "White",
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "机会-自瞄",
    Value = false,
    Callback = chanceAimbot 
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "Two Time-自瞄",
    Value = false,
    Callback = TWO 
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "谢德利茨基-自瞄",
    Value = false,
    Callback = shedletskyAimbot
})

TabHandles.jsgn:Divider()

TabHandles.jsgn:Paragraph({
    Title = "杀手自瞄功能",
    Color = "White",
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "1x1x1x1-自瞄",
    Value = false,
    Callback = aimbot1x1x1x1 
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "c00lkidd-自瞄",
    Value = false,
    Callback = cool 
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "约翰·多-自瞄",
    Value = false,
    Callback = johnaimbot
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "杰森-自瞄",
    Value = false,
    Callback = jasonaimbot 
})

local aimSettings = {
    distance = 100,
    fov = 100,
    size = 10,
    noWall = false,
    rainbowMode = true 
}

local aimbotData = {
    FOVring = nil,
    connections = {}
}

TabHandles.jsgn:Divider()

TabHandles.jsgn:Paragraph({
    Title = "自瞄玩家功能",
    Color = "White",
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "自瞄距离",
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(Value)
        aimSettings.distance = Value
    end
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "FOV大小",
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(Value)
        aimSettings.fov = Value
    end
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "自瞄大小",
    Value = { Min = 0, Max = 100, Default = 10 },
    Callback = function(Value)
        aimSettings.size = Value
    end
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "墙体检测",
    Value = false,
    Callback = function(state) 
aimSettings.noWall = state
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启墙体检测" or "已关闭墙体检测",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.jsgn:Dropdown({
    Title = "FOV颜色：",
    Values = { 
        'Red',
        'Green',
        'Blue',
        'White',
        'Yellow',
        'Cyan',
        'Magenta',
        'Rainbow'
         },
    Value = "",
    Callback = function(Value)
        local colorMap = {
            Red = Color3.fromRGB(255, 0, 0),
            Green = Color3.fromRGB(0, 255, 0),
            Blue = Color3.fromRGB(0, 0, 255),
            White = Color3.fromRGB(255, 255, 255),
            Yellow = Color3.fromRGB(255, 255, 0),
            Cyan = Color3.fromRGB(0, 255, 255),
            Magenta = Color3.fromRGB(255, 0, 255)
        }

        if Value == 'Rainbow' then
            aimSettings.rainbowMode = true
        else
            aimSettings.rainbowMode = false
            local selectedColor = colorMap[Value] or Color3.fromRGB(231, 231, 236)
            if aimbotData.FOVring then
                aimbotData.FOVring.Color = selectedColor
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..Value,
            Duration = 2
        })
    end
})

local bai = {}
bai.Aim = false
local aimConnection

TabHandles.jsgn:Divider()

sdToggle = TabHandles.jsgn:Toggle({
    Title = "自瞄玩家",
    Value = false,
    Callback = function(state) 
        bai.Aim = state
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Cam = workspace.CurrentCamera
        local UserInputService = game:GetService("UserInputService")
        local RaycastParams = RaycastParams.new()
        RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist

        local function cleanup()
            if aimbotData.FOVring then
                aimbotData.FOVring:Remove()
                aimbotData.FOVring = nil
            end
            if aimConnection then
                aimConnection:Disconnect()
                aimConnection = nil
            end
        end

        if state then
            if not aimbotData.FOVring then
                aimbotData.FOVring = Drawing.new("Circle")
                aimbotData.FOVring.Visible = true
                aimbotData.FOVring.Thickness = 2
                aimbotData.FOVring.Filled = false
                aimbotData.FOVring.Color = Color3.fromHSV(0, 1, 1)
            end

            aimConnection = RunService.RenderStepped:Connect(function()
                aimbotData.FOVring.Radius = aimSettings.fov
                aimbotData.FOVring.Position = Cam.ViewportSize / 2

                local survivorsFolder = workspace.Players:FindFirstChild("Survivors")
                local target = nil
                local closestDist = math.huge
                local mousePos = Cam.ViewportSize / 2

                if survivorsFolder then
                    for _, survivorModel in pairs(survivorsFolder:GetChildren()) do
                        if survivorModel == Players.LocalPlayer.Character then
                            break
                        end

                        local hrp = survivorModel:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            local screenPos, onScreen = Cam:WorldToViewportPoint(hrp.Position)
                            local distance = (Cam.CFrame.Position - hrp.Position).Magnitude
                            if onScreen and distance <= aimSettings.distance then
                                if aimSettings.noWall then
                                    RaycastParams.FilterDescendantsInstances = {
                                        Players.LocalPlayer.Character,
                                        workspace.Players
                                    }
                                    local result = workspace:Raycast(Cam.CFrame.Position, hrp.Position - Cam.CFrame.Position, RaycastParams)
                                    if result and not result.Instance:IsDescendantOf(survivorModel) then
                                        break
                                    end
                                end
                                local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                                if screenDist < closestDist and screenDist <= aimSettings.fov then
                                    closestDist = screenDist
                                    target = hrp
                                end
                            end
                        end
                    end
                end

                if target then
                    local lookVector = (target.Position - Cam.CFrame.Position).Unit
                    Cam.CFrame = CFrame.new(Cam.CFrame.Position, Cam.CFrame.Position + lookVector)
                end

                if aimSettings.rainbowMode and aimbotData.FOVring then
                    local hue = (tick() * 0.2) % 1
                    aimbotData.FOVring.Color = Color3.fromHSV(hue, 1, 1)
                end
            end)

            aimbotData.connections.keyEvent = UserInputService.InputBegan:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.Delete then
                    bai.Aim = false
                    Spy:SetValue(false)
                    cleanup()
                end
            end)
        else
            cleanup()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自瞄" or "已关闭自瞄",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.jsgn:Divider()

local aimSettings = {
    distance = 100,
    fov = 100,
    size = 10,
    noWall = false,
    rainbowMode = true 
}

local aimbotData = {
    FOVring = nil,
    connections = {}
}

TabHandles.jsgn:Paragraph({
    Title = "自瞄杀手功能",
    Color = "White",
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "自瞄距离",
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(Value)
        aimSettings.distance = Value
    end
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "FOV大小",
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(Value)
        aimSettings.fov = Value
    end
})

local intensitySlider = TabHandles.jsgn:Slider({
    Title = "自瞄距离",
    Value = { Min = 0, Max = 100, Default = 10 },
    Callback = function(Value)
        aimSettings.size = Value
    end
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "墙体检测",
    Value = false,
    Callback = function(state) 
aimSettings.noWall = state
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启墙体检测" or "已关闭墙体检测",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.jsgn:Dropdown({
    Title = "FOV颜色：",
    Values = { 
        'Red',
        'Green',
        'Blue',
        'White',
        'Yellow',
        'Cyan',
        'Magenta',
        'Rainbow'
         },
    Value = "",
    Callback = function(Value)
        local colorMap = {
            Red = Color3.fromRGB(255, 0, 0),
            Green = Color3.fromRGB(0, 255, 0),
            Blue = Color3.fromRGB(0, 0, 255),
            White = Color3.fromRGB(255, 255, 255),
            Yellow = Color3.fromRGB(255, 255, 0),
            Cyan = Color3.fromRGB(0, 255, 255),
            Magenta = Color3.fromRGB(255, 0, 255)
        }

        if Value == 'Rainbow' then
            aimSettings.rainbowMode = true
        else
            aimSettings.rainbowMode = false
            local selectedColor = colorMap[Value] or Color3.fromRGB(231, 231, 236)
            if aimbotData.FOVring then
                aimbotData.FOVring.Color = selectedColor
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..Value,
            Duration = 2
        })
    end
})

local bai = {}
bai.Aim = false
local aimConnection

sdToggle = TabHandles.jsgn:Toggle({
    Title = "自瞄杀手",
    Value = false,
    Callback = function(state) 
bai.Aim = state
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Cam = workspace.CurrentCamera
        local UserInputService = game:GetService("UserInputService")
        local RaycastParams = RaycastParams.new()
        RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist

        local function cleanup()
            if aimbotData.FOVring then
                aimbotData.FOVring:Remove()
                aimbotData.FOVring = nil
            end
            if aimConnection then
                aimConnection:Disconnect()
                aimConnection = nil
            end
        end

        if state then
            if not aimbotData.FOVring then
                aimbotData.FOVring = Drawing.new("Circle")
                aimbotData.FOVring.Visible = true
                aimbotData.FOVring.Thickness = 2
                aimbotData.FOVring.Filled = false
                aimbotData.FOVring.Color = Color3.fromHSV(0, 1, 1)
            end

            aimConnection = RunService.RenderStepped:Connect(function()
                aimbotData.FOVring.Radius = aimSettings.fov
                aimbotData.FOVring.Position = Cam.ViewportSize / 2

                local killersFolder = workspace.Players:FindFirstChild("Killers")
                local target = nil
                local closestDist = math.huge
                local mousePos = Cam.ViewportSize / 2

                if killersFolder then
                    for _, killerModel in pairs(killersFolder:GetChildren()) do
                        local hrp = killerModel:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            local screenPos, onScreen = Cam:WorldToViewportPoint(hrp.Position)
                            local distance = (Cam.CFrame.Position - hrp.Position).Magnitude
                            if onScreen and distance <= aimSettings.distance then
                                if aimSettings.noWall then
                                    RaycastParams.FilterDescendantsInstances = {
                                        Players.LocalPlayer.Character,
                                        workspace.Players
                                    }
                                    local result = workspace:Raycast(Cam.CFrame.Position, hrp.Position - Cam.CFrame.Position, RaycastParams)
                                    if result and not result.Instance:IsDescendantOf(killerModel) then
                                        break
                                    end
                                end
                                local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                                if screenDist < closestDist and screenDist <= aimSettings.fov then
                                    closestDist = screenDist
                                    target = hrp
                                end
                            end
                        end
                    end
                end

                if target then
                    local lookVector = (target.Position - Cam.CFrame.Position).Unit
                    Cam.CFrame = CFrame.new(Cam.CFrame.Position, Cam.CFrame.Position + lookVector)
                end

                if aimSettings.rainbowMode and aimbotData.FOVring then
                    local hue = (tick() * 0.2) % 1
                    aimbotData.FOVring.Color = Color3.fromHSV(hue, 1, 1)
                end
            end)

            aimbotData.connections.keyEvent = UserInputService.InputBegan:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.Delete then
                    bai.Aim = false
                    Spy:SetValue(false)
                    cleanup()
                end
            end)
        else
            cleanup()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自瞄杀手" or "已关闭自瞄杀手",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.jsgn:Divider()

function AimShootChance(value)
    local aimshootchance = value
    if value then
        local chanceaimbotsounds = {
            "rbxassetid://201858045",
            "rbxassetid://139012439429121"
        }
        aimshootchance = game.Players.LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not aimshootchance then return end
            for _, v in ipairs(chanceaimbotsounds) do
                if child.Name == v then
                    local targetkiller = game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model")
                    if targetkiller and targetkiller:FindFirstChild("HumanoidRootPart") then
                        if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local direction = (targetkiller.HumanoidRootPart.Position - game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Unit
                            local number = 1
                            game:GetService("RunService").RenderStepped:Connect(function()
                                if number <= 100 then
                                    task.wait(0.01)
                                    number = number + 1
                                    game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, Vector3.new(targetkiller.HumanoidRootPart.Position.X, targetkiller.HumanoidRootPart.Position.Y, targetkiller.HumanoidRootPart.Position.Z))
                                end
                            end)
                        end
                    end
                end
            end
        end)
    else
        aimshootchance:Disconnect()
    end
end

function AimSlashShedletsky(value)
    local aimslashsword = value
    if value then
        local shedaimbotsounds = {
            "rbxassetid://106397684977541",
            "rbxassetid://106397684977541"
        }
        aimslash = game.Players.LocalPlayer.Character.Sword.ChildAdded:Connect(function(child)
            if not aimslashsword then return end
            for _, v in ipairs(shedaimbotsounds) do
                if child.Name == v then
                    local targetkiller = game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model")
                    if targetkiller and targetkiller:FindFirstChild("HumanoidRootPart") then
                        if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local direction = (targetkiller.HumanoidRootPart.Position - game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Unit
                            local number = 1
                            game:GetService("RunService").RenderStepped:Connect(function()
                                if number <= 100 then
                                    task.wait(0.01)
                                    number = number + 1
                                    game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, Vector3.new(targetkiller.HumanoidRootPart.Position.X, targetkiller.HumanoidRootPart.Position.Y, targetkiller.HumanoidRootPart.Position.Z))
                                end
                            end)
                        end
                    end
                end
            end
        end)
    else
        aimslash:Disconnect()
    end
end

function AimAttackGuest(value)
    local aimattackguest = value
    if value then
        local guestaimbotsounds = {
            "rbxassetid://106397684977541"
        }
        aimguest = game.Players.LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
            if not aimattackguest then return end
            for _, v in ipairs(guestaimbotsounds) do
                if child.Name == v then
                    local targetkiller = game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model")
                    if targetkiller and targetkiller:FindFirstChild("HumanoidRootPart") then
                        if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local direction = (targetkiller.HumanoidRootPart.Position - game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).Unit
                            local number = 1
                            game:GetService("RunService").RenderStepped:Connect(function()
                                if number <= 100 then
                                    task.wait(0.01)
                                    number = number + 1
                                    game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, Vector3.new(targetkiller.HumanoidRootPart.Position.X, targetkiller.HumanoidRootPart.Position.Y, targetkiller.HumanoidRootPart.Position.Z))
                                end
                            end)
                        end
                    end
                end
            end
        end)
    else
        aimguest:Disconnect()
    end
end

sdToggle = TabHandles.jsgn:Toggle({
    Title = "机会自瞄",
    Value = false,
    Callback = function(v) 
AimShootChance(v)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启机会自瞄" or "已关闭机会自瞄",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "谢德自瞄",
    Value = false,
    Callback = function(v) 
AimSlashShedletsky(v)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启谢德自瞄" or "已关闭谢德自瞄",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.jsgn:Toggle({
    Title = "访客自瞄",
    Value = false,
    Callback = function(v) 
AimAttackGuest(v)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启访客自瞄" or "已关闭访客自瞄",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

-- 初始化设置
local DistanceSettings = {
    ShowSurvivors = true,
    ShowKillers = true,
    SurvivorColor = Color3.fromRGB(0, 191, 255), -- 默认幸存者蓝色
    KillerColor = Color3.fromRGB(255, 0, 0),     -- 默认杀手红色
    TextSize = 14
}

-- 距离显示功能
local function updateDistanceDisplay()
    -- 先关闭现有连接
    if getgenv().distanceUnderFeetConnection then
        getgenv().distanceUnderFeetConnection:Disconnect()
    end
    
    if getgenv().characterRemovedConnection then
        getgenv().characterRemovedConnection:Disconnect()
    end
    
    -- 如果两个都关闭则完全禁用
    if not DistanceSettings.ShowSurvivors and not DistanceSettings.ShowKillers then
        if getgenv().distanceUnderFeetLabels then
            for _, data in pairs(getgenv().distanceUnderFeetLabels) do
                pcall(function() data.label:Remove() end)
            end
            getgenv().distanceUnderFeetLabels = nil
        end
        return
    end
    
    -- 初始化变量
    local players = game:GetService("Players")
    local runService = game:GetService("RunService")
    local localPlayer = players.LocalPlayer
    local camera = workspace.CurrentCamera
    
    -- 存储所有距离标签
    getgenv().distanceUnderFeetLabels = getgenv().distanceUnderFeetLabels or {}
    
    -- 主循环
    getgenv().distanceUnderFeetConnection = runService.RenderStepped:Connect(function()
        local localChar = localPlayer.Character
        if not localChar or not localChar:FindFirstChild("HumanoidRootPart") then return end
        
        local localPos = localChar.HumanoidRootPart.Position
        
        -- 处理幸存者
        if DistanceSettings.ShowSurvivors then
            local survivors = workspace.Players:FindFirstChild("Survivors")
            if survivors then
                for _, survivor in ipairs(survivors:GetChildren()) do
                    if survivor:IsA("Model") and survivor ~= localChar then
                        local hrp = survivor:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            if not getgenv().distanceUnderFeetLabels[survivor] then
                                getgenv().distanceUnderFeetLabels[survivor] = {
                                    label = Drawing.new("Text"),
                                    type = "Survivor"
                                }
                                local label = getgenv().distanceUnderFeetLabels[survivor].label
                                label.Size = DistanceSettings.TextSize
                                label.Center = true
                                label.Outline = true
                                label.Font = 2
                            end
                            
                            local data = getgenv().distanceUnderFeetLabels[survivor]
                            local distance = math.floor((hrp.Position - localPos).Magnitude)
                            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, 3, 0))
                            
                            if onScreen then
                                data.label.Position = Vector2.new(screenPos.X, screenPos.Y)
                                data.label.Text = tostring(distance) .. "m"
                                data.label.Color = DistanceSettings.SurvivorColor
                                data.label.Visible = true
                            else
                                data.label.Visible = false
                            end
                        end
                    end
                end
            end
        else
            -- 隐藏所有幸存者标签
            for model, data in pairs(getgenv().distanceUnderFeetLabels or {}) do
                if data.type == "Survivor" then
                    data.label.Visible = false
                end
            end
        end
        
        -- 处理杀手
        if DistanceSettings.ShowKillers then
            local killers = workspace.Players:FindFirstChild("Killers")
            if killers then
                for _, killer in ipairs(killers:GetChildren()) do
                    if killer:IsA("Model") then
                        local hrp = killer:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            if not getgenv().distanceUnderFeetLabels[killer] then
                                getgenv().distanceUnderFeetLabels[killer] = {
                                    label = Drawing.new("Text"),
                                    type = "Killer"
                                }
                                local label = getgenv().distanceUnderFeetLabels[killer].label
                                label.Size = DistanceSettings.TextSize
                                label.Center = true
                                label.Outline = true
                                label.Font = 2
                            end
                            
                            local data = getgenv().distanceUnderFeetLabels[killer]
                            local distance = math.floor((hrp.Position - localPos).Magnitude)
                            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, 3, 0))
                            
                            if onScreen then
                                data.label.Position = Vector2.new(screenPos.X, screenPos.Y)
                                data.label.Text = tostring(distance) .. "m"
                                data.label.Color = DistanceSettings.KillerColor
                                data.label.Visible = true
                            else
                                data.label.Visible = false
                            end
                        end
                    end
                end
            end
        else
            -- 隐藏所有杀手标签
            for model, data in pairs(getgenv().distanceUnderFeetLabels or {}) do
                if data.type == "Killer" then
                    data.label.Visible = false
                end
            end
        end
    end)
    
    -- 监听角色移除
    getgenv().characterRemovedConnection = workspace.Players.DescendantRemoving:Connect(function(descendant)
        if descendant:IsA("Model") and getgenv().distanceUnderFeetLabels and getgenv().distanceUnderFeetLabels[descendant] then
            getgenv().distanceUnderFeetLabels[descendant].label:Remove()
            getgenv().distanceUnderFeetLabels[descendant] = nil
        end
    end)
end

TabHandles.ESPgn:Paragraph({
    Title = "ESP功能",
    Color = "White",
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "距离显示",
    Value = false,
    Callback = function(enabled) 
        if enabled then
            updateDistanceDisplay()
        else
            -- 完全关闭
            if getgenv().distanceUnderFeetConnection then
                getgenv().distanceUnderFeetConnection:Disconnect()
            end
            
            if getgenv().characterRemovedConnection then
                getgenv().characterRemovedConnection:Disconnect()
            end
            
            if getgenv().distanceUnderFeetLabels then
                for _, data in pairs(getgenv().distanceUnderFeetLabels) do
                    pcall(function() data.label:Remove() end)
                end
                getgenv().distanceUnderFeetLabels = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启距离显示" or "已关闭距离显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者",
    Value = false,
    Callback = function(enabled) 
DistanceSettings.ShowSurvivors = enabled
        if getgenv().distanceUnderFeetConnection then
            updateDistanceDisplay()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启幸存者距离显示" or "已关闭幸存者距离显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手",
    Value = false,
    Callback = function(enabled) 
DistanceSettings.ShowKillers = enabled
        if getgenv().distanceUnderFeetConnection then
            updateDistanceDisplay()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启杀手距离显示" or "已关闭杀手距离显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "幸存者显示颜色",
    Values = { "蓝色", "绿色", "黄色", "紫色", "青色" },
    Value = "绿色",
    Callback = function(value)
            local colorMap = {
            ["蓝色"] = Color3.fromRGB(0, 191, 255),
            ["绿色"] = Color3.fromRGB(0, 255, 0),
            ["黄色"] = Color3.fromRGB(255, 255, 0),
            ["紫色"] = Color3.fromRGB(128, 0, 128),
            ["青色"] = Color3.fromRGB(0, 255, 255)
        }
        
        DistanceSettings.SurvivorColor = colorMap[value] or Color3.fromRGB(0, 191, 255)
        if getgenv().distanceUnderFeetLabels then
            for _, data in pairs(getgenv().distanceUnderFeetLabels) do
                if data.type == "Survivor" then
                    data.label.Color = DistanceSettings.SurvivorColor
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "杀手显示颜色",
    Values = { "红色", "橙色", "粉色", "白色", "黑色" },
    Value = "红色",
    Callback = function(value)
            local colorMap = {
            ["红色"] = Color3.fromRGB(255, 0, 0),
            ["橙色"] = Color3.fromRGB(255, 165, 0),
            ["粉色"] = Color3.fromRGB(255, 192, 203),
            ["白色"] = Color3.fromRGB(255, 255, 255),
            ["黑色"] = Color3.fromRGB(0, 0, 0)
        }
        
        DistanceSettings.KillerColor = colorMap[value] or Color3.fromRGB(255, 0, 0)
        if getgenv().distanceUnderFeetLabels then
            for _, data in pairs(getgenv().distanceUnderFeetLabels) do
                if data.type == "Killer" then
                    data.label.Color = DistanceSettings.KillerColor
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "距离文本大小",
    Value = { Min = 8, Max = 24, Default = 14 },
    Callback = function(value)
        DistanceSettings.TextSize = value
        if getgenv().distanceUnderFeetLabels then
            for _, data in pairs(getgenv().distanceUnderFeetLabels) do
                data.label.Size = value
            end
        end
    end
})

TabHandles.ESPgn:Divider()

-- 高亮绘制设置
local HighlightSettings = {
    ShowSurvivorHighlights = true,
    ShowKillerHighlights = true,
    FillTransparency = 0.5,
    OutlineTransparency = 0,
    connection = nil,
    highlights = {}  -- 存储所有高亮对象
}

-- 更新颜色预设
HighlightSettings.SurvivorColors = {
    ["绿色"] = Color3.fromRGB(0, 255, 0),
    ["白色"] = Color3.fromRGB(255, 255, 255),
    ["紫色"] = Color3.fromRGB(128, 0, 128),
    ["青色"] = Color3.fromRGB(0, 255, 255),
    ["橙色"] = Color3.fromRGB(255, 165, 0),
    ["柠檬绿"] = Color3.fromRGB(173, 255, 47)  -- 新增柠檬绿
}

HighlightSettings.KillerColors = {
    ["红色"] = Color3.fromRGB(255, 0, 0),
    ["粉色"] = Color3.fromRGB(255, 105, 180),
    ["黑色"] = Color3.fromRGB(0, 0, 0),
    ["蓝色"] = Color3.fromRGB(0, 0, 255),
    ["猩红色"] = Color3.fromRGB(220, 20, 60),  -- 新增猩红色
    ["杏色"] = Color3.fromRGB(251, 206, 177)   -- 新增杏色
}

-- 边缘颜色使用与填充颜色相同的选项
HighlightSettings.SurvivorOutlineColors = table.clone(HighlightSettings.SurvivorColors)
HighlightSettings.KillerOutlineColors = table.clone(HighlightSettings.KillerColors)

-- 默认颜色
HighlightSettings.SelectedSurvivorColor = "青色"
HighlightSettings.SelectedKillerColor = "红色"
HighlightSettings.SelectedSurvivorOutlineColor = "青色"
HighlightSettings.SelectedKillerOutlineColor = "红色"

-- 清理高亮对象
local function cleanupHighlights()
    for _, highlight in pairs(HighlightSettings.highlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    HighlightSettings.highlights = {}
end

-- 更新高亮显示
local function updateHighlights()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    
    -- 获取幸存者和杀手文件夹
    local survivorsFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Survivors")
    local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
    
    -- 只处理幸存者和杀手
    local function processFolder(folder, isKiller)
        if not folder then return end
        
        for _, model in ipairs(folder:GetChildren()) do
            if model:IsA("Model") then
                -- 确定颜色
                local fillColor = isKiller and HighlightSettings.KillerColors[HighlightSettings.SelectedKillerColor] 
                                          or HighlightSettings.SurvivorColors[HighlightSettings.SelectedSurvivorColor]
                
                local outlineColor = isKiller and HighlightSettings.KillerOutlineColors[HighlightSettings.SelectedKillerOutlineColor] 
                                              or HighlightSettings.SurvivorOutlineColors[HighlightSettings.SelectedSurvivorOutlineColor]
                
                -- 根据设置决定是否显示
                if (isKiller and HighlightSettings.ShowKillerHighlights) or 
                   (not isKiller and HighlightSettings.ShowSurvivorHighlights) then
                    
                    if not HighlightSettings.highlights[model] then
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = game.CoreGui
                        HighlightSettings.highlights[model] = highlight
                    end
                    
                    local highlight = HighlightSettings.highlights[model]
                    highlight.Adornee = model
                    highlight.FillColor = fillColor
                    highlight.OutlineColor = outlineColor
                    highlight.FillTransparency = HighlightSettings.FillTransparency
                    highlight.OutlineTransparency = HighlightSettings.OutlineTransparency
                elseif HighlightSettings.highlights[model] then
                    HighlightSettings.highlights[model].Adornee = nil
                end
            end
        end
    end
    
    -- 处理幸存者
    processFolder(survivorsFolder, false)
    
    -- 处理杀手
    processFolder(killersFolder, true)
    
    -- 清理不再存在的模型的高亮
    for model, highlight in pairs(HighlightSettings.highlights) do
        if not model or not model.Parent then
            highlight:Destroy()
            HighlightSettings.highlights[model] = nil
        end
    end
end

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "高亮显示",
    Value = false,
    Callback = function(enabled) 
if enabled then
            -- 初始化连接
            if not HighlightSettings.connection then
                HighlightSettings.connection = game:GetService("RunService").RenderStepped:Connect(updateHighlights)
            end
        else
            -- 关闭连接
            if HighlightSettings.connection then
                HighlightSettings.connection:Disconnect()
                HighlightSettings.connection = nil
            end
            -- 清理高亮对象
            cleanupHighlights()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启高亮显示" or "已关闭高亮显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者",
    Value = false,
    Callback = function(enabled) 
HighlightSettings.ShowSurvivorHighlights = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启幸存者显示" or "已关闭幸存者显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手",
    Value = false,
    Callback = function(enabled) 
HighlightSettings.ShowKillerHighlights = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启杀手显示" or "已关闭杀手显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "幸存者高亮显示颜色",
    Values = { "绿色", "白色", "紫色", "青色", "橙色", "柠檬绿" },
    Value = "柠檬绿",
    Callback = function(value)
HighlightSettings.SelectedSurvivorColor = value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "杀手高亮显示颜色",
    Values = { "红色", "粉色", "黑色", "蓝色", "猩红色", "杏色" },
    Value = "猩红色",
    Callback = function(value)
HighlightSettings.SelectedKillerColor = value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "幸存者边框显示颜色",
    Values = { "绿色", "白色", "紫色", "青色", "橙色", "柠檬绿" },
    Value = "白色",
    Callback = function(value)
HighlightSettings.SelectedSurvivorOutlineColor = value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local modeDropdown = TabHandles.ESPgn:Dropdown({
    Title = "杀手边框显示颜色",
    Values = { "红色", "粉色", "黑色", "蓝色", "猩红色", "杏色" },
    Value = "黑色",
    Callback = function(value)
HighlightSettings.SelectedKillerOutlineColor = value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "高亮显示透明度",
    Value = { Min = 0, Max = 1, Default = 0.5 },
    Callback = function(value)
        HighlightSettings.FillTransparency = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "边框显示透明度",
    Value = { Min = 0, Max = 1, Default = 0 },
    Callback = function(value)
        HighlightSettings.OutlineTransparency = value
    end
})

-- 血量条设置
local HealthBarSettings = {
    ShowSurvivorBars = true,
    ShowKillerBars = true,
    BarWidth = 100,      -- 固定宽度
    BarHeight = 5,       -- 固定高度
    TextSize = 14,       -- 固定文字大小
    BarOffset = Vector2.new(0, -30), -- 基础偏移
    TextOffset = Vector2.new(0, -40)  -- 文字偏移
}

-- 预设颜色方案（修改后的幸存者颜色）
local ColorPresets = {
    Survivor = {
        FullHealth = Color3.fromRGB(0, 255, 255),    -- 青色(满血)
        HalfHealth = Color3.fromRGB(0, 255, 0),      -- 绿色(半血)
        LowHealth = Color3.fromRGB(255, 165, 0)      -- 橙色(低血)
    },
    Killer = {
        FullHealth = Color3.fromRGB(255, 0, 0),      -- 红色(满血)
        HalfHealth = Color3.fromRGB(255, 165, 0),    -- 橙色(半血)
        LowHealth = Color3.fromRGB(255, 255, 0)      -- 黄色(低血)
    },
    Common = {
        Background = Color3.fromRGB(50, 50, 50),
        Outline = Color3.fromRGB(0, 0, 0),
        Text = Color3.fromRGB(255, 255, 255)        -- 白色文字
    }
}

-- 存储所有绘制对象
local HealthBarDrawings = {}

-- 创建血量条绘制对象
local function createHealthBarDrawing()
    local drawing = {
        background = Drawing.new("Square"),
        bar = Drawing.new("Square"),
        outline = Drawing.new("Square"),
        text = Drawing.new("Text")
    }
    
    -- 背景设置
    drawing.background.Thickness = 1
    drawing.background.Filled = true
    drawing.background.Color = ColorPresets.Common.Background
    
    -- 血量条设置
    drawing.bar.Thickness = 1
    drawing.bar.Filled = true
    
    -- 边框设置
    drawing.outline.Thickness = 2
    drawing.outline.Filled = false
    drawing.outline.Color = ColorPresets.Common.Outline
    
    -- 文字设置
    drawing.text.Center = true
    drawing.text.Outline = true
    drawing.text.Font = 2
    drawing.text.Color = ColorPresets.Common.Text
    
    return drawing
end

-- 根据血量获取颜色（修改后的阈值）
local function getHealthColor(humanoid, isKiller)
    local healthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
    
    if isKiller then
        if healthPercent > 50 then
            return ColorPresets.Killer.FullHealth
        elseif healthPercent > 25 then
            return ColorPresets.Killer.HalfHealth
        else
            return ColorPresets.Killer.LowHealth
        end
    else
        -- 幸存者新颜色阈值
        if healthPercent > 75 then
            return ColorPresets.Survivor.FullHealth    -- 满血(75%以上): 青色
        elseif healthPercent > 35 then
            return ColorPresets.Survivor.HalfHealth    -- 半血(35%-75%): 绿色
        else
            return ColorPresets.Survivor.LowHealth     -- 低血(35%以下): 橙色
        end
    end
end

-- 更新血量条（优化后不显示自身血条）
local function updateHealthBars()
    local camera = workspace.CurrentCamera
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    
    -- 处理幸存者
    if HealthBarSettings.ShowSurvivorBars then
        local survivors = workspace.Players:FindFirstChild("Survivors")
        if survivors then
            for _, survivor in ipairs(survivors:GetChildren()) do
                if survivor:IsA("Model") and survivor ~= localPlayer.Character then  -- 不显示自身血条
                    local humanoid = survivor:FindFirstChildOfClass("Humanoid")
                    local head = survivor:FindFirstChild("Head")
                    
                    if humanoid and head then
                        -- 获取或创建绘制对象
                        if not HealthBarDrawings[survivor] then
                            HealthBarDrawings[survivor] = createHealthBarDrawing()
                        end
                        
                        local drawing = HealthBarDrawings[survivor]
                        local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                        
                        if onScreen then
                            -- 计算血量百分比
                            local healthPercent = math.floor((humanoid.Health / humanoid.MaxHealth) * 100)
                            local healthBarWidth = HealthBarSettings.BarWidth * (healthPercent / 100)
                            
                            -- 设置位置
                            local barPos = Vector2.new(
                                screenPos.X + HealthBarSettings.BarOffset.X - (HealthBarSettings.BarWidth / 2),
                                screenPos.Y + HealthBarSettings.BarOffset.Y
                            )
                            
                            -- 背景和边框
                            drawing.background.Size = Vector2.new(HealthBarSettings.BarWidth, HealthBarSettings.BarHeight)
                            drawing.background.Position = barPos
                            drawing.background.Visible = true
                            
                            drawing.outline.Size = Vector2.new(HealthBarSettings.BarWidth, HealthBarSettings.BarHeight)
                            drawing.outline.Position = barPos
                            drawing.outline.Visible = true
                            
                            -- 血量条（使用新颜色方案）
                            drawing.bar.Color = getHealthColor(humanoid, false)
                            drawing.bar.Size = Vector2.new(healthBarWidth, HealthBarSettings.BarHeight)
                            drawing.bar.Position = barPos
                            drawing.bar.Visible = true
                            
                            -- 文字
                            drawing.text.Text = tostring(healthPercent) .. "%"
                            drawing.text.Size = HealthBarSettings.TextSize
                            drawing.text.Position = Vector2.new(
                                screenPos.X + HealthBarSettings.TextOffset.X,
                                screenPos.Y + HealthBarSettings.TextOffset.Y
                            )
                            drawing.text.Visible = true
                        else
                            -- 不在屏幕内则隐藏
                            for _, obj in pairs(drawing) do
                                obj.Visible = false
                            end
                        end
                    end
                end
            end
        end
    end
    
    -- 处理杀手
    if HealthBarSettings.ShowKillerBars then
        local killers = workspace.Players:FindFirstChild("Killers")
        if killers then
            for _, killer in ipairs(killers:GetChildren()) do
                if killer:IsA("Model") then
                    local humanoid = killer:FindFirstChildOfClass("Humanoid")
                    local head = killer:FindFirstChild("Head")
                    
                    if humanoid and head then
                        -- 获取或创建绘制对象
                        if not HealthBarDrawings[killer] then
                            HealthBarDrawings[killer] = createHealthBarDrawing()
                        end
                        
                        local drawing = HealthBarDrawings[killer]
                        local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                        
                        if onScreen then
                            -- 计算血量百分比
                            local healthPercent = math.floor((humanoid.Health / humanoid.MaxHealth) * 100)
                            local healthBarWidth = HealthBarSettings.BarWidth * (healthPercent / 100)
                            
                            -- 设置位置
                            local barPos = Vector2.new(
                                screenPos.X + HealthBarSettings.BarOffset.X - (HealthBarSettings.BarWidth / 2),
                                screenPos.Y + HealthBarSettings.BarOffset.Y
                            )
                            
                            -- 背景和边框
                            drawing.background.Size = Vector2.new(HealthBarSettings.BarWidth, HealthBarSettings.BarHeight)
                            drawing.background.Position = barPos
                            drawing.background.Visible = true
                            
                            drawing.outline.Size = Vector2.new(HealthBarSettings.BarWidth, HealthBarSettings.BarHeight)
                            drawing.outline.Position = barPos
                            drawing.outline.Visible = true
                            
                            -- 血量条
                            drawing.bar.Color = getHealthColor(humanoid, true)
                            drawing.bar.Size = Vector2.new(healthBarWidth, HealthBarSettings.BarHeight)
                            drawing.bar.Position = barPos
                            drawing.bar.Visible = true
                            
                            -- 文字
                            drawing.text.Text = tostring(healthPercent) .. "%"
                            drawing.text.Size = HealthBarSettings.TextSize
                            drawing.text.Position = Vector2.new(
                                screenPos.X + HealthBarSettings.TextOffset.X,
                                screenPos.Y + HealthBarSettings.TextOffset.Y
                            )
                            drawing.text.Visible = true
                        else
                            -- 不在屏幕内则隐藏
                            for _, obj in pairs(drawing) do
                                obj.Visible = false
                            end
                        end
                    end
                end
            end
        end
    end
end

-- 清理血量条
local function cleanupHealthBars()
    for _, drawing in pairs(HealthBarDrawings) do
        for _, obj in pairs(drawing) do
            if obj then
                obj:Remove()
            end
        end
    end
    HealthBarDrawings = {}
end

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "血量显示",
    Value = false,
    Callback = function(enabled) 
if enabled then
            -- 初始化连接
            if not HealthBarSettings.connection then
                HealthBarSettings.connection = game:GetService("RunService").RenderStepped:Connect(updateHealthBars)
            end
            
            -- 监听角色移除
            if not HealthBarSettings.removedConnection then
                HealthBarSettings.removedConnection = workspace.DescendantRemoving:Connect(function(descendant)
                    if HealthBarDrawings[descendant] then
                        for _, obj in pairs(HealthBarDrawings[descendant]) do
                            obj:Remove()
                        end
                        HealthBarDrawings[descendant] = nil
                    end
                end)
            end
        else
            -- 关闭连接
            if HealthBarSettings.connection then
                HealthBarSettings.connection:Disconnect()
                HealthBarSettings.connection = nil
            end
            
            if HealthBarSettings.removedConnection then
                HealthBarSettings.removedConnection:Disconnect()
                HealthBarSettings.removedConnection = nil
            end
            
            -- 清理绘制对象
            cleanupHealthBars()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启血量显示" or "已关闭血量显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者",
    Value = false,
    Callback = function(enabled) 
HealthBarSettings.ShowSurvivorBars = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启幸存者显示" or "已关闭幸存者显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手",
    Value = false,
    Callback = function(enabled) 
HealthBarSettings.ShowKillerBars = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启杀手显示" or "已关闭杀手显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "血量显示宽度",
    Value = { Min = 50, Max = 200, Default = 100 },
    Callback = function(value)
        HealthBarSettings.BarWidth = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "血量显示高度",
    Value = { Min = 3, Max = 15, Default = 5 },
    Callback = function(value)
        HealthBarSettings.BarHeight = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "文字显示大小",
    Value = { Min = 10, Max = 20, Default = 14 },
    Callback = function(value)
        HealthBarSettings.BarWidth = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "偏移位置",
    Value = { Min = 50, Max = 200, Default = 100 },
    Callback = function(value)
        HealthBarSettings.BarOffset = Vector2.new(HealthBarSettings.BarOffset.X, value)
        HealthBarSettings.TextOffset = Vector2.new(HealthBarSettings.TextOffset.X, value - 10)
    end
})

-- 3D方框绘制设置
local Box3DSettings = {
    -- 基本设置
    Enabled = false,
    ShowSurvivorBoxes = true,
    ShowKillerBoxes = true,
    
    -- 颜色设置
    SurvivorColor = Color3.fromRGB(0, 255, 255), -- 青色
    KillerColor = Color3.fromRGB(255, 0, 0),     -- 红色
    UseTeamColor = true,
    
    -- 样式设置
    Thickness = 1,
    Transparency = 0.7,
    BoxHeightOffset = 0.5,
    
    -- 比例设置
    SurvivorBoxScale = 1.0,
    KillerBoxScale = 1.2,
    
    -- 宽度调节
    LeftWidthScale = 1.0,
    RightWidthScale = 1.0,
    
    -- 深度调节 (加强版)
    FrontExtend = 1.0,
    BackExtend = 1.0,
    FrontExtendMultiplier = 1.0,  -- 前延伸倍数
    BackExtendMultiplier = 1.0,   -- 后延伸倍数
    
    -- 高度调节
    HeadOffset = 1.5,
    FootOffset = 0.2,
    BoxHeightScale = 1.0,         -- 方框高度比例
    VerticalOffset = 0,           -- 垂直偏移
    
    -- 连接线
    connection = nil,
    removedConnection = nil
}

-- 存储所有3D方框绘制对象
local Box3DDrawings = {}

-- 创建3D方框绘制对象
local function create3DBoxDrawing()
    local drawing = {
        lines = {},
        visible = false
    }
    
    for i = 1, 12 do
        drawing.lines[i] = Drawing.new("Line")
        drawing.lines[i].Thickness = Box3DSettings.Thickness
        drawing.lines[i].Transparency = Box3DSettings.Transparency
        drawing.lines[i].Visible = false
    end
    
    return drawing
end

-- 计算模型的3D边界框（全方位调节）
local function calculateModelBoundingBox(model, isKiller)
    local rootPart = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("Torso") or model:FindFirstChild("UpperTorso")
    local head = model:FindFirstChild("Head")
    
    if rootPart then
        local size = rootPart.Size
        local cframe = rootPart.CFrame
        
        -- 应用比例调整
        local scale = isKiller and Box3DSettings.KillerBoxScale or Box3DSettings.SurvivorBoxScale
        size = size * scale
        
        -- 计算基础高度并应用高度比例
        local baseHeight = 5
        if head then
            baseHeight = (head.Position.Y - rootPart.Position.Y) * 2
        end
        local height = (baseHeight + Box3DSettings.HeadOffset + Box3DSettings.FootOffset) * Box3DSettings.BoxHeightScale
        
        -- 调整左右宽度
        local leftOffset = (size.X/2) * Box3DSettings.LeftWidthScale
        local rightOffset = (size.X/2) * Box3DSettings.RightWidthScale
        
        -- 调整前后延伸 (加强版)
        local frontOffset = (size.Z/2) * Box3DSettings.FrontExtend * Box3DSettings.FrontExtendMultiplier
        local backOffset = (size.Z/2) * Box3DSettings.BackExtend * Box3DSettings.BackExtendMultiplier
        
        -- 计算最小和最大点
        local min = Vector3.new(
            cframe.Position.X - leftOffset,
            cframe.Position.Y - height/2 + Box3DSettings.FootOffset,
            cframe.Position.Z - backOffset
        )
        
        local max = Vector3.new(
            cframe.Position.X + rightOffset,
            cframe.Position.Y + height/2 + Box3DSettings.HeadOffset,
            cframe.Position.Z + frontOffset
        )
        
        -- 应用高度偏移和垂直偏移
        min = Vector3.new(min.X, min.Y + Box3DSettings.BoxHeightOffset + Box3DSettings.VerticalOffset, min.Z)
        max = Vector3.new(max.X, max.Y + Box3DSettings.BoxHeightOffset + Box3DSettings.VerticalOffset, max.Z)
        
        return min, max
    else
        -- 回退到遍历所有部件的方法
        local min = Vector3.new(math.huge, math.huge, math.huge)
        local max = Vector3.new(-math.huge, -math.huge, -math.huge)
        
        for _, part in ipairs(model:GetDescendants()) do
            if part:IsA("BasePart") then
                local cframe = part.CFrame
                local size = part.Size
                
                local scale = isKiller and Box3DSettings.KillerBoxScale or Box3DSettings.SurvivorBoxScale
                size = size * scale
                
                -- 调整左右宽度
                local leftOffset = (size.X/2) * Box3DSettings.LeftWidthScale
                local rightOffset = (size.X/2) * Box3DSettings.RightWidthScale
                
                -- 调整前后延伸 (加强版)
                local frontOffset = (size.Z/2) * Box3DSettings.FrontExtend * Box3DSettings.FrontExtendMultiplier
                local backOffset = (size.Z/2) * Box3DSettings.BackExtend * Box3DSettings.BackExtendMultiplier
                
                -- 计算顶点（考虑前后延伸）
                local vertices = {
                    cframe * Vector3.new(rightOffset, (size.Y/2) * Box3DSettings.BoxHeightScale, frontOffset),
                    cframe * Vector3.new(-leftOffset, (size.Y/2) * Box3DSettings.BoxHeightScale, frontOffset),
                    cframe * Vector3.new(rightOffset, (-size.Y/2) * Box3DSettings.BoxHeightScale, frontOffset),
                    cframe * Vector3.new(-leftOffset, (-size.Y/2) * Box3DSettings.BoxHeightScale, frontOffset),
                    cframe * Vector3.new(rightOffset, (size.Y/2) * Box3DSettings.BoxHeightScale, -backOffset),
                    cframe * Vector3.new(-leftOffset, (size.Y/2) * Box3DSettings.BoxHeightScale, -backOffset),
                    cframe * Vector3.new(rightOffset, (-size.Y/2) * Box3DSettings.BoxHeightScale, -backOffset),
                    cframe * Vector3.new(-leftOffset, (-size.Y/2) * Box3DSettings.BoxHeightScale, -backOffset)
                }
                
                -- 更新最小和最大点
                for _, vertex in ipairs(vertices) do
                    min = Vector3.new(
                        math.min(min.X, vertex.X),
                        math.min(min.Y, vertex.Y),
                        math.min(min.Z, vertex.Z)
                    )
                    max = Vector3.new(
                        math.max(max.X, vertex.X),
                        math.max(max.Y, vertex.Y),
                        math.max(max.Z, vertex.Z)
                    )
                end
            end
        end
        
        -- 应用高度偏移和垂直偏移
        min = Vector3.new(min.X, min.Y + Box3DSettings.BoxHeightOffset + Box3DSettings.VerticalOffset, min.Z)
        max = Vector3.new(max.X, max.Y + Box3DSettings.BoxHeightOffset + Box3DSettings.VerticalOffset, max.Z)
        
        return min, max
    end
end

-- 更新单个3D方框
local function updateSingle3DBox(model, drawing, color, isKiller)
    local camera = workspace.CurrentCamera
    local min, max = calculateModelBoundingBox(model, isKiller)
    
    -- 计算立方体的8个顶点
    local vertices = {
        Vector3.new(max.X, max.Y, max.Z), -- 右上后
        Vector3.new(min.X, max.Y, max.Z), -- 左上后
        Vector3.new(max.X, min.Y, max.Z), -- 右下后
        Vector3.new(min.X, min.Y, max.Z), -- 左下后
        Vector3.new(max.X, max.Y, min.Z), -- 右上前
        Vector3.new(min.X, max.Y, min.Z), -- 左上前
        Vector3.new(max.X, min.Y, min.Z), -- 右下前
        Vector3.new(min.X, min.Y, min.Z)  -- 左下前
    }
    
    -- 转换顶点到屏幕空间
    local screenVertices = {}
    local anyVisible = false
    
    for i, vertex in ipairs(vertices) do
        local screenPos, onScreen = camera:WorldToViewportPoint(vertex)
        screenVertices[i] = Vector2.new(screenPos.X, screenPos.Y)
        if onScreen then anyVisible = true end
    end
    
    -- 设置线条属性
    for _, line in pairs(drawing.lines) do
        line.Color = color
        line.Thickness = Box3DSettings.Thickness
        line.Transparency = Box3DSettings.Transparency
    end
    
    -- 绘制立方体边线
    if anyVisible then
        -- 前面4条边
        drawing.lines[1].From = screenVertices[5] drawing.lines[1].To = screenVertices[6] -- 上面前
        drawing.lines[2].From = screenVertices[6] drawing.lines[2].To = screenVertices[8] -- 左边前
        drawing.lines[3].From = screenVertices[8] drawing.lines[3].To = screenVertices[7] -- 下面前
        drawing.lines[4].From = screenVertices[7] drawing.lines[4].To = screenVertices[5] -- 右边前
        
        -- 后面4条边
        drawing.lines[5].From = screenVertices[1] drawing.lines[5].To = screenVertices[2] -- 上面后
        drawing.lines[6].From = screenVertices[2] drawing.lines[6].To = screenVertices[4] -- 左边后
        drawing.lines[7].From = screenVertices[4] drawing.lines[7].To = screenVertices[3] -- 下面后
        drawing.lines[8].From = screenVertices[3] drawing.lines[8].To = screenVertices[1] -- 右边后
        
        -- 连接前后面的4条边
        drawing.lines[9].From = screenVertices[1] drawing.lines[9].To = screenVertices[5] -- 右上
        drawing.lines[10].From = screenVertices[2] drawing.lines[10].To = screenVertices[6] -- 左上
        drawing.lines[11].From = screenVertices[3] drawing.lines[11].To = screenVertices[7] -- 右下
        drawing.lines[12].From = screenVertices[4] drawing.lines[12].To = screenVertices[8] -- 左下
        
        -- 显示所有线条
        for _, line in pairs(drawing.lines) do
            line.Visible = true
        end
        
        drawing.visible = true
    else
        if drawing.visible then
            for _, line in pairs(drawing.lines) do
                line.Visible = false
            end
            drawing.visible = false
        end
    end
end

-- 更新所有3D方框
local function update3DBoxes()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local camera = workspace.CurrentCamera
    
    -- 先隐藏所有现有的方框
    for model, drawing in pairs(Box3DDrawings) do
        if not model or not model.Parent then
            -- 模型已不存在，清理绘制对象
            for _, line in pairs(drawing.lines) do
                line:Remove()
            end
            Box3DDrawings[model] = nil
        else
            -- 暂时隐藏
            for _, line in pairs(drawing.lines) do
                line.Visible = false
            end
            drawing.visible = false
        end
    end
    
    -- 处理幸存者方框
    if Box3DSettings.ShowSurvivorBoxes then
        local survivors = workspace:FindFirstChild("Survivors") or workspace.Players:FindFirstChild("Survivors")
        if survivors then
            for _, survivor in ipairs(survivors:GetChildren()) do
                if survivor:IsA("Model") and survivor ~= localPlayer.Character then
                    -- 获取或创建绘制对象
                    if not Box3DDrawings[survivor] then
                        Box3DDrawings[survivor] = create3DBoxDrawing()
                    end
                    
                    updateSingle3DBox(survivor, Box3DDrawings[survivor], Box3DSettings.SurvivorColor, false)
                end
            end
        end
        
        -- 额外检查玩家列表中的幸存者
        for _, player in ipairs(players:GetPlayers()) do
            if player ~= localPlayer and player.Character and not player.Character:FindFirstChild("IsKiller") then
                if not Box3DDrawings[player.Character] then
                    Box3DDrawings[player.Character] = create3DBoxDrawing()
                end
                
                updateSingle3DBox(player.Character, Box3DDrawings[player.Character], Box3DSettings.SurvivorColor, false)
            end
        end
    end
    
    -- 处理杀手方框
    if Box3DSettings.ShowKillerBoxes then
        local killers = workspace:FindFirstChild("Killers") or workspace.Players:FindFirstChild("Killers")
        if killers then
            for _, killer in ipairs(killers:GetChildren()) do
                if killer:IsA("Model") and killer ~= localPlayer.Character then
                    -- 获取或创建绘制对象
                    if not Box3DDrawings[killer] then
                        Box3DDrawings[killer] = create3DBoxDrawing()
                    end
                    
                    updateSingle3DBox(killer, Box3DDrawings[killer], Box3DSettings.KillerColor, true)
                end
            end
        end
        
        -- 额外检查玩家列表中的杀手
        for _, player in ipairs(players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("IsKiller") then
                if not Box3DDrawings[player.Character] then
                    Box3DDrawings[player.Character] = create3DBoxDrawing()
                end
                
                updateSingle3DBox(player.Character, Box3DDrawings[player.Character], Box3DSettings.KillerColor, true)
            end
        end
    end
end

-- 清理3D方框
local function cleanup3DBoxes()
    for _, drawing in pairs(Box3DDrawings) do
        if drawing then
            for _, line in pairs(drawing.lines) do
                line:Remove()
            end
        end
    end
    Box3DDrawings = {}
end

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "3D框显示",
    Value = false,
    Callback = function(enabled) 
Box3DSettings.Enabled = enabled
        if enabled then
            -- 初始化连接
            if not Box3DSettings.connection then
                Box3DSettings.connection = game:GetService("RunService").RenderStepped:Connect(update3DBoxes)
            end
            
            -- 监听角色移除
            if not Box3DSettings.removedConnection then
                Box3DSettings.removedConnection = workspace.DescendantRemoving:Connect(function(descendant)
                    if Box3DDrawings[descendant] then
                        for _, line in pairs(Box3DDrawings[descendant].lines) do
                            line:Remove()
                        end
                        Box3DDrawings[descendant] = nil
                    end
                end)
            end
        else
            -- 关闭连接
            if Box3DSettings.connection then
                Box3DSettings.connection:Disconnect()
                Box3DSettings.connection = nil
            end
            
            if Box3DSettings.removedConnection then
                Box3DSettings.removedConnection:Disconnect()
                Box3DSettings.removedConnection = nil
            end
            
            -- 清理绘制对象
            cleanup3DBoxes()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启3D框显示" or "已关闭3D框显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者",
    Value = false,
    Callback = function(enabled) 
Box3DSettings.ShowSurvivorBoxes = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启幸存者显示" or "已关闭幸存者显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手",
    Value = false,
    Callback = function(enabled) 
Box3DSettings.ShowKillerBoxes = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启杀手显示" or "已关闭杀手显示",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框粗细程度",
    Value = { Min = 1, Max = 5, Default = 1 },
    Callback = function(value)
        Box3DSettings.Thickness = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框透明度",
    Value = { Min = 0, Max = 1, Default = 0.7 },
    Callback = function(value)
        Box3DSettings.Transparency = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框高度偏移程度",
    Value = { Min = 0, Max = 2, Default = 0.5 },
    Callback = function(value)
        Box3DSettings.BoxHeightOffset = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框高度比例",
    Value = { Min = 0.5, Max = 2.5, Default = 1.2 },
    Callback = function(value)
        Box3DSettings.Thickness = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框垂直偏移程度",
    Value = { Min = -5, Max = 5, Default = -0.5 },
    Callback = function(value)
        Box3DSettings.VerticalOffset = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "幸存者3D框比例",
    Value = { Min = 1.7, Max = 2, Default = 1.7 },
    Callback = function(value)
        Box3DSettings.SurvivorBoxScale = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "杀手3D框比例",
    Value = { Min = 1.7, Max = 2, Default = 1.7 },
    Callback = function(value)
        Box3DSettings.KillerBoxScale = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框左宽比例",
    Value = { Min = 1.0, Max = 2, Default = 1.0 },
    Callback = function(value)
        Box3DSettings.LeftWidthScale = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框右宽比例",
    Value = { Min = 0.9, Max = 2, Default = 0.9 },
    Callback = function(value)
        Box3DSettings.RightWidthScale = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框前延伸基础值",
    Value = { Min = 1.9, Max = 2, Default = 1.9 },
    Callback = function(value)
        Box3DSettings.FrontExtend = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框后延伸基础值",
    Value = { Min = 1.8, Max = 2, Default = 1.8 },
    Callback = function(value)
        Box3DSettings.BackExtend = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框前延伸倍数",
    Value = { Min = 1.0, Max = 3.0, Default = 1.0 },
    Callback = function(value)
        Box3DSettings.FrontExtendMultiplier = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "3D框后延伸倍数",
    Value = { Min = 1.0, Max = 3.0, Default = 1.0 },
    Callback = function(value)
        Box3DSettings.BackExtendMultiplier = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "头部偏移",
    Value = { Min = 1.5, Max = 3, Default = 1.5 },
    Callback = function(value)
        Box3DSettings.HeadOffset = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "脚步偏移",
    Value = { Min = 0.2, Max = 1, Default = 0.2 },
    Callback = function(value)
        Box3DSettings.FootOffset = value
    end
})

-- 名称绘制设置
local NameTagSettings = {
    ShowSurvivorNames = true,
    ShowKillerNames = true,
    BaseTextSize = 14,
    MinTextSize = 10,
    MaxTextSize = 20,
    TextOffset = Vector3.new(0, 3, 0), -- 头顶上方偏移
    DistanceScale = {
        MinDistance = 10,
        MaxDistance = 50
    },
    SurvivorColor = Color3.fromRGB(0, 191, 255), -- 幸存者蓝色
    KillerColor = Color3.fromRGB(255, 0, 0),     -- 杀手红色
    OutlineColor = Color3.fromRGB(0, 0, 0),       -- 文字描边颜色
    ShowDistance = true                          -- 是否显示距离
}

-- 存储所有名称绘制对象
local NameTagDrawings = {}

-- 创建名称绘制对象
local function createNameTagDrawing()
    local drawing = Drawing.new("Text")
    drawing.Size = NameTagSettings.BaseTextSize
    drawing.Center = true
    drawing.Outline = true
    drawing.OutlineColor = NameTagSettings.OutlineColor
    drawing.Font = 2  -- 使用更清晰的字体
    return drawing
end

-- 计算头顶位置
local function getHeadPosition(character)
    local head = character:FindFirstChild("Head")
    if head then
        local headHeight = head.Size.Y
        return head.Position + Vector3.new(0, headHeight + 0.5, 0)  -- 头顶上方0.5单位
    end
    return character:GetPivot().Position
end

-- 更新名称标签
local function updateNameTags()
    local camera = workspace.CurrentCamera
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local localCharacter = localPlayer.Character
    local localRoot = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")

    if not localRoot then return end

    -- 处理幸存者名称
    if NameTagSettings.ShowSurvivorNames then
        local survivors = workspace.Players:FindFirstChild("Survivors")
        if survivors then
            for _, survivor in ipairs(survivors:GetChildren()) do
                if survivor:IsA("Model") and survivor ~= localCharacter then
                    local humanoid = survivor:FindFirstChildOfClass("Humanoid")
                    
                    if humanoid and humanoid.Health > 0 then  -- 只显示活着的玩家
                        -- 获取或创建绘制对象
                        if not NameTagDrawings[survivor] then
                            NameTagDrawings[survivor] = createNameTagDrawing()
                        end
                        
                        local drawing = NameTagDrawings[survivor]
                        local headPos = getHeadPosition(survivor)
                        local screenPos, onScreen = camera:WorldToViewportPoint(headPos + NameTagSettings.TextOffset)
                        
                        if onScreen then
                            -- 计算距离和缩放比例
                            local distance = (headPos - localRoot.Position).Magnitude
                            local scale = math.clamp(
                                1 - (distance - NameTagSettings.DistanceScale.MinDistance) / 
                                (NameTagSettings.DistanceScale.MaxDistance - NameTagSettings.DistanceScale.MinDistance), 
                                0.3, 1  -- 最小缩放0.3倍
                            )
                            
                            -- 动态调整文字大小
                            local textSize = math.floor(NameTagSettings.BaseTextSize * scale)
                            textSize = math.clamp(textSize, NameTagSettings.MinTextSize, NameTagSettings.MaxTextSize)
                            
                            -- 设置显示文本
                            local displayText = survivor.Name
                            if NameTagSettings.ShowDistance then
                                displayText = string.format("%s [%d]", survivor.Name, math.floor(distance))
                            end
                            
                            -- 设置绘制属性
                            drawing.Text = displayText
                            drawing.Color = NameTagSettings.SurvivorColor
                            drawing.Size = textSize
                            drawing.Position = Vector2.new(screenPos.X, screenPos.Y)
                            drawing.Visible = true
                        else
                            drawing.Visible = false
                        end
                    end
                end
            end
        end
    end

    -- 处理杀手名称
    if NameTagSettings.ShowKillerNames then
        local killers = workspace.Players:FindFirstChild("Killers")
        if killers then
            for _, killer in ipairs(killers:GetChildren()) do
                if killer:IsA("Model") then
                    local humanoid = killer:FindFirstChildOfClass("Humanoid")
                    
                    if humanoid and humanoid.Health > 0 then  -- 只显示活着的杀手
                        -- 获取或创建绘制对象
                        if not NameTagDrawings[killer] then
                            NameTagDrawings[killer] = createNameTagDrawing()
                        end
                        
                        local drawing = NameTagDrawings[killer]
                        local headPos = getHeadPosition(killer)
                        local screenPos, onScreen = camera:WorldToViewportPoint(headPos + NameTagSettings.TextOffset)
                        
                        if onScreen then
                            -- 计算距离和缩放比例
                            local distance = (headPos - localRoot.Position).Magnitude
                            local scale = math.clamp(
                                1 - (distance - NameTagSettings.DistanceScale.MinDistance) / 
                                (NameTagSettings.DistanceScale.MaxDistance - NameTagSettings.DistanceScale.MinDistance), 
                                0.3, 1  -- 最小缩放0.3倍
                            )
                            
                            -- 动态调整文字大小
                            local textSize = math.floor(NameTagSettings.BaseTextSize * scale)
                            textSize = math.clamp(textSize, NameTagSettings.MinTextSize, NameTagSettings.MaxTextSize)
                            
                            -- 设置显示文本
                            local displayText = killer.Name
                            if NameTagSettings.ShowDistance then
                                displayText = string.format("%s [%d]", killer.Name, math.floor(distance))
                            end
                            
                            -- 设置绘制属性
                            drawing.Text = displayText
                            drawing.Color = NameTagSettings.KillerColor
                            drawing.Size = textSize
                            drawing.Position = Vector2.new(screenPos.X, screenPos.Y)
                            drawing.Visible = true
                        else
                            drawing.Visible = false
                        end
                    end
                end
            end
        end
    end
end

-- 清理名称标签
local function cleanupNameTags()
    for _, drawing in pairs(NameTagDrawings) do
        if drawing then
            drawing:Remove()
        end
    end
    NameTagDrawings = {}
end

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "玩家名称显示",
    Value = false,
    Callback = function(enabled) 
if enabled then
            -- 初始化连接
            if not NameTagSettings.connection then
                NameTagSettings.connection = game:GetService("RunService").RenderStepped:Connect(updateNameTags)
            end
            
            -- 监听角色移除
            if not NameTagSettings.removedConnection then
                NameTagSettings.removedConnection = game:GetService("Players").PlayerRemoving:Connect(function(player)
                    for model, drawing in pairs(NameTagDrawings) do
                        if model.Name == player.Name then
                            drawing:Remove()
                            NameTagDrawings[model] = nil
                        end
                    end
                end)
            end
        else
            -- 关闭连接
            if NameTagSettings.connection then
                NameTagSettings.connection:Disconnect()
                NameTagSettings.connection = nil
            end
            
            if NameTagSettings.removedConnection then
                NameTagSettings.removedConnection:Disconnect()
                NameTagSettings.removedConnection = nil
            end
            
            -- 清理绘制对象
            cleanupNameTags()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启玩家名称显示" or "已关闭玩家名称显示",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者",
    Value = false,
    Callback = function(enabled) 
NameTagSettings.ShowSurvivorNames = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启幸存者显示" or "已关闭幸存者显示",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手",
    Value = false,
    Callback = function(enabled) 
NameTagSettings.ShowKillerNames = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启杀手显示" or "已关闭杀手显示",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示距离",
    Value = false,
    Callback = function(enabled) 
NameTagSettings.ShowDistance = enabled
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启显示距离" or "已关闭显示距离",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "基础文本显示大小",
    Value = { Min = 10, Max = 20, Default = 14 },
    Callback = function(value)
        NameTagSettings.BaseTextSize = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "最小距离",
    Value = { Min = 5, Max = 200, Default = 10 },
    Callback = function(value)
NameTagSettings.DistanceScale.MinDistance = value
    end
})

local intensitySlider = TabHandles.ESPgn:Slider({
    Title = "最大距离",
    Value = { Min = 30, Max = 500, Default = 50 },
    Callback = function(value)
       NameTagSettings.DistanceScale.MaxDistance = value
    end
})

local LibESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImamGV/Script/main/ESP"))()

local camera = workspace.CurrentCamera
local localPlayer = game:GetService("Players").LocalPlayer
TabHandles.ESPgn:Divider()
sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示幸存者血量（文本）",
    Value = false,
    Callback = function(v) 
if v then
            local sur = workspace.Players.Survivors
            
            local function survivoresp(char)
                local billboard = Instance.new("BillboardGui")
                billboard.Size = UDim2.new(3, 0, 1, 0)
                billboard.StudsOffset = Vector3.new(0, 1.5, 0)
                billboard.Adornee = char.Head
                billboard.Parent = char.Head
                billboard.AlwaysOnTop = true
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.Position = UDim2.new(0, 0, 0, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextScaled = false
                textLabel.Text = "血量: "..char.Humanoid.Health.."/"..char.Humanoid.MaxHealth
                textLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                textLabel.Font = Enum.Font.Arcade
                textLabel.Parent = billboard

              
                local distanceUpdate
                distanceUpdate = game:GetService("RunService").RenderStepped:Connect(function()
                    if char:FindFirstChild("Head") and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (char.Head.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                        
                        local textSize = math.clamp(30 - (distance / 2), 12, 20)
                        textLabel.TextSize = textSize
                    end
                end)

                local healthUpdate = char:FindFirstChild("Humanoid").HealthChanged:Connect(function()
                    textLabel.Text = "血量: "..char:FindFirstChild("Humanoid").Health.."/"..char:FindFirstChild("Humanoid").MaxHealth
                end)

                char:FindFirstChild("Humanoid").Died:Connect(function()
                    distanceUpdate:Disconnect()
                    healthUpdate:Disconnect()
                    textLabel.Text = ""
                end)

                return {billboard = billboard, connections = {distanceUpdate, healthUpdate}}
            end

            getgenv().SurvivorHealthConnections = {
                Added = sur.DescendantAdded:Connect(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                        repeat wait() until v:FindFirstChild("Humanoid")
                        survivoresp(v)
                    end
                end)
            }

            for _,v in pairs(sur:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                    repeat wait() until v:FindFirstChild("Humanoid")
                    survivoresp(v)
                end
            end
        else
            if getgenv().SurvivorHealthConnections then
                getgenv().SurvivorHealthConnections.Added:Disconnect()
            end
            
            for _,v in pairs(workspace.Players.Survivors:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChild("Head") then
                    for _,child in pairs(v.Head:GetChildren()) do
                        if child:IsA("BillboardGui") then
                            child:Destroy()
                        end
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启幸存者血量文本显示" or "已关闭幸存者血量文本显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手血量（文本）",
    Value = false,
    Callback = function(v) 
if v then
            local kil = workspace.Players.Killers
            
            local function killeresp(char)
                local billboard = Instance.new("BillboardGui")
                billboard.Size = UDim2.new(3, 0, 1, 0)
                billboard.StudsOffset = Vector3.new(0, 1.5, 0)
                billboard.Adornee = char.Head
                billboard.Parent = char.Head
                billboard.AlwaysOnTop = true
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.Position = UDim2.new(0, 0, 0, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextScaled = false
                textLabel.Text = "血量: "..char.Humanoid.Health.."/"..char.Humanoid.MaxHealth
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                textLabel.Font = Enum.Font.Arcade
                textLabel.Parent = billboard

                -- 添加距离检测更新
                local distanceUpdate
                distanceUpdate = game:GetService("RunService").RenderStepped:Connect(function()
                    if char:FindFirstChild("Head") and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (char.Head.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                        -- 根据距离动态调整文字大小 (10-30米范围内变化)
                        local textSize = math.clamp(30 - (distance / 2), 12, 20)
                        textLabel.TextSize = textSize
                    end
                end)

                local healthUpdate = char:FindFirstChild("Humanoid").HealthChanged:Connect(function()
                    textLabel.Text = "血量: "..char:FindFirstChild("Humanoid").Health.."/"..char:FindFirstChild("Humanoid").MaxHealth
                end)

                char:FindFirstChild("Humanoid").Died:Connect(function()
                    distanceUpdate:Disconnect()
                    healthUpdate:Disconnect()
                    textLabel.Text = ""
                end)

                return {billboard = billboard, connections = {distanceUpdate, healthUpdate}}
            end

            getgenv().KillerHealthConnections = {
                Added = kil.DescendantAdded:Connect(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                        repeat wait() until v:FindFirstChild("Humanoid")
                        killeresp(v)
                    end
                end)
            }

            for _,v in pairs(kil:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                    repeat wait() until v:FindFirstChild("Humanoid")
                    killeresp(v)
                end
            end
        else
            if getgenv().KillerHealthConnections then
                getgenv().KillerHealthConnections.Added:Disconnect()
            end
            
            for _,v in pairs(workspace.Players.Killers:GetDescendants()) do
                if v:IsA("Model") and v:FindFirstChild("Head") then
                    for _,child in pairs(v.Head:GetChildren()) do
                        if child:IsA("BillboardGui") then
                            child:Destroy()
                        end
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启杀手血量文本显示" or "已关闭杀手血量文本显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示杀手机器人",
    Value = false,
    Callback = function(v) 
if v then
            for _, v in ipairs(workspace:GetDescendants()) do
                if v:IsA("Model") and v.Name == "PizzaDeliveryRig" or v.Name == "Bunny" or v.Name == "Mafiaso1" or v.Name == "Mafiaso2" or v.Name == "Mafiaso3" then
                    LibESP:AddESP(v, "披萨送货员", Color3.fromRGB(255, 52, 179), 14, "Other_ESP")
                elseif v:IsA("Model") and v.Name == "1x1x1x1Zombie" then
                    LibESP:AddESP(v, "1x1x1x1 (僵尸)", Color3.fromRGB(224, 102, 255), 14, "Other_ESP")
                end
            end
            OtherESP = workspace.DescendantAdded:Connect(function(v)
                if v:IsA("Model") and v.Name == "PizzaDeliveryRig" or v.Name == "Bunny" or v.Name == "Mafiaso1" or v.Name == "Mafiaso2" or v.Name == "Mafiaso3" then
                    LibESP:AddESP(v, "披萨送货员", Color3.fromRGB(255, 52, 179), 14, "Other_ESP")
                elseif v:IsA("Model") and v.Name == "1x1x1x1Zombie" then
                    LibESP:AddESP(v, "1x1x1x1 (僵尸)", Color3.fromRGB(224, 102, 255), 14, "Other_ESP")
                end
            end)
        else
            OtherESP:Disconnect()
            LibESP:Delete("Other_ESP")
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启杀手机器人显示" or "已关闭杀手机器人显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})
TabHandles.ESPgn:Divider()
sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示发电机",
    Value = false,
    Callback = function(enabled) 
-- 将 generatorData 移到回调函数内部，确保每次开启都是独立的作用域
        local generatorData = {}
        
        if enabled then
            local scanInterval = 0.5 
            local lastScanTime = 0
            
            local distanceSettings = {
                MinDistance = 5,
                MaxDistance = 100,
                MinScale = 0.8,
                MaxScale = 1.5,
                MinTextSize = 8,
                MaxTextSize = 10
            }
            
            local function updateGeneratorESP(gen, data)
                if not gen or not gen:FindFirstChild("Main") then return end
                
                local character = game:GetService("Players").LocalPlayer.Character
                local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
                
                if gen:FindFirstChild("Progress") then
                    local progress = gen.Progress.Value
                    if progress >= 99 then
                        if data.billboard then data.billboard:Destroy() end
                        if data.distanceBillboard then data.distanceBillboard:Destroy() end
                        if data.highlight then data.highlight:Destroy() end
                        generatorData[gen] = nil
                        return
                    end
                    
                    if data.textLabel then
                        data.textLabel.Text = string.format("电机进度: %d%%", progress)
                    end
                    
                    if humanoidRootPart and data.distanceLabel then
                        local distance = (gen.Main.Position - humanoidRootPart.Position).Magnitude
                        data.distanceLabel.Text = string.format("距离: %d米", math.floor(distance))
                        
                        local distanceRatio = math.clamp(
                            (distance - distanceSettings.MinDistance) / 
                            (distanceSettings.MaxDistance - distanceSettings.MinDistance),
                            0, 1
                        )
                        
                        local scale = distanceSettings.MinScale + 
                            distanceRatio * (distanceSettings.MaxScale - distanceSettings.MinScale)
                        
                        local textSize = distanceSettings.MinTextSize + 
                            distanceRatio * (distanceSettings.MaxTextSize - distanceSettings.MinTextSize)
                        
                        if data.billboard then data.billboard.Size = UDim2.new(4 * scale, 0, 1 * scale, 0) end
                        if data.distanceBillboard then data.distanceBillboard.Size = UDim2.new(4 * scale, 0, 1 * scale, 0) end
                        if data.textLabel then data.textLabel.TextSize = textSize end
                        if data.distanceLabel then data.distanceLabel.TextSize = textSize end
                        
                        local transparency = math.clamp((distance - 50) / 100, 0, 0.4)
                        if data.textLabel then data.textLabel.TextTransparency = transparency end
                        if data.distanceLabel then data.distanceLabel.TextTransparency = transparency end
                        if data.highlight then data.highlight.FillTransparency = 0.85 + (transparency * 0.5) end
                    end
                end
            end
            
            local function createGeneratorESP(gen)
                if not gen or not gen:FindFirstChild("Main") or generatorData[gen] then return end
                
                local billboard = Instance.new("BillboardGui")
                billboard.Name = "GeneratorESP"
                billboard.Size = UDim2.new(4, 0, 1, 0)
                billboard.StudsOffset = Vector3.new(0, 2.5, 0)
                billboard.Adornee = gen.Main
                billboard.Parent = gen.Main
                billboard.AlwaysOnTop = true
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 0.5, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextScaled = false
                textLabel.Text = "电机加载中..."
                textLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
                textLabel.Font = Enum.Font.Arcade
                textLabel.TextStrokeTransparency = 0
                textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                textLabel.TextSize = 8
                textLabel.Parent = billboard
                
                local distanceBillboard = Instance.new("BillboardGui")
                distanceBillboard.Name = "GeneratorDistanceESP"
                distanceBillboard.Size = UDim2.new(4, 0, 1, 0)
                distanceBillboard.StudsOffset = Vector3.new(0, 3.5, 0)
                distanceBillboard.Adornee = gen.Main
                distanceBillboard.Parent = gen.Main
                distanceBillboard.AlwaysOnTop = true
                
                local distanceLabel = Instance.new("TextLabel")
                distanceLabel.Size = UDim2.new(1, 0, 0.5, 0)
                distanceLabel.BackgroundTransparency = 1
                distanceLabel.TextScaled = false
                distanceLabel.Text = "计算距离中..."
                distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                distanceLabel.Font = Enum.Font.Arcade
                distanceLabel.TextStrokeTransparency = 0
                distanceLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                distanceLabel.TextSize = 8
                distanceLabel.Parent = distanceBillboard
                
                local highlight = Instance.new("Highlight")
                highlight.Name = "GeneratorHighlight"
                highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                highlight.Enabled = true
                highlight.OutlineColor = Color3.fromRGB(0, 255, 255)
                highlight.FillColor = Color3.fromRGB(0, 255, 255)
                highlight.FillTransparency = 0.9
                highlight.OutlineTransparency = 0
                highlight.Parent = gen
                
                generatorData[gen] = {
                    billboard = billboard,
                    distanceBillboard = distanceBillboard,
                    textLabel = textLabel,
                    distanceLabel = distanceLabel,
                    highlight = highlight
                }
                
                gen.Destroying:Connect(function()
                    if generatorData[gen] then
                        if generatorData[gen].billboard then generatorData[gen].billboard:Destroy() end
                        if generatorData[gen].distanceBillboard then generatorData[gen].distanceBillboard:Destroy() end
                        if generatorData[gen].highlight then generatorData[gen].highlight:Destroy() end
                        generatorData[gen] = nil
                    end
                end)
            end
            
            local function scanGenerators()
                for _, gen in pairs(workspace:GetDescendants()) do
                    if gen:IsA("Model") and gen:FindFirstChild("Main") and gen.Name == "Generator" then
                        createGeneratorESP(gen)
                    end
                end
            end
            
            local mainConnection = workspace.DescendantAdded:Connect(function(v)
                if v:IsA("Model") and v:FindFirstChild("Main") and v.Name == "Generator" then
                    createGeneratorESP(v)
                end
            end)
            
            local heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
                lastScanTime = lastScanTime + deltaTime
                if lastScanTime >= scanInterval then
                    lastScanTime = 0
                    scanGenerators()
                end
                
                for gen, data in pairs(generatorData) do
                    if gen and gen.Parent then
                        updateGeneratorESP(gen, data)
                    else
                        if data.billboard then data.billboard:Destroy() end
                        if data.distanceBillboard then data.distanceBillboard:Destroy() end
                        if data.highlight then data.highlight:Destroy() end
                        generatorData[gen] = nil
                    end
                end
            end)
            
            -- 存储连接以便之后断开
            generatorData.connections = {
                main = mainConnection,
                heartbeat = heartbeatConnection
            }
        else
            -- 关闭功能时的清理逻辑
            if generatorData.connections then
                for _, connection in pairs(generatorData.connections) do
                    if connection then
                        connection:Disconnect()
                    end
                end
            end
            
            for gen, data in pairs(generatorData) do
                if type(data) == "table" then
                    if data.billboard then data.billboard:Destroy() end
                    if data.distanceBillboard then data.distanceBillboard:Destroy() end
                    if data.highlight then data.highlight:Destroy() end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启发电机显示" or "已关闭发电机显示",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示三角炸弹",
    Value = false,
    Callback = function(v) 
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 0, 255), 14, "SubspaceTripmine_ESP")
end
end
SubspaceTripmineESP = workspace.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 0, 255), 14, "SubspaceTripmine_ESP")
end
end)
else
SubspaceTripmineESP:Disconnect()
LibESP:Delete("SubspaceTripmine_ESP")
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启三角炸弹显示" or "已关闭三角炸弹显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示医疗箱",
    Value = false,
    Callback = function(v) 
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Medkit_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(187, 255, 255), 14, "Medkit_ESP")
end
end
MedkitESP = workspace.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Medkit_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(187, 255, 255), 14, "Medkit_ESP")
end
end)
else
Medkit:Disconnect()
LibESP:Delete("Medkit_ESP")
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启医疗箱显示" or "已关闭医疗箱显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "显示可乐",
    Value = false,
    Callback = function(v) 
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("BloxyCola_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(131, 111, 255), 14, "BloxyCola_ESP")
end
end
ColaESP = workspace.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("BloxyCola_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(131, 111, 255), 14, "BloxyCola_ESP")
end
end)
else
ColaESP:Disconnect()
LibESP:Delete("BloxyCola_ESP")
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启可乐显示" or "已关闭可乐显示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

local LibESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImamGV/Script/main/ESP"))()

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "幸存者ESP",
    Value = false,
    Callback = function(v) 
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 191, 255), 14, "Survival_ESP")
end
end
SurvivalESP = workspace.Players.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 191, 255), 14, "Survival_ESP")
end
end)
else
SurvivalESP:Disconnect()
LibESP:Delete("Survival_ESP")
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启幸存者ESP" or "已关闭幸存者ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "杀手ESP",
    Value = false,
    Callback = function(v) 
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 0, 0), 14, "Killers_ESP")
elseif v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
LibESP:AddESP(v.HumanoidRootPart, "Killer", Color3.fromRGB(255, 0, 0), 14, "Killers_ESP")
end
end
KillersESP = workspace.Players.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killers_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 0, 0), 14, "Killers_ESP")
elseif v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
LibESP:AddESP(v.HumanoidRootPart, "Killer", Color3.fromRGB(255, 0, 0), 14, "Killers_ESP")
end
end)
else
KillersESP:Disconnect()
LibESP:Delete("Killers_ESP")
end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启杀手ESP" or "已关闭杀手ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "2D方框幸存者ESP",
    Value = false,
    Callback = function(v) 
if v then
            local a = workspace:WaitForChild("Players")
            local c = a:WaitForChild("Survivors")
            local d = game:GetService("RunService")
            local e = game:GetService("Players").LocalPlayer
            
            local function f(g, h)
                if not g:IsA("Model") then return end
                if g == e.Character then return end
                local i = g:FindFirstChild("HumanoidRootPart")
                if not i then return end
                if i:FindFirstChild("playeresp") then return end
                
                local j = Instance.new("BillboardGui")
                j.Name = "playeresp"
                j.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                j.Active = true
                j.AlwaysOnTop = true
                j.LightInfluence = 1.000
                j.Size = UDim2.new(3, 0, 5, 0)
                j.Adornee = i
                j.Parent = i
                
                local k = Instance.new("Frame")
                k.Name = "playershow"
                k.BackgroundColor3 = Color3.fromRGB(255, 25, 25)
                k.BackgroundTransparency = 1
                k.Size = UDim2.new(1, 0, 1, 0)
                k.Parent = j
                
                local l = Instance.new("UIStroke")
                l.Color = h
                l.Thickness = 2
                l.Transparency = 0.2
                l.Parent = k
            end
            
            SurvivorESPConnection = d.RenderStepped:Connect(function()
                for m, o in ipairs(c:GetChildren()) do
                    f(o, Color3.fromRGB(0, 255, 0))
                end
            end)
            
            -- 添加新加入的幸存者
            SurvivorAddedConnection = c.ChildAdded:Connect(function(o)
                f(o, Color3.fromRGB(0, 255, 0))
            end)
        else
            if SurvivorESPConnection then
                SurvivorESPConnection:Disconnect()
            end
            if SurvivorAddedConnection then
                SurvivorAddedConnection:Disconnect()
            end
            
            -- 清除所有幸存者ESP
            local a = workspace:WaitForChild("Players")
            local c = a:WaitForChild("Survivors")
            for _, o in ipairs(c:GetChildren()) do
                if o:IsA("Model") then
                    local i = o:FindFirstChild("HumanoidRootPart")
                    if i and i:FindFirstChild("playeresp") then
                        i.playeresp:Destroy()
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启幸存者2D方框ESP" or "已关闭幸存者2D方框ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "2D方框杀手ESP",
    Value = false,
    Callback = function(v) 
if v then
            local a = workspace:WaitForChild("Players")
            local b = a:WaitForChild("Killers")
            local d = game:GetService("RunService")
            local e = game:GetService("Players").LocalPlayer
            
            local function f(g, h)
                if not g:IsA("Model") then return end
                if g == e.Character then return end
                local i = g:FindFirstChild("HumanoidRootPart")
                if not i then return end
                if i:FindFirstChild("playeresp") then return end
                
                local j = Instance.new("BillboardGui")
                j.Name = "playeresp"
                j.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                j.Active = true
                j.AlwaysOnTop = true
                j.LightInfluence = 1.000
                j.Size = UDim2.new(3, 0, 5, 0)
                j.Adornee = i
                j.Parent = i
                
                local k = Instance.new("Frame")
                k.Name = "playershow"
                k.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                k.BackgroundTransparency = 1
                k.Size = UDim2.new(1, 0, 1, 0)
                k.Parent = j
                
                local l = Instance.new("UIStroke")
                l.Color = h
                l.Thickness = 2
                l.Transparency = 0.2
                l.Parent = k
            end
            
            KillerESPConnection = d.RenderStepped:Connect(function()
                for m, o in ipairs(b:GetChildren()) do
                    f(o, Color3.fromRGB(255, 0, 0))
                end
            end)
            
            -- 添加新加入的杀手
            KillerAddedConnection = b.ChildAdded:Connect(function(o)
                f(o, Color3.fromRGB(255, 0, 0))
            end)
        else
            if KillerESPConnection then
                KillerESPConnection:Disconnect()
            end
            if KillerAddedConnection then
                KillerAddedConnection:Disconnect()
            end
            
            -- 清除所有杀手ESP
            local a = workspace:WaitForChild("Players")
            local b = a:WaitForChild("Killers")
            for _, o in ipairs(b:GetChildren()) do
                if o:IsA("Model") then
                    local i = o:FindFirstChild("HumanoidRootPart")
                    if i and i:FindFirstChild("playeresp") then
                        i.playeresp:Destroy()
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启杀手2D方框ESP" or "已关闭杀手2D方框ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.ESPgn:Divider()

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "距离渲染ESP",
    Value = false,
    Callback = function(v) 
if v then
            -- 初始化变量
            local players = game:GetService("Players")
            local run_service = game:GetService("RunService")
            local local_player = players.LocalPlayer
            local camera = workspace.CurrentCamera

            -- 清理旧的ESP
            if getgenv().cyberline_distance_esp then
                for _, text in pairs(getgenv().cyberline_distance_esp) do
                    pcall(function() text:Remove() end)
                end
            end

            getgenv().cyberline_distance_esp = {}

            -- 创建距离标签函数
            local function create_distance_label()
                local text = Drawing.new("Text")
                text.Size = 12
                text.Center = true
                text.Outline = true
                text.Font = 2
                text.Color = Color3.fromRGB(255, 255, 255)
                text.Visible = false
                return text
            end

            -- 主循环
            getgenv().distanceESPConnection = run_service.RenderStepped:Connect(function()
                for _, player in ipairs(players:GetPlayers()) do
                    if player ~= local_player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local root = player.Character.HumanoidRootPart
                        local screen_pos, on_screen = camera:WorldToViewportPoint(root.Position - Vector3.new(0, 2.8, 0))

                        if not getgenv().cyberline_distance_esp[player] then
                            getgenv().cyberline_distance_esp[player] = create_distance_label()
                        end

                        local text = getgenv().cyberline_distance_esp[player]

                        if on_screen then
                            local distance = math.floor((root.Position - camera.CFrame.Position).Magnitude)
                            text.Position = Vector2.new(screen_pos.X, screen_pos.Y)
                            text.Text = tostring(distance) .. "m"
                            text.Visible = true
                        else
                            text.Visible = false
                        end
                    elseif getgenv().cyberline_distance_esp[player] then
                        getgenv().cyberline_distance_esp[player].Visible = false
                    end
                end
            end)
        else
            -- 关闭ESP
            if getgenv().distanceESPConnection then
                getgenv().distanceESPConnection:Disconnect()
            end

            -- 清除所有距离标签
            if getgenv().cyberline_distance_esp then
                for _, text in pairs(getgenv().cyberline_distance_esp) do
                    pcall(function() text:Remove() end)
                end
                getgenv().cyberline_distance_esp = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启距离渲染ESP" or "已关闭距离渲染ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "追踪线",
    Value = false,
    Callback = function(v) 
if v then
            -- 初始化变量
            local players = game:GetService("Players")
            local run_service = game:GetService("RunService")
            local local_player = players.LocalPlayer
            local camera = workspace.CurrentCamera

            -- 清理旧的追踪线
            if getgenv().cyberline_tracers then
                for _, line in pairs(getgenv().cyberline_tracers) do
                    pcall(function() line:Remove() end)
                end
            end

            getgenv().cyberline_tracers = {}

            -- 创建追踪线函数
            local function create_tracer()
                local line = Drawing.new("Line")
                line.Color = Color3.fromRGB(255, 255, 255)
                line.Thickness = 1
                line.Transparency = 1
                line.Visible = false
                return line
            end

            -- 主循环
            getgenv().tracerConnection = run_service.RenderStepped:Connect(function()
                for _, player in ipairs(players:GetPlayers()) do
                    if player ~= local_player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local root_part = player.Character.HumanoidRootPart
                        local screen_pos, on_screen = camera:WorldToViewportPoint(root_part.Position)

                        if not getgenv().cyberline_tracers[player] then
                            getgenv().cyberline_tracers[player] = create_tracer()
                        end

                        local tracer = getgenv().cyberline_tracers[player]

                        if on_screen then
                            -- 修改为从屏幕顶部中心向下绘制
                            tracer.From = Vector2.new(camera.ViewportSize.X / 2, 0)  -- 顶部中心
                            tracer.To = Vector2.new(screen_pos.X, screen_pos.Y)
                            tracer.Visible = true
                        else
                            tracer.Visible = false
                        end
                    elseif getgenv().cyberline_tracers[player] then
                        getgenv().cyberline_tracers[player].Visible = false
                    end
                end
            end)
        else
            -- 关闭追踪
            if getgenv().tracerConnection then
                getgenv().tracerConnection:Disconnect()
            end

            -- 清除所有追踪线
            if getgenv().cyberline_tracers then
                for _, line in pairs(getgenv().cyberline_tracers) do
                    pcall(function() line:Remove() end)
                end
                getgenv().cyberline_tracers = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启追踪线" or "已关闭追踪线",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "血条ESP",
    Value = false,
    Callback = function(v) 
if v then
            -- 初始化变量
            local players = game:GetService("Players")
            local run_service = game:GetService("RunService")
            local local_player = players.LocalPlayer
            local camera = workspace.CurrentCamera

            -- 清理旧的血条
            if getgenv().cyberline_health_bars then
                for _, data in pairs(getgenv().cyberline_health_bars) do
                    pcall(function() data.bar:Remove() end)
                    pcall(function() data.outline:Remove() end)
                end
            end

            getgenv().cyberline_health_bars = {}

            -- 创建血条函数
            local function create_bar()
                local outline = Drawing.new("Square")
                outline.Color = Color3.new(0, 0, 0)
                outline.Filled = true
                outline.Transparency = 1
                outline.Visible = false

                local bar = Drawing.new("Square")
                bar.Color = Color3.fromRGB(0, 255, 0)
                bar.Filled = true
                bar.Transparency = 1
                bar.Visible = false

                return { bar = bar, outline = outline }
            end

            -- 获取角色边界函数
            local function get_bounds(character)
                local min = Vector3.new(math.huge, math.huge, math.huge)
                local max = Vector3.new(-math.huge, -math.huge, -math.huge)
                for _, part in character:GetChildren() do
                    if part:IsA("BasePart") then
                        local pos = part.Position
                        min = Vector3.new(math.min(min.X, pos.X), math.min(min.Y, pos.Y), math.min(min.Z, pos.Z))
                        max = Vector3.new(math.max(max.X, pos.X), math.max(max.Y, pos.Y), math.max(max.Z, pos.Z))
                    end
                end
                return min, max
            end

            -- 主循环
            getgenv().healthBarConnection = run_service.RenderStepped:Connect(function()
                for _, player in ipairs(players:GetPlayers()) do
                    if player ~= local_player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                        if humanoid then
                            local min, max = get_bounds(player.Character)
                            local points = {
                                Vector3.new(min.X, min.Y, min.Z),
                                Vector3.new(min.X, max.Y, min.Z),
                                Vector3.new(max.X, min.Y, min.Z),
                                Vector3.new(max.X, max.Y, min.Z),
                                Vector3.new(min.X, min.Y, max.Z),
                                Vector3.new(min.X, max.Y, max.Z),
                                Vector3.new(max.X, min.Y, max.Z),
                                Vector3.new(max.X, max.Y, max.Z),
                            }

                            local min2d = Vector2.new(math.huge, math.huge)
                            local max2d = Vector2.new(-math.huge, -math.huge)
                            local visible = false

                            for _, point in ipairs(points) do
                                local screen, on_screen = camera:WorldToViewportPoint(point)
                                if on_screen then
                                    visible = true
                                    local pos2d = Vector2.new(screen.X, screen.Y)
                                    min2d = Vector2.new(math.min(min2d.X, pos2d.X), math.min(min2d.Y, pos2d.Y))
                                    max2d = Vector2.new(math.max(max2d.X, pos2d.X), math.max(max2d.Y, pos2d.Y))
                                end
                            end

                            if not getgenv().cyberline_health_bars[player] then
                                getgenv().cyberline_health_bars[player] = create_bar()
                            end

                            local bar = getgenv().cyberline_health_bars[player].bar
                            local outline = getgenv().cyberline_health_bars[player].outline

                            if visible then
                                local height = max2d.Y - min2d.Y
                                local ratio = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                                local bar_height = height * ratio

                                bar.Size = Vector2.new(2, bar_height)
                                bar.Position = Vector2.new(min2d.X - 5, max2d.Y - bar_height)
                                bar.Visible = true
                                bar.Color = Color3.fromRGB(255 * (1 - ratio), 255 * ratio, 0)  -- 根据血量变色

                                outline.Size = Vector2.new(4, height + 2)
                                outline.Position = Vector2.new(min2d.X - 6, min2d.Y - 1)
                                outline.Visible = true
                            else
                                bar.Visible = false
                                outline.Visible = false
                            end
                        end
                    elseif getgenv().cyberline_health_bars[player] then
                        getgenv().cyberline_health_bars[player].bar.Visible = false
                        getgenv().cyberline_health_bars[player].outline.Visible = false
                    end
                end
            end)
        else
            -- 关闭血条显示
            if getgenv().healthBarConnection then
                getgenv().healthBarConnection:Disconnect()
            end

            -- 清除所有血条
            if getgenv().cyberline_health_bars then
                for _, data in pairs(getgenv().cyberline_health_bars) do
                    pcall(function() data.bar:Remove() end)
                    pcall(function() data.outline:Remove() end)
                end
                getgenv().cyberline_health_bars = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启血条ESP" or "已关闭血条ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "骨骼线条ESP",
    Value = false,
    Callback = function(v) 
if v then
            -- 初始化变量
            local players = game:GetService("Players")
            local run_service = game:GetService("RunService")
            local camera = workspace.CurrentCamera
            local local_player = players.LocalPlayer

            -- 清理旧的骨骼线
            if getgenv().cyberline_skeleton then
                for _, parts in pairs(getgenv().cyberline_skeleton) do
                    for _, line in pairs(parts) do
                        pcall(function() line:Remove() end)
                    end
                end
            end

            getgenv().cyberline_skeleton = {}

            -- 创建单条骨骼线函数
            local function create_line()
                local line = Drawing.new("Line")
                line.Color = Color3.new(1, 1, 1)
                line.Thickness = 1
                line.Transparency = 1
                line.Visible = false
                return line
            end

            -- 创建完整骨骼函数
            local function create_skeleton()
                return {
                    head = create_line(),
                    torso = create_line(),
                    left_arm = create_line(),
                    right_arm = create_line(),
                    left_leg = create_line(),
                    right_leg = create_line()
                }
            end

            -- 主循环
            getgenv().skeletonConnection = run_service.RenderStepped:Connect(function()
                for _, player in ipairs(players:GetPlayers()) do
                    if player ~= local_player and player.Character then
                        local char = player.Character
                        local parts = {
                            head = char:FindFirstChild("Head"),
                            upper = char:FindFirstChild("UpperTorso") or char:FindFirstChild("Torso"),
                            lower = char:FindFirstChild("LowerTorso") or char:FindFirstChild("HumanoidRootPart"),
                            left_arm = char:FindFirstChild("LeftUpperArm") or char:FindFirstChild("Left Arm"),
                            right_arm = char:FindFirstChild("RightUpperArm") or char:FindFirstChild("Right Arm"),
                            left_leg = char:FindFirstChild("LeftUpperLeg") or char:FindFirstChild("Left Leg"),
                            right_leg = char:FindFirstChild("RightUpperLeg") or char:FindFirstChild("Right Leg"),
                        }

                        if not getgenv().cyberline_skeleton[player] then
                            getgenv().cyberline_skeleton[player] = create_skeleton()
                        end

                        local skeleton = getgenv().cyberline_skeleton[player]

                        local function to_screen(part)
                            local pos, on_screen = camera:WorldToViewportPoint(part.Position)
                            return Vector2.new(pos.X, pos.Y), on_screen
                        end

                        local all_visible = true
                        for _, part in pairs(parts) do
                            if not part then
                                all_visible = false
                            end
                        end

                        if all_visible then
                            local head_pos, head_on = to_screen(parts.head)
                            local upper_pos, upper_on = to_screen(parts.upper)
                            local lower_pos, lower_on = to_screen(parts.lower)
                            local larm_pos, larm_on = to_screen(parts.left_arm)
                            local rarm_pos, rarm_on = to_screen(parts.right_arm)
                            local lleg_pos, lleg_on = to_screen(parts.left_leg)
                            local rleg_pos, rleg_on = to_screen(parts.right_leg)

                            skeleton.head.From = head_pos
                            skeleton.head.To = upper_pos

                            skeleton.torso.From = upper_pos
                            skeleton.torso.To = lower_pos

                            skeleton.left_arm.From = upper_pos
                            skeleton.left_arm.To = larm_pos

                            skeleton.right_arm.From = upper_pos
                            skeleton.right_arm.To = rarm_pos

                            skeleton.left_leg.From = lower_pos
                            skeleton.left_leg.To = lleg_pos

                            skeleton.right_leg.From = lower_pos
                            skeleton.right_leg.To = rleg_pos

                            for _, line in pairs(skeleton) do
                                line.Visible = true
                            end
                        else
                            for _, line in pairs(skeleton) do
                                line.Visible = false
                            end
                        end
                    elseif getgenv().cyberline_skeleton[player] then
                        for _, line in pairs(getgenv().cyberline_skeleton[player]) do
                            line.Visible = false
                        end
                    end
                end
            end)
        else
            -- 关闭骨骼显示
            if getgenv().skeletonConnection then
                getgenv().skeletonConnection:Disconnect()
            end

            -- 清除所有骨骼线
            if getgenv().cyberline_skeleton then
                for _, parts in pairs(getgenv().cyberline_skeleton) do
                    for _, line in pairs(parts) do
                        pcall(function() line:Remove() end)
                    end
                end
                getgenv().cyberline_skeleton = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启骨骼线条ESP" or "已关闭骨骼线条ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.ESPgn:Toggle({
    Title = "方框ESP",
    Value = false,
    Callback = function(v) 
if v then
            -- 初始化变量
            local players = game:GetService("Players")
            local run_service = game:GetService("RunService")
            local local_player = players.LocalPlayer
            local camera = workspace.CurrentCamera

            -- 清理旧的方框
            if getgenv().cyberline_esp_boxes then
                for _, data in pairs(getgenv().cyberline_esp_boxes) do
                    pcall(function() data.box:Remove() end)
                    pcall(function() data.outline:Remove() end)
                end
            end

            getgenv().cyberline_esp_boxes = {}

            -- 创建方框函数
            local function create_box()
                local outline = Drawing.new("Square")
                outline.Color = Color3.new(0, 0, 0)
                outline.Thickness = 1
                outline.Filled = false
                outline.Transparency = 1
                outline.Visible = false

                local box = Drawing.new("Square")
                box.Color = Color3.fromRGB(255, 255, 255)
                box.Thickness = 1
                box.Filled = false
                box.Transparency = 1
                box.Visible = false

                return { box = box, outline = outline }
            end

            -- 获取角色边界函数
            local function get_bounds(character)
                local min = Vector3.new(math.huge, math.huge, math.huge)
                local max = Vector3.new(-math.huge, -math.huge, -math.huge)
                for _, part in character:GetChildren() do
                    if part:IsA("BasePart") then
                        local pos = part.Position
                        min = Vector3.new(math.min(min.X, pos.X), math.min(min.Y, pos.Y), math.min(min.Z, pos.Z))
                        max = Vector3.new(math.max(max.X, pos.X), math.max(max.Y, pos.Y), math.max(max.Z, pos.Z))
                    end
                end
                return min, max
            end

            -- 主循环
            getgenv().boxESPConnection = run_service.RenderStepped:Connect(function()
                for _, player in ipairs(players:GetPlayers()) do
                    if player ~= local_player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local min, max = get_bounds(player.Character)
                        local points = {
                            Vector3.new(min.X, min.Y, min.Z),
                            Vector3.new(min.X, max.Y, min.Z),
                            Vector3.new(max.X, min.Y, min.Z),
                            Vector3.new(max.X, max.Y, min.Z),
                            Vector3.new(min.X, min.Y, max.Z),
                            Vector3.new(min.X, max.Y, max.Z),
                            Vector3.new(max.X, min.Y, max.Z),
                            Vector3.new(max.X, max.Y, max.Z),
                        }

                        local min2d = Vector2.new(math.huge, math.huge)
                        local max2d = Vector2.new(-math.huge, -math.huge)
                        local visible = false

                        for _, point in ipairs(points) do
                            local screen, on_screen = camera:WorldToViewportPoint(point)
                            if on_screen then
                                visible = true
                                local pos2d = Vector2.new(screen.X, screen.Y)
                                min2d = Vector2.new(math.min(min2d.X, pos2d.X), math.min(min2d.Y, pos2d.Y))
                                max2d = Vector2.new(math.max(max2d.X, pos2d.X), math.max(max2d.Y, pos2d.Y))
                            end
                        end

                        if not getgenv().cyberline_esp_boxes[player] then
                            getgenv().cyberline_esp_boxes[player] = create_box()
                        end

                        local box = getgenv().cyberline_esp_boxes[player].box
                        local outline = getgenv().cyberline_esp_boxes[player].outline

                        if visible then
                            local size = max2d - min2d
                            box.Position = min2d
                            box.Size = size
                            box.Visible = true

                            outline.Position = min2d - Vector2.new(1, 1)
                            outline.Size = size + Vector2.new(2, 2)
                            outline.Visible = true
                        else
                            box.Visible = false
                            outline.Visible = false
                        end
                    elseif getgenv().cyberline_esp_boxes[player] then
                        getgenv().cyberline_esp_boxes[player].box.Visible = false
                        getgenv().cyberline_esp_boxes[player].outline.Visible = false
                    end
                end
            end)
        else
            -- 关闭方框显示
            if getgenv().boxESPConnection then
                getgenv().boxESPConnection:Disconnect()
            end

            -- 清除所有方框
            if getgenv().cyberline_esp_boxes then
                for _, data in pairs(getgenv().cyberline_esp_boxes) do
                    pcall(function() data.box:Remove() end)
                    pcall(function() data.outline:Remove() end)
                end
                getgenv().cyberline_esp_boxes = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启方框ESP" or "已关闭方框ESP",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

-- 杀手靠近提示设置
local KillerWarningSettings = {
    Enabled = false,
    WarningDistance = 100, -- 警告距离(米)
    WarningColor = Color3.fromRGB(255, 0, 0), -- 警告颜色(红色)
    TextSize = 20, -- 文字大小
    BlinkInterval = 0.5, -- 闪烁间隔(秒)
    LastWarningTime = 0, -- 上次警告时间
    WarningCooldown = 5, -- 警告冷却时间(秒)
    WarningSoundId = "rbxassetid://6545327576", -- 警告音效ID
    SoundVolume = 0.5 -- 音效音量
}

-- 存储绘制对象
local warningLabel = Drawing.new("Text")
warningLabel.Visible = false
warningLabel.Center = true
warningLabel.Outline = true
warningLabel.Font = 2 -- 粗体字体
warningLabel.Color = KillerWarningSettings.WarningColor
warningLabel.Size = KillerWarningSettings.TextSize

-- 存储音效对象
local warningSound = Instance.new("Sound")
warningSound.SoundId = KillerWarningSettings.WarningSoundId
warningSound.Volume = KillerWarningSettings.SoundVolume
warningSound.Parent = game:GetService("SoundService")

-- 更新警告显示
local function updateKillerWarning()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local killersFolder = workspace.Players:FindFirstChild("Killers")
    if not killersFolder then return end
    
    local closestDistance = math.huge
    local closestKiller = nil
    
    -- 寻找最近的杀手
    for _, killer in ipairs(killersFolder:GetChildren()) do
        if killer:IsA("Model") and killer:FindFirstChild("HumanoidRootPart") then
            local distance = (character.HumanoidRootPart.Position - killer.HumanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestKiller = killer
            end
        end
    end
    
    -- 检查距离并显示警告
    if closestKiller and closestDistance <= KillerWarningSettings.WarningDistance then
        local currentTime = tick()
        
        -- 闪烁效果
        if currentTime - KillerWarningSettings.LastWarningTime >= KillerWarningSettings.BlinkInterval then
            warningLabel.Visible = not warningLabel.Visible
            KillerWarningSettings.LastWarningTime = currentTime
        end
        
        -- 设置警告文本
        warningLabel.Text = string.format("警告! 杀手 %s 在 %d 米内!", closestKiller.Name, math.floor(closestDistance))
        warningLabel.Position = Vector2.new(
            workspace.CurrentCamera.ViewportSize.X / 2,
            workspace.CurrentCamera.ViewportSize.Y * 0.2
        )
        
        -- 播放警告音效(冷却时间内只播放一次)
        if currentTime - KillerWarningSettings.LastWarningTime >= KillerWarningSettings.WarningCooldown then
            warningSound:Play()
            KillerWarningSettings.LastWarningTime = currentTime
        end
    else
        warningLabel.Visible = false
    end
end

sdToggle = TabHandles.tsgn:Toggle({
    Title = "杀手靠近提示",
    Desc = "内有音效提示",
    Value = false,
    Callback = function(enabled) 
KillerWarningSettings.Enabled = enabled
        if enabled then
            -- 初始化连接
            if not KillerWarningSettings.connection then
                KillerWarningSettings.connection = game:GetService("RunService").RenderStepped:Connect(updateKillerWarning)
            end
        else
            -- 关闭连接
            if KillerWarningSettings.connection then
                KillerWarningSettings.connection:Disconnect()
                KillerWarningSettings.connection = nil
            end
            warningLabel.Visible = false
            warningSound:Stop()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启杀手提示" or "已关闭杀手提示",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tsgn:Slider({
    Title = "提示距离",
    Desc = "单位：米",
    Value = { Min = 10, Max = 200, Default = 100 },
    Callback = function(value)
KillerWarningSettings.WarningDistance = value
    end
})

local intensitySlider = TabHandles.tsgn:Slider({
    Title = "提示文本大小",
    Desc = "单位：米",
    Value = { Min = 10, Max = 30, Default = 20 },
    Callback = function(value)
KillerWarningSettings.TextSize = value
        warningLabel.Size = value
    end
})

local intensitySlider = TabHandles.tsgn:Slider({
    Title = "文本闪烁速度",
    Desc = "单位：米",
    Value = { Min = 0.1, Max = 1, Default = 0.5 },
    Callback = function(value)
KillerWarningSettings.BlinkInterval = value
    end
})

local modeDropdown = TabHandles.tsgn:Dropdown({
    Title = "提示颜色：",
    Values = { "红色", "橙色", "黄色", "粉色", "紫色" },
    Value = "红色",
    Callback = function(value)
    local colorMap = {
            ["红色"] = Color3.fromRGB(255, 0, 0),
            ["橙色"] = Color3.fromRGB(255, 165, 0),
            ["黄色"] = Color3.fromRGB(255, 255, 0),
            ["粉色"] = Color3.fromRGB(255, 192, 203),
            ["紫色"] = Color3.fromRGB(128, 0, 128)
        }
        KillerWarningSettings.WarningColor = colorMap[value] or Color3.fromRGB(255, 0, 0)
        warningLabel.Color = KillerWarningSettings.WarningColor
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..value,
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tsgn:Slider({
    Title = "提示音效音量",
    Value = { Min = 0, Max = 1, Default = 0.5 },
    Callback = function(value)
KillerWarningSettings.SoundVolume = value
        warningSound.Volume = value
    end
})

TabHandles.tsgn:Divider()

sdToggle = TabHandles.tsgn:Toggle({
    Title = "三角炸弹提示",
    Value = false,
    Callback = function(v) 
            if v then
                NotifySubspaceTripmine =
                    workspace.Map.Ingame.DescendantAdded:Connect(
                    function(v)
                        if v.Name == "塔夫三角炸弹" then
                        WindUI:Notify({
                        Title = "Rb脚本中心：",
                        Content = "三角炸弹已生成！",
                        Icon = "bell",
                        Duration = 2
                        })
                        end
                    end
                )
            else
                NotifySubspaceTripmine:Disconnect()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启三角炸弹生成提示" or "已关闭三角炸弹生成提示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.tsgn:Toggle({
    Title = "实体生成提示",
    Value = false,
    Callback = function(v) 
                        if v then
                NotifyEntityKillers =
                    workspace.DescendantAdded:Connect(
                    function(v)
                        if
                            v:IsA("Model") and v.Name == "PizzaDeliveryRig" or v.Name == "Bunny" or v.Name == "Mafiaso1" or
                                v.Name == "Mafiaso2" or
                                v.Name == "Mafiaso3"
                         then
                        WindUI:Notify({
                        Title = "Rb脚本中心：",
                        Content = v.Name .."已生成！",
                        Icon = "bell",
                        Duration = 2
                        })
                        elseif v:IsA("Model") and v.Name == "1x1x1x1Zombie" then
                        WindUI:Notify({
                        Title = "Rb脚本中心：",
                        Content = "1x1x1x1(僵尸) 已生成！",
                        Icon = "bell",
                        Duration = 2
                        })
                        end
                    end
                )
            else
                NotifyEntityKillers:Disconnect()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启实体生成提示" or "已关闭实体生成提示",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "Silly Billy动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://107464355830477"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://77601084987544"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = false
            sound:Play()
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
                
                for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                    local asset = char:FindFirstChild(assetName)
                    if asset then asset:Destroy() end
                end
            end)
        else
            -- 关闭状态
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                local asset = char:FindFirstChild(assetName)
                if asset then asset:Destroy() end
            end
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://107464355830477" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "Silly of it动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现，与原始函数相同）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://107464355830477"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://120176009143091"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = false
            sound:Play()
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
                
                for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                    local asset = char:FindFirstChild(assetName)
                    if asset then asset:Destroy() end
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                local asset = char:FindFirstChild(assetName)
                if asset then asset:Destroy() end
            end
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://107464355830477" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "Subterfuge动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://87482480949358"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://132297506693854"
            sound.Parent = rootPart
            sound.Volume = 2
            sound.Looped = false
            sound:Play()
            
            local args = {
                [1] = "PlayEmote",
                [2] = "Animations",
                [3] = "_Subterfuge"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://87482480949358" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "Aw Shucks动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://74238051754912"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://123236721947419"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = false
            sound:Play()
            
            local args = {
                [1] = "PlayEmote",
                [2] = "Animations",
                [3] = "Shucks"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://74238051754912" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "Miss The Quiet动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://100986631322204"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://131936418953291"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = false
            sound:Play()
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
                
                for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                    local asset = char:FindFirstChild(assetName)
                    if asset then asset:Destroy() end
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            for _, assetName in ipairs({"EmoteHatAsset", "EmoteLighting", "PlayerEmoteHand"}) do
                local asset = char:FindFirstChild(assetName)
                if asset then asset:Destroy() end
            end
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://100986631322204" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "VIP(新版)动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://138019937280193"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://109474987384441"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = true
            sound:Play()
            
            local effect = game:GetService("ReplicatedStorage").Assets.Emotes.HakariDance.HakariBeamEffect:Clone()
            effect.Name = "PlayerEmoteVFX"
            effect.CFrame = char.PrimaryPart.CFrame * CFrame.new(0, -1, -0.3)
            effect.WeldConstraint.Part0 = char.PrimaryPart
            effect.WeldConstraint.Part1 = effect
            effect.Parent = char
            effect.CanCollide = false
            
            local args = {
                [1] = "PlayEmote",
                [2] = "Animations",
                [3] = "HakariDance"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            local effect = char:FindFirstChild("PlayerEmoteVFX")
            if effect then effect:Destroy() end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://138019937280193" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.dzgn:Toggle({
    Title = "VIP(旧版)动作",
    Value = false,
    Callback = function(state) 
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        local rootPart = char:WaitForChild("HumanoidRootPart")
        
        if state then
            -- 激活状态（完整实现）
            humanoid.PlatformStand = true
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
            bodyVelocity.Velocity = Vector3.zero
            bodyVelocity.Parent = rootPart
            
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://138019937280193"
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            
            local sound = Instance.new("Sound")
            sound.SoundId = "rbxassetid://87166578676888"
            sound.Parent = rootPart
            sound.Volume = 0.5
            sound.Looped = true
            sound:Play()
            
            local effect = game:GetService("ReplicatedStorage").Assets.Emotes.HakariDance.HakariBeamEffect:Clone()
            effect.Name = "PlayerEmoteVFX"
            effect.CFrame = char.PrimaryPart.CFrame * CFrame.new(0, -1, -0.3)
            effect.WeldConstraint.Part0 = char.PrimaryPart
            effect.WeldConstraint.Part1 = effect
            effect.Parent = char
            effect.CanCollide = false
            
            local args = {
                [1] = "PlayEmote",
                [2] = "Animations",
                [3] = "HakariDance"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            
            animationTrack.Stopped:Connect(function()
                humanoid.PlatformStand = false
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
            end)
        else
            -- 关闭状态（完整实现）
            humanoid.PlatformStand = false
            humanoid.JumpPower = 0
            
            local bodyVelocity = rootPart:FindFirstChildOfClass("BodyVelocity")
            if bodyVelocity then bodyVelocity:Destroy() end
            
            local sound = rootPart:FindFirstChildOfClass("Sound")
            if sound then
                sound:Stop()
                sound:Destroy()
            end
            
            local effect = char:FindFirstChild("PlayerEmoteVFX")
            if effect then effect:Destroy() end
            
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation.AnimationId == "rbxassetid://138019937280193" then
                    track:Stop()
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启动作" or "已关闭动作",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

-- Helper function to safely destroy objects
local function safeDestroy(obj)
    if obj and obj.Parent then
        obj:Destroy()
    end
end

-- Helper function to remove touch interests
local function removeTouchInterests(object)
    for _, child in ipairs(object:GetDescendants()) do
        if child:IsA("TouchTransmitter") or child.Name == "TouchInterest" then
            safeDestroy(child)
        end
    end
end

sdToggle = TabHandles.pbgn:Toggle({
    Title = "屏蔽 约翰·多 乱码",
    Value = false,
    Callback = function(v) 
if DisabledJohnDoeTrail then
            DisabledJohnDoeTrail:Disconnect()
            DisabledJohnDoeTrail = nil
        end

        if v then
            local function RemoveTouchInterests()
                local playersFolder = workspace:FindFirstChild("Players")
                if not playersFolder then return end
                
                local killers = playersFolder:FindFirstChild("Killers")
                if not killers then return end

                for _, killer in ipairs(killers:GetChildren()) do
                    if killer:FindFirstChild("JohnDoeTrail") then
                        for _, trail in ipairs(killer.JohnDoeTrail:GetDescendants()) do
                            if trail.Name == "Trail" then
                                removeTouchInterests(trail)
                            end
                        end
                    end
                end
            end

            RemoveTouchInterests()

            DisabledJohnDoeTrail = game:GetService("RunService").Heartbeat:Connect(function()
                RemoveTouchInterests()
            end)

            -- Setup descendant added listeners
            local killers = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
            if killers then
                for _, killer in ipairs(killers:GetChildren()) do
                    if killer:FindFirstChild("JohnDoeTrail") then
                        killer.JohnDoeTrail.DescendantAdded:Connect(function(newObj)
                            if newObj.Name == "Trail" then
                                removeTouchInterests(newObj)
                            end
                        end)
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启屏蔽" or "已关闭屏蔽",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.pbgn:Toggle({
    Title = "屏蔽 约翰·多 尖刺",
    Value = false,
    Callback = function(v) 
if AntiJohnDoeSpike then
            AntiJohnDoeSpike:Disconnect()
            AntiJohnDoeSpike = nil
        end

        if v then
            local function RemoveSpikes()
                local map = workspace:FindFirstChild("Map")
                if not map then return end
                
                for _, spike in ipairs(map:GetDescendants()) do
                    if spike.Name == "Spike" then
                        safeDestroy(spike)
                    end
                end
            end

            RemoveSpikes()

            AntiJohnDoeSpike = game:GetService("RunService").Heartbeat:Connect(RemoveSpikes)

            local map = workspace:FindFirstChild("Map")
            if map then
                map.DescendantAdded:Connect(function(obj)
                    if obj.Name == "Spike" then
                        safeDestroy(obj)
                    end
                end)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启屏蔽" or "已关闭屏蔽",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.pbgn:Toggle({
    Title = "屏蔽 约翰·多 陷阱",
    Value = false,
    Callback = function(v) 
if AntiJohnDoeStomp then
            AntiJohnDoeStomp:Disconnect()
            AntiJohnDoeStomp = nil
        end

        if v then
            local function CleanShadows()
                local map = workspace:FindFirstChild("Map")
                if not map then return end
                
                local ingame = map:FindFirstChild("Ingame")
                if not ingame then return end
                
                for _, shadow in ipairs(ingame:GetDescendants()) do
                    if shadow.Name == "Shadow" then
                        removeTouchInterests(shadow)
                        safeDestroy(shadow)
                    end
                end
            end

            CleanShadows()

            AntiJohnDoeStomp = game:GetService("RunService").Heartbeat:Connect(function()
                CleanShadows()
            end)

            local map = workspace:FindFirstChild("Map")
            if map then
                local ingame = map:FindFirstChild("Ingame")
                if ingame then
                    ingame.DescendantAdded:Connect(function(obj)
                        if obj.Name == "Shadow" then
                            removeTouchInterests(obj)
                            safeDestroy(obj)
                        end
                    end)
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启屏蔽" or "已关闭屏蔽",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local RemoteEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")

local AutoPopup = {
    Enabled = false,
    Task = nil,
    Connections = {},
    Interval = 0.5
}

local function deletePopups()
    if not LocalPlayer or not LocalPlayer:FindFirstChild("PlayerGui") then
        return false
    end
    
    local tempUI = LocalPlayer.PlayerGui:FindFirstChild("TemporaryUI")
    if not tempUI then
        return false
    end
    
    local deleted = false
    for _, popup in ipairs(tempUI:GetChildren()) do
        if popup.Name == "1x1x1x1Popup" then
            popup:Destroy()
            deleted = true
        end
    end
    return deleted
end

local function triggerEntangled()
    local args = { [1] = "Entangled" }
    pcall(function()
        RemoteEvent:FireServer(unpack(args))
    end)
end

local function setupPopupListener()
    if not LocalPlayer or not LocalPlayer:FindFirstChild("PlayerGui") then return end
    
    local tempUI = LocalPlayer.PlayerGui:FindFirstChild("TemporaryUI")
    if not tempUI then
        tempUI = Instance.new("Folder")
        tempUI.Name = "TemporaryUI"
        tempUI.Parent = LocalPlayer.PlayerGui
    end
    
    if AutoPopup.Connections.ChildAdded then
        AutoPopup.Connections.ChildAdded:Disconnect()
    end
    
    AutoPopup.Connections.ChildAdded = tempUI.ChildAdded:Connect(function(child)
        if AutoPopup.Enabled and child.Name == "1x1x1x1Popup" then
            task.defer(function()
                child:Destroy()
            end)
        end
    end)
end

local function runMainTask()
    while AutoPopup.Enabled do
        deletePopups()
        triggerEntangled()
        task.wait(AutoPopup.Interval) -- 使用设置的间隔时间
    end
end

local function startAutoPopup()
    if AutoPopup.Enabled then return end
    
    AutoPopup.Enabled = true
    setupPopupListener()
    
    if AutoPopup.Task then
        task.cancel(AutoPopup.Task)
    end
    AutoPopup.Task = task.spawn(runMainTask)
end

local function stopAutoPopup()
    if not AutoPopup.Enabled then return end
    
    AutoPopup.Enabled = false
    
    if AutoPopup.Task then
        task.cancel(AutoPopup.Task)
        AutoPopup.Task = nil
    end
    
    for _, connection in pairs(AutoPopup.Connections) do
        connection:Disconnect()
    end
    AutoPopup.Connections = {}
end

local intensitySlider = TabHandles.pbgn:Slider({
    Title = "屏蔽间隔时间",
    Desc = "单位:秒",
    Value = { Min = 0.5, Max = 3.5, Default = 0.5 },
    Callback = function(value)
        AutoPopup.Interval = value
    end
})

sdToggle = TabHandles.pbgn:Toggle({
    Title = "屏蔽 1x1x1x1 弹窗/懒惰",
    Value = false,
    Callback = function(state) 
        if state then
            startAutoPopup()
        else
            stopAutoPopup()
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = v and "已开启屏蔽" or "已关闭屏蔽",
            Icon = v and "check" or "x",
            Duration = 2
        })
    end
})

-- 玩家离开处理
if LocalPlayer then
    LocalPlayer:GetPropertyChangedSignal("Parent"):Connect(function()
        if not LocalPlayer.Parent then
            stopAutoPopup()
        end
    end)
end

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- 体力系统设置
local StaminaSettings = {
    MaxStamina = 100,      -- 最大体力值
    StaminaGain = 25,      -- 体力恢复速度
    StaminaLoss = 10,      -- 体力消耗速度
    SprintSpeed = 28,      -- 奔跑速度
    InfiniteGain = 9999    -- 无限体力恢复速度
}

-- 体力控制开关
local SettingToggles = {
    MaxStamina = true,
    StaminaGain = true,
    StaminaLoss = true,
    SprintSpeed = true
}

-- 获取游戏体力模块
local SprintingModule = ReplicatedStorage:WaitForChild("Systems"):WaitForChild("Character"):WaitForChild("Game"):WaitForChild("Sprinting")
local GetModule = function() return require(SprintingModule) end

-- 实时更新体力设置
task.spawn(function()
    while true do
        local m = GetModule()
        for key, value in pairs(StaminaSettings) do
            if SettingToggles[key] then
                m[key] = value
            end
        end
        task.wait(0.5)
    end
end)

-- 无限体力功能
local bai = {Spr = false}
local connection

sdToggle = TabHandles.tlgn:Toggle({
    Title = "无限体力",
    Value = false,
    Callback = function(state) 
bai.Spr = state
        local Sprinting = GetModule()

        if state then
            Sprinting.StaminaLoss = 0
            Sprinting.StaminaGain = StaminaSettings.InfiniteGain or 9999

            if connection then connection:Disconnect() end
            connection = RunService.Heartbeat:Connect(function()
                if not bai.Spr then return end
                Sprinting.StaminaLoss = 0
                Sprinting.StaminaGain = StaminaSettings.InfiniteGain or 9999
            end)
        else
            Sprinting.StaminaLoss = StaminaSettings.StaminaLoss or 10
            Sprinting.StaminaGain = StaminaSettings.StaminaGain or 25

            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启无限体力" or "已关闭无限体力",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tlgn:Slider({
    Title = "无限体力恢复速度",
    Value = { Min = 0, Max = 50000, Default = 9999 },
    Callback = function(Value)
StaminaSettings.InfiniteGain = Value
    end
})

TabHandles.tlgn:Divider()

sdToggle = TabHandles.tlgn:Toggle({
    Title = "自定义体力大小",
    Value = false,
    Callback = function(Value) 
SettingToggles.MaxStamina = Value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自定义体力大小" or "已关闭自定义体力大小",
            Icon = Value and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tlgn:Slider({
    Title = "设置体力大小",
    Value = { Min = 0, Max = 99999, Default = 100 },
    Callback = function(Value)
StaminaSettings.MaxStamina = Value
    end
})

sdToggle = TabHandles.tlgn:Toggle({
    Title = "自定义体力恢复",
    Value = false,
    Callback = function(Value) 
SettingToggles.StaminaGain = Value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自定义体力恢复" or "已关闭自定义体力恢复",
            Icon = Value and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tlgn:Slider({
    Title = "设置体力恢复速度",
    Value = { Min = 0, Max = 250, Default = 25 },
    Callback = function(Value)
StaminaSettings.StaminaGain = Value
    end
})

sdToggle = TabHandles.tlgn:Toggle({
    Title = "自定义体力消耗",
    Value = false,
    Callback = function(Value) 
SettingToggles.StaminaLoss = Value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自定义体力消耗" or "已关闭自定义体力消耗",
            Icon = Value and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tlgn:Slider({
    Title = "设置体力消耗速度",
    Value = { Min = 0, Max = 100, Default = 10 },
    Callback = function(Value)
StaminaSettings.StaminaLoss = Value
    end
})

sdToggle = TabHandles.tlgn:Toggle({
    Title = "自定义奔跑速度",
    Value = false,
    Callback = function(Value) 
SettingToggles.SprintSpeed = Value
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = Value and "已开启自定义奔跑速度" or "已关闭自定义奔跑速度",
            Icon = Value and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.tlgn:Slider({
    Title = "设置奔跑速度",
    Value = { Min = 0, Max = 200, Default = 28 },
    Callback = function(Value)
StaminaSettings.SprintSpeed = Value
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local pizzaConnection = nil
local pizzaTPConnection = nil
local pizzaAttractionActive = false

sdToggle = TabHandles.smgn:Toggle({
    Title = "自动吃披萨(追踪)",
    Desc = "地图上有披萨时，生命值低于设定值会自动吸引附近的披萨",
    Value = false,
    Callback = function(enabled) 
_G.AutoEatPizza = enabled
        pizzaAttractionActive = enabled
        
        if pizzaConnection then
            pizzaConnection:Disconnect()
            pizzaConnection = nil
        end
        
        if enabled then
            local lastCheck = 0
            pizzaConnection = RunService.Stepped:Connect(function(_, deltaTime)
                lastCheck += deltaTime
                
                if lastCheck < 0.3 then return end
                lastCheck = 0
                
                local player = Players.LocalPlayer
                local character = player.Character
                
                if not character or not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
                    return
                end
                
                local humanoid = character.Humanoid
                local rootPart = character.HumanoidRootPart
                
                if _G.HealthEatPizza and humanoid.Health >= _G.HealthEatPizza then
                    return
                end
                
                local pizzaFolder = workspace:FindFirstChild("Pizzas") or workspace.Map
                if not pizzaFolder then return end
                
                local closestPizza, closestDistance = nil, math.huge
                for _, pizza in ipairs(pizzaFolder:GetDescendants()) do
                    if pizza:IsA("BasePart") and pizza.Name == "Pizza" then
                        local distance = (rootPart.Position - pizza.Position).Magnitude
                        if distance < closestDistance then
                            closestPizza = pizza
                            closestDistance = distance
                        end
                    end
                end
                
                if closestPizza then
                    closestPizza.CFrame = closestPizza.CFrame:Lerp(
                        rootPart.CFrame * CFrame.new(0, 0, -2),
                        0.5
                    )
                    
                    if not closestPizza:FindFirstChild("AttractEffect") then
                        local effect = Instance.new("ParticleEmitter")
                        effect.Name = "AttractEffect"
                        effect.Texture = "rbxassetid://242487987"
                        effect.LightEmission = 0.8
                        effect.Size = NumberSequence.new(0.5)
                        effect.Parent = closestPizza
                    end
                end
            end)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动吃披萨" or "已关闭自动吃披萨",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

sdToggle = TabHandles.smgn:Toggle({
    Title = "自动吃披萨(传送)",
    Desc = "地图上有披萨时，生命值低于设定值会自动传送最近的披萨到玩家",
    Value = false,
    Callback = function(enabled) 
_G.AutoTeleportPizza = enabled
        
        if pizzaTPConnection then
            pizzaTPConnection:Disconnect()
            pizzaTPConnection = nil
        end
        
        if enabled then
            local lastCheck = 0
            pizzaTPConnection = RunService.Stepped:Connect(function(_, deltaTime)
                lastCheck += deltaTime
                
                if lastCheck < 0.3 then return end
                lastCheck = 0
                
                local player = Players.LocalPlayer
                local character = player.Character
                
                if not character or not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
                    return
                end
                
                local humanoid = character.Humanoid
                local rootPart = character.HumanoidRootPart
                
                if _G.HealthEatPizza and humanoid.Health >= _G.HealthEatPizza then
                    return
                end
                
                local pizzaFolder = workspace:FindFirstChild("Pizzas") or workspace.Map
                if not pizzaFolder then return end
                
                local closestPizza, closestDistance = nil, math.huge
                for _, pizza in ipairs(pizzaFolder:GetDescendants()) do
                    if pizza:IsA("BasePart") and pizza.Name == "Pizza" then
                        local distance = (rootPart.Position - pizza.Position).Magnitude
                        if distance < closestDistance then
                            closestPizza = pizza
                            closestDistance = distance
                        end
                    end
                end
                
                if closestPizza then
                    closestPizza.CFrame = rootPart.CFrame * CFrame.new(0, 0, -2)
                    
                    if not closestPizza:FindFirstChild("TeleportEffect") then
                        local effect = Instance.new("ParticleEmitter")
                        effect.Name = "TeleportEffect"
                        effect.Texture = "rbxassetid://242487987"
                        effect.LightEmission = 0.8
                        effect.Size = NumberSequence.new(0.5)
                        effect.Lifetime = NumberRange.new(0.5)
                        effect.Parent = closestPizza
                        
                        delay(1, function()
                            if effect and effect.Parent then
                                effect:Destroy()
                            end
                        end)
                    end
                end
            end)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动吃披萨" or "已关闭自动吃披萨",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.smgn:Slider({
    Title = "设置最低生命值",
    Desc = "当你的生命值到达你设置的最低生命值时自动吃披萨(回血)",
    Value = { Min = 10, Max = 130, Default = 50 },
    Callback = function(value)
_G.HealthEatPizza = value
    end
})

TabHandles.smgn:Divider()

TabHandles.Elements:Button({
    Title = "将披萨传送至脚下",
    Icon = "bell",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local rootPart = character.HumanoidRootPart
            for _, pizza in ipairs(workspace:GetDescendants()) do
                if pizza:IsA("BasePart") and pizza.Name == "Pizza" then
                    pizza.CFrame = rootPart.CFrame
                    break
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送，若无则地图上没有披萨",
            Icon = "bell",
            Duration = 3
        })
    end
})

local tripmineData = {
    active = false,
    killerParts = {},  
    tripmineParts = {},
    connections = {},
    speed = 20, -- 移动速度：20米/秒
    survivorNames = {} -- 存储幸存者名字（自动排除）
}

-- 更新幸存者名单（从Survivors文件夹获取）
local function updateSurvivors()
    tripmineData.survivorNames = {}
    local survivorsFolder = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Players") and workspace.Map.Players:FindFirstChild("Survivors")
    if survivorsFolder then
        for _, survivor in ipairs(survivorsFolder:GetChildren()) do
            if survivor:IsA("Model") then
                table.insert(tripmineData.survivorNames, survivor.Name)
                print("[DEBUG] 排除幸存者:", survivor.Name)
            end
        end
    else
        warn("[WARNING] 未找到 Survivors 文件夹，可能无法排除Taph！")
    end
end

-- 更新杀手位置（自动排除幸存者）
local function updateKillers()
    tripmineData.killerParts = {}
    local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
    if killersFolder then
        for _, killer in ipairs(killersFolder:GetChildren()) do
            if killer:IsA("Model") and not table.find(tripmineData.survivorNames, killer.Name) then
                local rootPart = killer:FindFirstChild("HumanoidRootPart") or killer:FindFirstChildWhichIsA("BasePart")
                if rootPart then
                    table.insert(tripmineData.killerParts, rootPart)
                    print("[DEBUG] 有效杀手:", killer.Name, "位置:", rootPart.Position)
                end
            end
        end
    else
        warn("[ERROR] 未找到 Killers 文件夹！")
    end
end

-- 更新三角炸弹
local function updateTripmines()
    tripmineData.tripmineParts = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "SubspaceTripmine" then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                table.insert(tripmineData.tripmineParts, part)
            end
        end
    end
end

-- 平滑移动炸弹（速度控制）
local function moveTripmines(deltaTime)
    if #tripmineData.killerParts == 0 then return end

    for _, tripmine in ipairs(tripmineData.tripmineParts) do
        if tripmine and tripmine.Parent then
            -- 找到最近的杀手（已自动排除幸存者）
            local nearestKiller, minDist = nil, math.huge
            for _, killerPart in ipairs(tripmineData.killerParts) do
                if killerPart and killerPart.Parent then
                    local dist = (tripmine.Position - killerPart.Position).Magnitude
                    if dist < minDist then
                        minDist = dist
                        nearestKiller = killerPart
                    end
                end
            end

            -- 移动逻辑
            if nearestKiller then
                local direction = (nearestKiller.Position - tripmine.Position).Unit
                local moveDistance = math.min(tripmineData.speed * deltaTime, minDist)
                tripmine.CFrame = CFrame.new(tripmine.Position + direction * moveDistance)
            end
        end
    end
end

sdToggle = TabHandles.zdgn:Toggle({
    Title = "三角炸弹自动追踪",
    Desc = "可能会有bug",
    Value = false,
    Callback = function(enabled) 
if enabled then
            -- 初始更新名单
            updateSurvivors()
            updateKillers()
            updateTripmines()

            -- 心跳连接
            local lastTime = os.clock()
            tripmineData.connections.heartbeat = game:GetService("RunService").Heartbeat:Connect(function()
                local deltaTime = os.clock() - lastTime
                lastTime = os.clock()
                moveTripmines(deltaTime)
            end)

            -- 监听杀手变化
            local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")
            tripmineData.connections.killerAdded = killersFolder.ChildAdded:Connect(function()
                task.wait(0.5)
                updateKillers()
            end)

            -- 监听幸存者变化（动态更新排除名单）
            local survivorsFolder = workspace:WaitForChild("Map"):WaitForChild("Players"):WaitForChild("Survivors")
            tripmineData.connections.survivorAdded = survivorsFolder.ChildAdded:Connect(function()
                task.wait(0.5)
                updateSurvivors()
                updateKillers() -- 立即更新杀手名单
            end)

            print("[SUCCESS] 已启用追踪，自动排除幸存者:", table.concat(tripmineData.survivorNames, ", "))
        else
            -- 清理连接
            for _, conn in pairs(tripmineData.connections) do
                conn:Disconnect()
            end
            tripmineData.connections = {}
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动追踪" or "已关闭自动追踪",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game.Workspace

sdToggle = TabHandles.zdgn:Toggle({
    Title = "三角炸弹自动追踪V2",
    Desc = "可能会有bug",
    Value = false,
    Callback = function(enabled) 
if enabled then
            -- 原脚本的所有变量和函数
            local TRPSP = 80 -- 炸弹速度
            local UPDAT = 0.1
            local For = 16000  -- 推的力
            local KILLNAMEE = "Jason" -- 默认杀手名
            local activeConnections = {}

            local function GetKIPOs()
                local killerPositions = {}

                local KILlEF = Workspace:FindFirstChild("Players")
                if KILlEF then
                    KILlEF = KILlEF:FindFirstChild("Killers")
                end

                if not KILlEF then
                    local jasonModel = Workspace:FindFirstChild(KILLNAMEE, true)
                    if jasonModel and jasonModel:IsA("Model") then
                        local primaryPart = jasonModel.PrimaryPart
                            or jasonModel:FindFirstChild("HumanoidRootPart")
                            or jasonModel:FindFirstChild("Torso")
                            or jasonModel:FindFirstChild("UpperTorso")
                            or jasonModel:FindFirstChild("LowerTorso")
                            or jasonModel:FindFirstChildOfClass("Part")

                        if primaryPart then
                            table.insert(killerPositions, {
                                position = primaryPart.Position,
                                model = jasonModel,
                                name = jasonModel.Name,
                                partName = primaryPart.Name,
                            })
                        end
                    end

                    return killerPositions
                end

                local children = KILlEF:GetChildren()

                for _, obj in pairs(children) do
                    if obj:IsA("Model") then
                        local primaryPart = obj.PrimaryPart
                            or obj:FindFirstChild("HumanoidRootPart")
                            or obj:FindFirstChild("Torso")
                            or obj:FindFirstChild("UpperTorso")
                            or obj:FindFirstChild("LowerTorso")
                            or obj:FindFirstChildOfClass("Part")

                        if primaryPart then
                            table.insert(killerPositions, {
                                position = primaryPart.Position,
                                model = obj,
                                name = obj.Name,
                                partName = primaryPart.Name,
                            })
                        end
                    end
                end

                return killerPositions
            end

            local function ALTRP()
                local tripmines = {}

                for _, obj in pairs(Workspace:GetDescendants()) do
                    if obj:IsA("Model") and string.find(obj.Name, "SubspaceTripmine") then
                        local primaryPart = obj.PrimaryPart
                            or obj:FindFirstChild("HumanoidRootPart")
                            or obj:FindFirstChildOfClass("Part")

                        if primaryPart then
                            table.insert(tripmines, {
                                model = obj,
                                part = primaryPart,
                                name = obj.Name,
                            })
                        end
                    end
                end

                return tripmines
            end

            local function FiNdNIGGDAR(TRPOs, TAGA)
                local NEARTarget = nil
                local NEARDistance = math.huge

                for _, target in pairs(TAGA) do
                    local distance = (target.position - TRPOs).Magnitude
                    if distance < NEARDistance then
                        NEARDistance = distance
                        NEARTarget = target
                    end
                end

                return NEARTarget
            end

            local function CaTrFc(tripminePart)
                for _, child in pairs(tripminePart:GetChildren()) do
                    if child:IsA("BodyVelocity") or child:IsA("BodyPosition") or child:IsA("BodyAngularVelocity") then
                        child:Destroy()
                    end
                end

                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(For, For, For)
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.Parent = tripminePart

                local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
                bodyAngularVelocity.MaxTorque = Vector3.new(4000, 4000, 4000)
                bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
                bodyAngularVelocity.Parent = tripminePart

                return bodyVelocity
            end

            local function UPTAR()
                local killerPositions = GetKIPOs()
                local tripmines = ALTRP()

                if #killerPositions == 0 then
                    return
                end

                if #tripmines == 0 then
                    return
                end

                for _, tripmine in pairs(tripmines) do
                    local currentPos = tripmine.part.Position
                    local NEARTarget = FiNdNIGGDAR(currentPos, killerPositions)

                    if NEARTarget then
                        local direction = (NEARTarget.position - currentPos).Unit
                        local distance = (NEARTarget.position - currentPos).Magnitude

                        local adjustedSpeed = math.min(TRPSP, distance * 2)
                        local KILLVETOR = direction * adjustedSpeed

                        local bodyVelocity = tripmine.part:FindFirstChild("BodyVelocity")
                        if not bodyVelocity then
                            bodyVelocity = CaTrFc(tripmine.part)
                        end

                        if bodyVelocity then
                            local currentVel = bodyVelocity.Velocity
                            local smoothVel = currentVel:lerp(KILLVETOR, 0.3)
                            bodyVelocity.Velocity = smoothVel
                        end
                    end
                end
            end

            local function cleanup()
                for _, connection in pairs(activeConnections) do
                    if connection then
                        connection:Disconnect()
                    end
                end
                activeConnections = {}
            end

            local function STTark()
                cleanup()

                local lastUpdate = 0
                local connection = RunService.Heartbeat:Connect(function()
                    local currentTime = tick()
                    if currentTime - lastUpdate >= UPDAT then
                        lastUpdate = currentTime
                        UPTAR()
                    end
                end)

                table.insert(activeConnections, connection)
            end

            -- 玩家离开时清理
            local playerRemovingConnection = Players.PlayerRemoving:Connect(function()
                cleanup()
            end)
            table.insert(activeConnections, playerRemovingConnection)

            -- 启动追踪
            STTark()
            print("[SUCCESS] 三角炸弹追踪已启用")
        else
            -- 清理所有连接
            for _, connection in pairs(activeConnections) do
                if connection then
                    connection:Disconnect()
                end
            end
            activeConnections = {}
            print("[INFO] 三角炸弹追踪已禁用")
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动追踪" or "已关闭自动追踪",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

TabHandles.zdgn:Divider()

sdToggle = TabHandles.zdgn:Toggle({
    Title = "自动弹飞炸弹",
    Value = false,
    Callback = function(enabled) 
 local TRPSP = 3000
        local UPDATE_INTERVAL = 0.2
        local DETECTION_RANGE = 30
        local KILLER_NAME = "Jason"
        
        local systemActive = false
        local heartbeatConnection = nil
        local lastUpdate = 0
        
        local FindFirstChild = game.FindFirstChild
        local GetChildren = game.GetChildren
        local FindFirstChildWhichIsA = game.FindFirstChildWhichIsA
        local GetDescendants = Workspace.GetDescendants
        local wait = task.wait
        
        local function GetKillerPositions()
            local killerPositions = {}
            local killersFolder = FindFirstChild(Workspace, "Players") and FindFirstChild(Workspace.Players, "Killers")
            
            if killersFolder then
                for _, model in ipairs(GetChildren(killersFolder)) do
                    if model:IsA("Model") then
                        local primaryPart = model.PrimaryPart or FindFirstChildWhichIsA(model, "BasePart")
                        if primaryPart then
                            table.insert(killerPositions, primaryPart)
                        end
                    end
                end
            else
                local killerModel = FindFirstChild(Workspace, KILLER_NAME, true)
                if killerModel and killerModel:IsA("Model") then
                    local primaryPart = killerModel.PrimaryPart or FindFirstChildWhichIsA(killerModel, "BasePart")
                    if primaryPart then
                        table.insert(killerPositions, primaryPart)
                    end
                end
            end
            
            return killerPositions
        end

        local lastTripmineCheck = 0
        local tripmineCache = {}
        local CACHE_DURATION = 2
        
        local function FindTripmines()
            local now = tick()
            
            if now - lastTripmineCheck < CACHE_DURATION then
                return tripmineCache
            end
            
            table.clear(tripmineCache)
            
            for _, obj in ipairs(GetDescendants(Workspace)) do
                if obj:IsA("Model") and obj.Name:find("SubspaceTripmine") then
                    local primaryPart = obj.PrimaryPart or FindFirstChildWhichIsA(obj, "BasePart")
                    if primaryPart then
                        table.insert(tripmineCache, primaryPart)
                    end
                end
            end
            
            lastTripmineCheck = now
            return tripmineCache
        end

        local function LaunchTripmine(tripminePart, direction)
            for _, child in ipairs(GetChildren(tripminePart)) do
                if child:IsA("BodyMover") then
                    child:Destroy()
                end
            end
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVelocity.Velocity = direction * TRPSP
            bodyVelocity.P = 1000
            bodyVelocity.Parent = tripminePart
            
            tripminePart.CanCollide = false
            
            delay(5, function()
                if tripminePart and tripminePart.Parent then
                    tripminePart:Destroy()
                end
            end)
        end

        local function UpdateBombs()
            local now = tick()
            if now - lastUpdate < UPDATE_INTERVAL then return end
            lastUpdate = now
            
            local killers = GetKillerPositions()
            if #killers == 0 then return end
            
            local tripmines = FindTripmines()
            if #tripmines == 0 then return end
            
            for _, tripmine in ipairs(tripmines) do
                local minePos = tripmine.Position
                local nearestKiller, minDist = nil, DETECTION_RANGE
                
                for _, killer in ipairs(killers) do
                    local dist = (killer.Position - minePos).Magnitude
                    if dist < minDist then
                        minDist = dist
                        nearestKiller = killer
                    end
                end
                
                if nearestKiller then
                    local dir = (minePos - nearestKiller.Position).Unit
                    dir = dir + Vector3.new(0, 0.8, 0)
                    
                    LaunchTripmine(tripmine, dir)
                end
            end
        end

        if enabled then
            if systemActive then return end
            systemActive = true
            
            heartbeatConnection = RunService.Stepped:Connect(function()
                if systemActive then
                    UpdateBombs()
                end
            end)
        else
            systemActive = false
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
            
            table.clear(tripmineCache)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动弹飞" or "已关闭自动弹飞",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local config = {
    BlockDistance = 15,
    ScanInterval = 0.05,
    BlockCooldown = 0.5,
    DebugMode = true,
    AutoAdjustDistance = true,
    PredictEnabled = true,  -- 新增预判开关
    PredictDistance = 17,   -- 预测距离 = 基础距离 + 2
    BasePredictAmount = 2,  
    TargetSoundIds = {
        "rbxassetid://102228729296384",
        "rbxassetid://140242176732868",
        "rbxassetid://12222216",
        "rbxassetid://86174610237192",
        "rbxassetid://101199185291628",
        "rbxassetid://95079963655241",
        "rbxassetid://112809109188560"
    }
}

local LocalPlayer = Players.LocalPlayer
local RemoteEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
local lastBlockTime = 0
local combatConnection = nil

local function HasTargetSound(character)
    if not character then return false end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        for _, child in ipairs(humanoidRootPart:GetDescendants()) do
            if child:IsA("Sound") then
                for _, targetId in ipairs(config.TargetSoundIds) do
                    if child.SoundId == targetId then
                        if config.DebugMode then
                            print("Audio detected:", humanoidRootPart:GetFullName(), "ID:", child.SoundId)
                        end
                        return true
                    end
                end
            end
        end
    end
    
    for _, sound in ipairs(character:GetDescendants()) do
        if sound:IsA("Sound") then
            for _, targetId in ipairs(config.TargetSoundIds) do
                if sound.SoundId == targetId then
                    if config.DebugMode then
                        print("Audio detected:", sound:GetFullName(), "ID:", sound.SoundId)
                    end
                    return true
                end
            end
        end
    end
    
    return false
end

local function GetKillersInRange()
    local killers = {}
    local killersFolder = workspace:FindFirstChild("Killers") or workspace:FindFirstChild("Players"):FindFirstChild("Killers")
    if not killersFolder then return killers end
    
    local myCharacter = LocalPlayer.Character
    if not myCharacter or not myCharacter:FindFirstChild("HumanoidRootPart") then return killers end
    
    local myPos = myCharacter.HumanoidRootPart.Position
    
    for _, killer in ipairs(killersFolder:GetChildren()) do
        if killer:FindFirstChild("HumanoidRootPart") then
            local distance = (killer.HumanoidRootPart.Position - myPos).Magnitude
            local checkDistance = config.BlockDistance
            if config.PredictEnabled then
                checkDistance = checkDistance + config.BasePredictAmount
            end
            if distance <= checkDistance then
                table.insert(killers, killer)
            end
        end
    end
    
    return killers
end

local function PerformBlock()
    if os.clock() - lastBlockTime >= config.BlockCooldown then
        RemoteEvent:FireServer("UseActorAbility", "Block")
        lastBlockTime = os.clock()
        if config.DebugMode then
            print("Block performed at:", os.clock())
        end
    end
end

local function CombatLoop()
    local killers = GetKillersInRange()
    
    for _, killer in ipairs(killers) do
        if HasTargetSound(killer) then
            PerformBlock()
            break
        end
    end
end

local function Initialize()
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end

    print("Block system initialized")
    print(string.format("当前设置: 基础距离 %.1fm | 预判距离 %.1fm | 总距离 %.1fm", 
        config.BlockDistance, config.BasePredictAmount, config.BlockDistance + config.BasePredictAmount))
end

sdToggle = TabHandles.gdgn:Toggle({
    Title = "自动格挡",
    Desc = "此功能为访客专属",
    Value = false,
    Callback = function(enabled) 
if enabled then
            Initialize()
            combatConnection = RunService.Stepped:Connect(CombatLoop)
            print(string.format("[Auto Block] OK | 当前距离:%.1fm (总距离:%.1fm)", 
                config.BlockDistance, config.BlockDistance + (config.PredictEnabled and config.BasePredictAmount or 0)))
        else
            if combatConnection then
                combatConnection:Disconnect()
                combatConnection = nil
            end
            print("[自动格挡] 已停用")
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动格挡" or "已关闭自动格挡",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.gdgn:Slider({
    Title = "格挡距离",
    Value = { Min = 0, Max = 20, Default = 10 },
    Callback = function(value)
        config.BlockDistance = value
        print(string.format("[基础距离] 已更新: %.1fm (总距离: %.1fm)", 
            value, value + (config.PredictEnabled and config.BasePredictAmount or 0)))
    end
})

sdToggle = TabHandles.gdgn:Toggle({
    Title = "格挡预判",
    Value = false,
    Callback = function(enabled) 
config.PredictEnabled = enabled
        print(enabled and "[预判系统] 已启用" or "[预判系统] 已禁用")
        print(string.format("当前总距离: %.1fm", config.BlockDistance + (enabled and config.BasePredictAmount or 0)))
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启格挡预判" or "已关闭格挡预判",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.gdgn:Slider({
    Title = "预判距离",
    Value = { Min = 0, Max = 5, Default = 2 },
    Callback = function(value)
        config.BasePredictAmount = value
        print(string.format("[预判距离] 已更新: %.1fm (总距离: %.1fm)", 
            value, config.BlockDistance + (config.PredictEnabled and value or 0)))
    end
})

local intensitySlider = TabHandles.xjgn:Slider({
    Title = "修机速度",
    Value = { Min = 1.5, Max = 12, Default = 1.5 },
    Callback = function(v)
        _G.AutoGeneratorDelay = v
    end
})

_G.AutoGeneratorDelay = 1.5

sdToggle = TabHandles.xjgn:Toggle({
    Title = "自动修机",
    Value = false,
    Callback = function(enabled) 
local debounce = {}
        local generatorFolder = game.Workspace.Map.Ingame.Map
        
        while enabled do
            task.wait()
            
            for _, generator in pairs(generatorFolder:GetChildren()) do
                if generator.Name == "Generator" then
                    if not debounce[generator] then
                        local remotes = generator:FindFirstChild("Remotes")
                        local re = remotes and remotes:FindFirstChild("RE")
                        
                        if re then
                            debounce[generator] = true
                            re:FireServer()
                            
                            task.delay(_G.AutoGeneratorDelay or 1.5, function()
                                debounce[generator] = nil
                            end)
                        end
                    end
                end
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = enabled and "已开启自动修机" or "已关闭自动修机",
            Icon = enabled and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 4777817887 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...刀刃球...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 刀刃球",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    cxgn = Tabs.gn:Tab({ Title = "抽箱功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Plr = game:GetService("Players")
local LP = Plr.LocalPlayer

local Part = Instance.new("Part", workspace)
Part.Material = Enum.Material.ForceField
Part.Anchored = true
Part.CanCollide = false
Part.CastShadow = false
Part.Shape = Enum.PartType.Ball
Part.Color = Color3.fromRGB(132, 0, 255)
Part.Transparency = 0.5

local BaseGui = Instance.new("ScreenGui", game.CoreGui)
BaseGui.Name = "BaseGui"

local TL = Instance.new("TextLabel", BaseGui)
TL.Name = "TL"
TL.Parent = BaseGui
TL.BackgroundColor3 = Color3.new(1, 1, 1)
TL.BackgroundTransparency = 1
TL.BorderColor3 = Color3.new(0, 0, 0)
TL.Position = UDim2.new(0.95, -300, 0.85, 0)
TL.Size = UDim2.new(0, 300, 0, 50)
TL.FontFace = Font.new("rbxassetid://12187370000", Enum.FontWeight.Bold)
TL.Text = ""
TL.TextColor3 = Color3.new(1, 1, 1)
TL.TextScaled = true
TL.TextSize = 14
TL.TextWrapped = true
TL.Visible = true
TL.RichText = true

local function rainbowColor(hue)
  return Color3.fromHSV(hue, 1, 1)
end

local function updateRainbowText(distance, ballSpeed, spamRadius, minDistance)
  local hue = (tick() * 0.1) % 1
  local color1 = rainbowColor(hue)
  local color2 = rainbowColor((hue + 0.3) % 1)
  local color3 = rainbowColor((hue + 0.6) % 1)
  local color4 = rainbowColor((hue + 0.9) % 1)

  TL.Text = string.format(
  "<font color='#%s'>distance: %s</font>\n"..
  "<font color='#%s'>ballSpeed: %s</font>\n"..
  "<font color='#%s'>spamRadius: %s</font>\n"..
  "<font color='#%s'>minDistance: %s</font>",
  color1:ToHex(), tostring(distance),
  color2:ToHex(), tostring(ballSpeed),
  color3:ToHex(), tostring(spamRadius),
  color4:ToHex(), tostring(minDistance)
  )
end

local last1, last2
local Cam = workspace.CurrentCamera

local function ZJ()
  local Nearest, Min = nil, math.huge
  for A, B in next, workspace.Alive:GetChildren() do
    if B.Name ~= LP.Name and B:FindFirstChild("HumanoidRootPart") then
      local distance = LP:DistanceFromCharacter(B:GetPivot().Position)
      if distance < Min then
        Min = distance
        Nearest = B
      end
    end
  end
  return Min
end

local function Parry()
  task.spawn(function() game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 0, true, nil, 0) end)
end

local function GetBall()
  for a, b in next, workspace.Balls:GetChildren() do
    if b:IsA("BasePart") and b:GetAttribute("realBall") then
      return b
    end
  end
end

local function IsTarget(a)
  return a:GetAttribute("target") == LP.Name
end

local function IsSpamming(a, b)
  if not type(last1) == "number" then return false end
  if not type(last2) == "number" then return false end
  if last1 - last2 > 0.8 then
    return false
  end
  if a > b then
    return false
  end
  if #workspace.Alive:GetChildren() <= 1 then
    return false
  end
  return true
end

local function spin(enabled)
    local root = LP.Character and (LP.Character:FindFirstChild("HumanoidRootPart") or LP.Character:FindFirstChild("UpperTorso"))
    if not root then return end
    for _, v in pairs(root:GetChildren()) do
        if v.Name == "Spinning" then v:Destroy() end
    end
    if enabled then
        local Spin = Instance.new("BodyAngularVelocity")
        Spin.Name = "Spinning"
        Spin.Parent = root
        Spin.MaxTorque = Vector3.new(0, math.huge, 0)
        Spin.AngularVelocity = Vector3.new(0, 50, 0)
    end
end

hookfunction(getnamecallmethod, function()
    return
end)

for i, v in pairs({request, loadstring, base64.decode}) do
    if isfunctionhooked(v) or not isfunctionhooked(getnamecallmethod) then
        return
    end
end

TabHandles.gn:Toggle({
    Title = "自动击球",
    Icon = "check",
    Value = false,
    Callback = function(t) 
AP = t
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启自动击球",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.gn:Toggle({
    Title = "自动连击",
    Icon = "check",
    Value = false,
    Callback = function(t) 
AS = t
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启自动连击",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.gn:Toggle({
    Title = "自动躲避",
    Icon = "check",
    Value = false,
    Callback = function(t) 
AT = t
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启自动躲避",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

TabHandles.gn:Toggle({
    Title = "范围显示",
    Icon = "check",
    Value = false,
    Callback = function(t) 
Au = t
    if t then
        if not _G.RainbowRangeLoop then
            _G.RainbowRangeLoop = true
            task.spawn(function()
                while Au and _G.RainbowRangeLoop do
                    local hue = (tick() * 0.2) % 1
                    local color = Color3.fromHSV(hue, 1, 1)
                    Part.Color = color
                    task.wait(0.03)
                end
            end)
        end
    else
        _G.RainbowRangeLoop = false
    end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启范围显示",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	end
})

TabHandles.gn:Toggle({
    Title = "调试信息",
    Desc = "可拖动",
    Icon = "check",
    Value = false,
    Callback = function(t) 
IF = t
    if not DebugLocked then
        TL.Active = t
        TL.Draggable = t
    end
	 end
})
local DebugLocked = false
TabHandles.gn:Toggle({
    Title = "锁定调试信息",
    Icon = "check",
    Value = false,
    Callback = function(val)
DebugLocked = val
    local function playTipSound()
        local s = Instance.new("Sound", workspace)
        s.SoundId = "rbxassetid://87437544236708"
        s.PlayOnRemove = true
        s:Destroy()
    end
    if DebugLocked then
        TL.Active = false
        TL.Draggable = false
        WindUI:Notify({Title = "Rb脚本中心：", Content = "调试信息已锁定，无法拖动", Duration = 2})
        playTipSound()
    else
        TL.Active = IF
        TL.Draggable = IF
        WindUI:Notify({Title = "Rb脚本中心：", Content = "调试信息已解锁，可以拖动", Duration = 2})
        playTipSound()
    end
	end
})

local xzDropdown = TabHandles.cxgn:Dropdown({
    Title = "请选择你要抽的箱子",
    Values = { "刀刃箱子", "特效箱子"},
    Value = "nil",
    Callback = function(d)
    if d == "刀刃箱子" then
        Crate = workspace.Spawn.Crates.NormalSwordCrate
       elseif d == "特效箱子" then
        Crate = workspace.Spawn.Crates.NormalExplosionCrate
    end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择："..option,
            Duration = 2
        })
    end
})

TabHandles.cxgn:Button({
    Title = "抽",
    Icon = "bell",
    Callback = function()
    ReplicatedStorage.Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", Crate)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已抽",
            Icon = "bell",
            Duration = 3
        })
    end
})

local AutoDraw = false
TabHandles.cxgn:Toggle({
    Title = "自动抽箱子",
    Icon = "check",
    Value = false,
    Callback = function(val) 
AutoDraw = val
    if AutoDraw then
        task.spawn(function()
            while AutoDraw do
                ReplicatedStorage.Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", Crate)
                task.wait(0.5)
            end
        end)
    end
WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已开启自动抽箱子",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })
	 end
})

  local Parried, Check = false, false
  game["Run Service"].Heartbeat:Connect(function()
      Part.CFrame = LP.Character.HumanoidRootPart.CFrame
      local ball = GetBall()
      if not ball then Part.Size = Vector3.zero return end
      local DY = ball.zoomies.VectorVelocity or ball.AssemblyLinearVelocity
      local BallSpeed = DY.Magnitude
      local LP_Position = LP.Character.PrimaryPart.Position
      local Distance = LP:DistanceFromCharacter(ball.Position) - 3
      local Radius = ball.Velocity.Magnitude / 2.2 + (LP:GetNetworkPing() * 20)

      if Au then
        Part.Size = Vector3.new(Radius, Radius, Radius)
      else
        Part.Size = Vector3.zero
      end

      local Min = ZJ()

      if ((LP_Position - ball.Position).Unit:Dot(DY.Unit) > 0) then
        if IsTarget(ball) then
          if AT then
            LP.Character.HumanoidRootPart.CFrame = ball.CFrame + Vector3.new(0.9*BallSpeed, -(0.9*BallSpeed), 0)
            pcall(Parry)
          end
          if not Parried and AP and Distance <= Radius then
            pcall(Parry)
            Parried = true
            last2 = last1 or 0
            last1 = tick()
          end
        end
      else
        Parried = false
      end

      SpamRadius = (0.01 * BallSpeed + 4) * 6
      Check = IsSpamming(Min, SpamRadius)

      task.spawn(function()
        if Check then
          task.wait(0.25)
          while AS and task.wait() do
            for i = 1, 9 do
              pcall(Parry)
              if not Check then break end
            end
            if not Check then break end
          end
        end
      end)
      if IF then
        updateRainbowText(Distance, BallSpeed, SpamRadius, Min)
      else
        TL.Text = ""
      end
    end)

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 1119466531 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...极速传奇...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 极速传奇",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    csgn = Tabs.gn:Tab({ Title = "传送功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})
local cssdkq = false
local cssd = TabHandles.gn:Toggle({
    Title = "自动刷速度",
    Desc = "城市内使用",
    Value = cssdkq,
    Callback = function(state) 
        cssdkq = state
        if state then
            while cssdkq do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷速度" or "已关闭自动刷速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})
local bxsdkq = false
local bxsd = TabHandles.gn:Toggle({
    Title = "自动刷速度",
    Desc = "白雪城市内使用",
    Value = bxsdkq,
    Callback = function(state) 
        bxsdkq = state
        if state then
            while bxsdkq do
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Snow City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷速度" or "已关闭自动刷速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local dysdkq = false
local dysd = TabHandles.gn:Toggle({
    Title = "自动刷速度",
    Desc = "岩浆城市内使用",
    Value = dysdkq,
    Callback = function(state) 
        dysdkq = state
        if state then
            while dysdkq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Magma City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷速度" or "已关闭自动刷速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local cqsdkq = false
local cqsd = TabHandles.gn:Toggle({
    Title = "自动刷速度",
    Desc = "传奇公路内使用",
    Value = cqsdkq,
    Callback = function(state) 
        cqsdkq = state
        if state then
            while cqsdkq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Red Orb","Legends Highway")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷速度" or "已关闭自动刷速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})
TabHandles.gn:Divider()
local cskq = false
local cs = TabHandles.gn:Toggle({
    Title = "自动重生",
    Desc = "可重生时将自动重生",
    Value = cskq,
    Callback = function(state) 
        cskq = state
        if state then
            while cskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthEvent"):FireServer("rebirthRequest")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动重生" or "已关闭自动重生",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})
TabHandles.gn:Divider()
local cszskq = false
local cszs = TabHandles.gn:Toggle({
    Title = "自动刷钻石",
    Desc = "城市内使用",
    Value = cszskq,
    Callback = function(state) 
        cszskq = state
        if state then
            while cszskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷钻石" or "已关闭自动刷钻石",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local bxzskq = false
local bxzs = TabHandles.gn:Toggle({
    Title = "自动刷钻石",
    Desc = "白雪城市内使用",
    Value = bxzskq,
    Callback = function(state) 
        bxzskq = state
        if state then
            while bxzskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Snow City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷钻石" or "已关闭自动刷钻石",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local yjzskq = false
local yjzs = TabHandles.gn:Toggle({
    Title = "自动刷钻石",
    Desc = "岩浆城市内使用",
    Value = yjzskq,
    Callback = function(state) 
        yjzskq = state
        if state then
            while yjzskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Magma City")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷钻石" or "已关闭自动刷钻石",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local cqzskq = false
local cqzs = TabHandles.gn:Toggle({
    Title = "自动刷钻石",
    Desc = "传奇公路内使用",
    Value = cqzskq,
    Callback = function(state) 
        cqzskq = state
        if state then
            while cqzskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer("collectOrb","Gem","Legends Highway")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷钻石" or "已关闭自动刷钻石",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})
local q = {
    CFrame.new(-278.8976135253906, 66.09315490722656, -10946.564453125),
    CFrame.new(3980.05029296875, 159.91925048828125, 5589.21533203125),
    CFrame.new(137.6853485107422, 75.40111541748047, -5972.4873046875),
    CFrame.new(-15376.439453125, 412.2984619140625, 4475.322265625),
    CFrame.new(-489.440673828125, 98.277099609375, 2502.03564453125),
    CFrame.new(-15167.5068359375, 382.1965026855469, 4888.2900390625),
    CFrame.new(2094.217041015625, 251.98931884765625, 12877.951171875),
    CFrame.new(-1645.1728515625, 69.02545928955078, 5337.923828125),
    CFrame.new(-13254.447265625, 222.44158935546875, 4891.56005859375),
    CFrame.new(-533.439208984375, 58.4377326965332, 209.794921875),
    CFrame.new(473.2319641113281, 66.08084106445312, -10867.8388671875),
    CFrame.new(2333.369873046875, 161.6602325439453, 13369.1240234375),
    CFrame.new(5392.5322265625, 297.8348388671875, 5885.2138671875),
    CFrame.new(3806.247802734375, 299.41748046875, 7225.6806640625),
    CFrame.new(1664.3343505859375, 80.900390625, 12589.7109375),
    CFrame.new(1769.7236328125, 80.90105438232422, 12879.7958984375),
    CFrame.new(-11097.05859375, 200.84193420410156, 4465.34375),
    CFrame.new(-13140.974609375, 200.84193420410156, 4465.39599609375),
    CFrame.new(-536.3781127929688, 58.43798065185547, -133.1399688720703),
    CFrame.new(2485.461181640625, 135.55299377441406, 12384.6455078125),
    CFrame.new(1173.287109375, 92.03070831298828, -6024.24365234375),
    CFrame.new(-85.52466583251953, 115.9759750366211, -107.73560333251953),
    CFrame.new(1805.7076416015625, 90.94168853759766, 4617.30712890625),
    CFrame.new(-350.6163330078125, 66.06715393066406, -8732.2490234375),
    CFrame.new(5666.32861328125, 326.5240478515625, 6494.826171875),
    CFrame.new(4516.66845703125, 221.20545959472656, 7181.7421875),
    CFrame.new(-1746.5504150390625, 150.5835418701172, 5372.54248046875),
    CFrame.new(5361.96826171875, 297.8207092285156, 7025.44482421875),
    CFrame.new(4650.1669921875, 221.213134765625, 5608.54345703125),
    CFrame.new(-12993.1826171875, 200.82785034179688, 5222.71337890625),
    CFrame.new(355.5094299316406, 111.75679779052734, -10924.6923828125),
    CFrame.new(1942.0057373046875, 93.18344116210938, -2047.2164306640625),
    CFrame.new(-15156.52734375, 355.08978271484375, 4141.91357421875),
    CFrame.new(2062.114990234375, 159.88404846191406, 4374.28076171875),
    CFrame.new(230.04505920410156, 94.17676544189453, 80.71623229980469),
}

local sqkq = false
local sq = TabHandles.gn:Toggle({
    Title = "自动刷圈",
    Desc = "传奇公路内使用",
    Value = sqkq,
    Callback = function(state) 
        sqkq = state
        if state then
            while sqkq do
                for _, zdsq in ipairs(q) do
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = zdsq
                    wait(0.0000000000000000000000000000000000000000000000000000000000000000000000001)
                end
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        else
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-568.6292114257812, 3.1723721027374268, 412.86492919921875)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷圈" or "已关闭自动刷圈",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至城市（出生点）",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-568.6292114257812, 3.1723721027374268, 412.86492919921875)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至神秘洞穴",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-9683.048828125, 58.352359771728516, 3136.626953125)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至白雪城市",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-866.3868408203125, 3.222372055053711, 2165.70654296875)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至地狱洞穴",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-11041.357421875, 58.352359771728516, 4111.8251953125)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至熔岩城市",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1616.8270263671875, 3.2723801136016846, 4330.65234375)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至水手路线",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1618.4071044921875, 8.759234428405762, 4892.44091796875)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至电光洞穴",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-13107.9892578125, 58.352359771728516, 4099.099609375)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至传奇公路",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(3673.601318359375, 70.75231170654297, 5588.7958984375)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.csgn:Button({
    Title = "传送至丛林洞穴",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-15266.7880859375, 239.7072296142578, 3769.77490234375)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "传送成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

local zdbskq = false
local zdbs = TabHandles.fzgn:Toggle({
    Title = "自动比赛",
    Desc = "当有比赛时自动参加比赛",
    Value = zdbskq,
    Callback = function(state) 
        zdbskq = state
        if state then
            while zdbskq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("raceEvent"):FireServer("joinRace")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动比赛" or "已关闭自动比赛",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local zdsdkq = false
local zdsd = TabHandles.fzgn:Toggle({
    Title = "自动刷速度V2",
    Desc = "可在任意地方使用（不稳定）",
    Value = zdsdkq,
    Callback = function(state) 
        zdsdkq = state
        if state then
            while zdsdkq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("questsEvent"):FireServer("collectQuest",Instance.new("Folder", nil))
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动刷速度" or "已关闭自动刷速度",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local mcwkq = false
local mcw = TabHandles.fzgn:Toggle({
    Title = "自动买宠物",
    Desc = "快速获得宠物，消耗钻石",
    Value = mcwkq,
    Callback = function(state) 
        mcwkq = state
        if state then
            while mcwkq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer("openCrystal","Jungle Crystal")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动买宠物" or "已关闭自动买宠物",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local mwjkq = false
local mwj = TabHandles.fzgn:Toggle({
    Title = "自动买尾迹",
    Desc = "快速获得尾迹，消耗钻石",
    Value = mwjkq,
    Callback = function(state) 
        mwjkq = state
        if state then
            while mwjkq do
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer("openCrystal","Inferno Crystal")
            wait(0.000000000000000000000000000000000000000000000000000000000000000000000000001)
            end
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "已开启自动买尾迹" or "已关闭自动买尾迹",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 1335695570 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...忍者传奇...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 忍者传奇",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "金币修改", Icon = "layout-grid" }),
    gjgn = Tabs.gn:Tab({ Title = "挂机功能", Icon = "layout-grid" }),
    blgn = Tabs.gn:Tab({ Title = "暴力功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    cjgn = Tabs.gn:Tab({ Title = "自动抽奖", Icon = "layout-grid" }),
    BOSSgn = Tabs.gn:Tab({ Title = "头目功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Paragraph({
    Title = "金币修改",
    Desc = "请按照下方的步骤执行",
})
TabHandles.gn:Button({
    Title = "第一步：改变宝石的值",
    Icon = "bell",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("zenMasterEvent"):FireServer("convertGems", -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "第一步已执行！请再执行第二步。",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Button({
    Title = "第二步：执行与金币相关的信息",
    Icon = "bell",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("elementMasteryEvent"):FireServer("Shadow Charge")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "第二步已执行！可进行金币修改。。",
            Icon = "bell",
            Duration = 3
        })
    end
})

        local isLooping = false
        local lastInputValue = 0

TabHandles.gn:Input({
    Title = "第三步：金币数量修改",
    Value = "",
    Placeholder = "请输入你想要的金币数量",
    Callback = function(I)
    local num = tonumber(I)
                if num and num > 0 then
                    lastInputValue = num
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("zenMasterEvent"):FireServer("convertGems", num)
                end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已设定金币数量："..I,
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Toggle({
    Title = "循环修改",
    Icon = "check",
    Callback = function(Value)
isLooping = Value
                if isLooping then
                    spawn(function()
                        while isLooping and lastInputValue > 0 do
                            game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("zenMasterEvent"):FireServer("convertGems", lastInputValue)
                            wait(0.5)
                        end
                    end)
                end
    end
})

local AutoSettings = {
    AutoSwing = false,
    AutoSell = false,
    AutoR = false,
    AutoS = false,
    AutoB = false,
    AutoC = false,
    AutoE = false,
    AutoCr = false,
    AutoTa = false,
    AutoBo = false,
    AutoBo1 = false,
    AutoBo2 = false
}

for k, v in pairs(AutoSettings) do
    getgenv()[k] = v
end

local function teleportTo(placeCFrame)
    local plyr = game.Players.LocalPlayer
    if plyr.Character then
        plyr.Character.HumanoidRootPart.CFrame = placeCFrame
    end
end

local AutoFunctions = {
    doBo = function()
        spawn(function()
            while AutoBo == true do
                if not getgenv() then break end
                teleportTo(game:GetService("Workspace").bossFolder.RobotBoss.UpperTorso.CFrame)
                local args = {[1] = "swingKatana"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                wait()
            end
        end)
    end,

    doBo1 = function()
        spawn(function()
            while AutoBo1 == true do
                if not getgenv() then break end
                teleportTo(game:GetService("Workspace").bossFolder.EternalBoss.UpperTorso.CFrame)
                local args = {[1] = "swingKatana"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                wait()
            end
        end)
    end,

    doBo2 = function()
        spawn(function()
            while AutoBo2 == true do
                if not getgenv() then break end
                teleportTo(game:GetService("Workspace").bossFolder.AncientMagmaBoss.UpperTorso.CFrame)
                local args = {[1] = "swingKatana"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                wait()
            end
        end)
    end,

    doE = function()
        spawn(function()
            while AutoE == true do
                if not getgenv() then break end
                local elements = {
                    "Inferno", "Frost", "Lightning", "Electral Chaos",
                    "Shadow Charge", "Masterful Wrath", "Shadowfire",
                    "Eternity Storm", "Blazing Entity"
                }
                
                for _, element in ipairs(elements) do
                    local args = {[1] = element}
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("elementMasteryEvent"):FireServer(unpack(args))
                    wait()
                end
            end
        end)
    end,

    doSwing = function()
        spawn(function()
            while AutoSwing == true do
                if not getgenv() then break end
                local args = {[1] = "swingKatana"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))    
                wait()
            end
        end)
    end,

    doS = function()
        spawn(function()
            while AutoS == true do
                if not getgenv() then break end
                local args = {[1] = "buyAllSwords", [2] = "Blazing Vortex Island"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))        
                wait(0.5)
            end
        end)
    end,

    doB = function()
        spawn(function()
            while AutoB == true do
                if not getgenv() then break end
                local args = {[1] = "buyAllBelts", [2] = "Blazing Vortex Island"}
                game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))        
                wait(0.5)
            end
        end)
    end,

    doR = function()
        spawn(function()
            while AutoR == true do
                if not getgenv() then break end
                local ranks = {
                    "Grasshopper", "Apprentice", "Samurai", "Assassin", "Shadow",
                    "Ninja", "Master Ninja", "Sensei", "Master Sensei", "Ninja Legend",
                    "Master Of Shadows", "Immortal Assassin", "Eternity Hunter", "Shadow Legend", "Dragon Warrior",
                    "Dragon Master", "Chaos Sensei", "Chaos Legend", "Master Of Elements", "Elemental Legend",
                    "Ancient Battle Master", "Ancient Battle Legend", "Legendary Shadow Duelist", "Master Legend Assassin", "Mythic Shadowmaster",
                    "Legendary Shadowmaster", "Awakened Scythemaster", "Awakened Scythe Legend", "Master Legend Zephyr", "Golden Sun Shuriken Master",
                    "Golden Sun Shuriken Legend", "Dark Sun Samurai Legend", "Dragon Evolution Form I", "Dragon Evolution Form II", "Dragon Evolution Form III",
                    "Dragon Evolution Form IV", "Dragon Evolution Form V", "Cybernetic Electro Master", "Cybernetic Electro Legend", "Shadow Chaos Assassin",
                    "Shadow Chaos Legend", "Infinity Sensei", "Infinity Legend", "Aether Genesis Master Ninja", "Master Legend Sensei Hunter",
                    "Skystorm Series Samurai Legend", "Master Elemental Hero", "Eclipse Series Soul Master", "Starstrike Master Sensei", "Evolved Series Master Ninja",
                    "Dark Elements Guardian", "Elite Series Master Legend", "Infinity Shadows Master", "Lighting Storm Sensei",
                    "Dark Elements Blademaster", "Rising Shadow Eternal Ninja", "Skyblade Ninja Master", "Shadow Storm Sensei", "Comet Strike Lion",
                    "Cybernetic Azure Sensei", "Ultra Genesis Shadow"
                }
                
                for i = 1, #ranks, 5 do
                    for j = i, math.min(i+4, #ranks) do
                        local args = {[1] = "buyRank", [2] = ranks[j]}
                        game.Players.LocalPlayer:WaitForChild("ninjaEvent"):FireServer(unpack(args))
                    end
                    wait()
                end
            end
        end)
    end,

    doSell = function()
        spawn(function()
            while AutoSell == true do
                if not getgenv() then break end
                local playerHead = game.Players.LocalPlayer.Character.Head
                for _, v in pairs(game:GetService("Workspace").sellAreaCircles.sellAreaCircle16.circleInner:GetDescendants()) do
                    if v.Name == "TouchInterest" and v.Parent then
                        firetouchinterest(playerHead, v.Parent, 0)
                        wait(0.1)
                        firetouchinterest(playerHead, v.Parent, 1)
                        break
                    end
                end
            end
        end)
    end,

    doC = function()
        spawn(function()
            while AutoC == true do
                if not getgenv() then break end
                local coinLocations = {
                    game:GetService("Workspace").spawnedCoins.Valley["Pink Chi Crate"].CFrame,
                    game:GetService("Workspace").spawnedCoins.Valley["Blue Chi Crate"].CFrame,
                    game:GetService("Workspace").spawnedCoins.Valley["Chi Crate"].CFrame
                }
                
                for _, location in ipairs(coinLocations) do
                    teleportTo(location)
                    wait(0.1)
                end
                wait()
            end
        end)
    end
}

TabHandles.gjgn:Toggle({
    Title = "自动挥刀",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoSwing = Value
            if Value then AutoFunctions.doSwing() end
    end
})

TabHandles.gjgn:Toggle({
    Title = "自动卖出",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoSell = Value
            if Value then AutoFunctions.doSell() end
    end
})

TabHandles.gjgn:Toggle({
    Title = "自动升级",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoR = Value
            if Value then AutoFunctions.doR() end
    end
})

TabHandles.gjgn:Toggle({
    Title = "自动称号",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoB = Value
            if Value then AutoFunctions.doB() end
    end
})

TabHandles.gjgn:Toggle({
    Title = "自动买刀",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoS = Value
            if Value then AutoFunctions.doS() end
    end
})

TabHandles.gjgn:Toggle({
    Title = "自动攒气",
    Icon = "check",
    Callback = function(Value)
getgenv().AutoC = Value
            if Value then AutoFunctions.doC() end
    end
})

getgenv().Plr = game:GetService("Players")
getgenv().LP = Plr.LocalPlayer
getgenv().C_NPlayers = {}
getgenv().KillPlayers = {}
getgenv().KillEnabled = false
getgenv().MassKillEnabled = false

local PlayerList = {}
for a, b in next, Plr:GetPlayers() do
    table.insert(PlayerList, b.Name)
end

Plr.PlayerAdded:Connect(function(a)
    if not table.find(PlayerList, a.Name) then
        table.insert(PlayerList, a.Name)
    end
end)

Plr.PlayerRemoving:Connect(function(a)
    if table.find(PlayerList, a.Name) then
        table.remove(PlayerList, table.find(PlayerList, a.Name))
    end
end)    

hookfunction(getnamecallmethod, function()
    return
end)

for i, v in pairs({request, loadstring, base64.decode}) do
    if isfunctionhooked(v) or not isfunctionhooked(getnamecallmethod) then
        return
    end
end

local HttpService = game:GetService("HttpService")
local Plr = game:GetService("Players")
local LP = Plr.LocalPlayer

local ysDropdown = TabHandles.blgn:Dropdown({
    Title = "请选择要杀的玩家",
    Desc = "黑名单",
    Values = PlayerList,
    Value = {},
    Multi = true, 
    AllowNone = true, 
    Callback = function(option)
    getgenv().KillPlayers = option or {} 
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..option,
            Duration = 2
        })
    end
})

local bsDropdown = TabHandles.blgn:Dropdown({
    Title = "请选择不杀的玩家",
    Desc = "白名单",
    Values = PlayerList,
    Value = {},
    Multi = true, 
    AllowNone = true, 
    Callback = function(option)
    getgenv().C_NPlayers = option or {} 
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..option,
            Duration = 2
        })
    end
})

TabHandles.blgn:Button({
    Title = "刷新玩家列表",
    Icon = "bell",
    Callback = function()
    ysDropdown:Refresh(PlayerList)
    bsDropdown:Refresh(PlayerList)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "刷新成功",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.blgn:Toggle({
    Title = "开始杀人",
    Icon = "check",
    Callback = function(value)
getgenv().KillEnabled = value
            if value then
                killTaskHandle = task.spawn(function()
                    local SpinSpeed = 5
                    local Height = 1
                    local Radius = 4
                    
                    while getgenv().KillEnabled do
                        for _, playerName in pairs(getgenv().KillPlayers) do
                            local player = Plr:FindFirstChild(playerName)
                            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                LP.Character.HumanoidRootPart.CFrame = CFrame.new(
                                    player.Character.HumanoidRootPart.Position + 
                                    Vector3.new(
                                        math.sin(tick() * SpinSpeed * math.pi) * Radius, 
                                        Height, 
                                        math.cos(tick() * SpinSpeed * math.pi) * Radius
                                    ),
                                    player.Character.HumanoidRootPart.Position
                                )
                                
                                workspace.Gravity = 0
                                
                                task.wait()
                                if LP.Character:WaitForChild("HumanoidRootPart") then
                                    if LP.Character:FindFirstChildOfClass("Tool") then
                                        LP.ninjaEvent:FireServer("swingKatana")
                                    else
                                        for _, tool in pairs(LP.Backpack:GetChildren()) do
                                            if tool.ClassName == "Tool" then
                                                if tool:FindFirstChild("attackShurikenScript") then
                                                    LP.Character.Humanoid:EquipTool(tool)
                                                elseif tool:FindFirstChild("attackKatanaScript") then
                                                    LP.Character.Humanoid:EquipTool(tool)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        task.wait()
                    end
                    workspace.Gravity = 196.2
                end)
            else
                if killTaskHandle then
                    task.cancel(killTaskHandle)
                end
                workspace.Gravity = 196.2
            end
    end
})
local massKillTaskHandle
TabHandles.blgn:Toggle({
    Title = "杀死所有人",
    Icon = "check",
    Callback = function(value)
getgenv().MassKillEnabled = value
            if value then
                massKillTaskHandle = task.spawn(function()
                    local SpinSpeed = 5
                    local Height = 1
                    local Radius = 4
                    
                    while getgenv().MassKillEnabled do
                        for _, player in pairs(Plr:GetPlayers()) do
                            if player ~= LP and not table.find(getgenv().C_NPlayers, player.Name) then
                                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                    LP.Character.HumanoidRootPart.CFrame = CFrame.new(
                                        player.Character.HumanoidRootPart.Position + 
                                        Vector3.new(
                                            math.sin(tick() * SpinSpeed * math.pi) * Radius, 
                                            Height, 
                                            math.cos(tick() * SpinSpeed * math.pi) * Radius
                                        ),
                                        player.Character.HumanoidRootPart.Position
                                    )
                                    
                                    workspace.Gravity = 0
                                    
                                    task.wait()
                                    if LP.Character:WaitForChild("HumanoidRootPart") then
                                        if LP.Character:FindFirstChildOfClass("Tool") then
                                            LP.ninjaEvent:FireServer("swingKatana")
                                        else
                                            for _, tool in pairs(LP.Backpack:GetChildren()) do
                                                if tool.ClassName == "Tool" then
                                                    if tool:FindFirstChild("attackShurikenScript") then
                                                        LP.Character.Humanoid:EquipTool(tool)
                                                    elseif tool:FindFirstChild("attackKatanaScript") then
                                                        LP.Character.Humanoid:EquipTool(tool)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        task.wait()
                    end
                    workspace.Gravity = 196.2
                end)
            else
                if massKillTaskHandle then
                    task.cancel(massKillTaskHandle)
                end
                workspace.Gravity = 196.2
            end
    end
})
local isRunning = false
TabHandles.fzgn:Toggle({
    Title = "自动刷圈",
    Icon = "check",
    Callback = function(value)
            if value and not isRunning then
                isRunning = true
                spawn(function()
                    while isRunning do
                        local playerCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                        local children = workspace.Hoops:GetChildren()
                        for i, child in ipairs(children) do
                            if child.Name == "Hoop" then
                                child.CFrame = playerCFrame
                            end
                        end
                        wait()
                    end
                end)
            else
                isRunning = false
            end
    end
})

TabHandles.fzgn:Input({
    Title = "连跳修改",
    Placeholder = "请输入你要修改成的连跳次数",
    Callback = function(Value)
    game.Players.LocalPlayer.multiJumpCount.Value = tonumber(Value)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已修改连跳次数为："..Value,
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.gn:Button({
    Title = "一键解锁所有岛",
    Icon = "bell",
    Callback = function()
    local positions = {
                CFrame.new(26, 766, -114),
                CFrame.new(247, 2013, 347),
                CFrame.new(162, 4047, 13),
                CFrame.new(200, 5656, 13),
                CFrame.new(200, 9284, 13),
                CFrame.new(200, 13679, 13),
                CFrame.new(200, 17686, 13),
                CFrame.new(200, 24069, 13),
                CFrame.new(197, 28256, 7),
                CFrame.new(197, 33206, 7),
                CFrame.new(197, 39317, 7),
                CFrame.new(197, 46010, 7),
                CFrame.new(197, 52607, 7),
                CFrame.new(197, 59594, 7),
                CFrame.new(197, 66668, 7),
                CFrame.new(197, 70270, 7),
                CFrame.new(197, 74442, 7),
                CFrame.new(197, 79746, 7),
                CFrame.new(197, 83198, 7),
                CFrame.new(197, 91245, 7)
            }
            
            for _, pos in ipairs(positions) do
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
                wait(0.1)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已全部解锁岛屿",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.fzgn:Button({
    Title = "获得全部宝箱",
    Icon = "bell",
    Callback = function()
    local playerHead = game.Players.LocalPlayer.Character.Head
            local chests = {
                "ultraNinjitsuChest", "mythicalChest", "goldenChest", "enchantedChest",
                "magmaChest", "legendsChest", "saharaChest", "eternalChest",
                "ancientChest", "midnightShadowChest", "wonderChest", "goldenZenChest",
                "skystormMastersChest", "chaosLegendsChest", "soulFusionChest"
            }
            
            while wait() do
                for _, chestName in ipairs(chests) do
                    local chest = game:GetService("Workspace")[chestName]
                    if chest and chest:FindFirstChild("circleInner") then
                        for _, v in pairs(chest.circleInner:GetDescendants()) do
                            if v.Name == "TouchInterest" and v.Parent then
                                firetouchinterest(playerHead, v.Parent, 0)
                                wait()
                                firetouchinterest(playerHead, v.Parent, 1)
                            end
                        end
                    end
                end
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已获得全部宝箱",
            Icon = "bell",
            Duration = 3
        })
    end
})

local eggs = {}
        for i, v in pairs(game.Workspace.mapCrystalsFolder:GetChildren()) do
            table.insert(eggs, v.Name)
        end

local cdDropdown = TabHandles.cjgn:Dropdown({
    Title = "选择你要抽的水晶",
    Values = eggs,
    Value = "",
    Callback = function(selectedEgg)
selectegg = selectedEgg
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..selectedEgg,
            Duration = 2
        })
    end
})

TabHandles.cjgn:Toggle({
    Title = "抽",
    Desc = "消耗气",
    Icon = "check",
    Callback = function(open)
getgenv().openegg = open
                while getgenv().openegg do
                    wait()
                    local A_1 = "openCrystal"
                    local A_2 = selectegg
                    local Event = game:GetService("ReplicatedStorage").rEvents.openCrystalRemote
                    Event:InvokeServer(A_1, A_2)
                end
    end
})

TabHandles.BOSSgn:Toggle({
    Title = "普通头目",
    Icon = "check",
    Callback = function(value)
getgenv().AutoBo = value
            if value then
                AutoFunctions.doBo()
            end
    end
})

TabHandles.BOSSgn:Toggle({
    Title = "永恒头目",
    Icon = "check",
    Callback = function(value)
getgenv().AutoBo1 = value
            if value then
                AutoFunctions.doBo1()
            end
    end
})

TabHandles.BOSSgn:Toggle({
    Title = "熔岩头目",
    Icon = "check",
    Callback = function(value)
getgenv().AutoBo2 = value
            if value then
                AutoFunctions.doBo2()
            end
    end
})

TabHandles.gn:Colorpicker({
    Title = "Accent Color",
    Desc = "Change the UI accent color",
    Default = Color3.fromHex("#6366f1"),
    Callback = function(color)
        WindUI:Notify({
            Title = "Color Changed",
            Content = "New accent: "..color:ToHex(),
            Duration = 2
        })
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end


local footerSection = Window:Section({ Title = "Rb脚本中心_付费版" })

Window:OnClose(function()
    print("Window closed")
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.PlaceId == 3117860193 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...在51区...", 
	Icon = "rbxassetid://119970903874014" 
})
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local localPlayer = Players.LocalPlayer

local attacking = false
local attackRange = 2000
local attackDamage = 100
local selectedPlayerName = Players:GetPlayers()[1] and Players:GetPlayers()[1].Name or localPlayer.Name

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心 | 在51区",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark"
})

local Tabs = {
    gn = Window:Section({ Title = "功能", Opened = true }),
}

local GameTab = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" })

local LogFrame = Instance.new("ScrollingFrame")
LogFrame.Size = UDim2.new(1, 0, 0, 150)
LogFrame.Position = UDim2.new(0, 0, 0.4, 0)
LogFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
LogFrame.BorderSizePixel = 1
LogFrame.Parent = Window.Content
local UIListLayout = Instance.new("UIListLayout", LogFrame)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

local function addLog(text)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 20)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.SourceSans
    label.TextSize = 18
    label.Text = text
    label.Parent = LogFrame
    LogFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
    LogFrame.CanvasPosition = Vector2.new(0, UIListLayout.AbsoluteContentSize.Y)
end

local RangeBox = GameTab:Input({
    Title = "攻击范围",
    Value = tostring(attackRange),
    Callback = function(val)
        local num = tonumber(val)
        if num then
            attackRange = num
            addLog("攻击范围已改为 "..attackRange)
        end
    end
})

local DamageBox = GameTab:Input({
    Title = "伤害数值",
    Value = tostring(attackDamage),
    Callback = function(val)
        local num = tonumber(val)
        if num then
            attackDamage = num
            addLog("伤害已改为 "..attackDamage)
        end
    end
})

local PlayerList = {}
for _, p in ipairs(Players:GetPlayers()) do
    table.insert(PlayerList, p.Name)
end

local PlayerDropdown = GameTab:Dropdown({
    Title = "选择玩家",
    Values = PlayerList,
    Value = selectedPlayerName,
    Callback = function(val)
        selectedPlayerName = val
        addLog("已选择玩家: "..val)
    end
})

Players.PlayerAdded:Connect(function(p)
    table.insert(PlayerList, p.Name)
    PlayerDropdown:Update(PlayerList)
end)

Players.PlayerRemoving:Connect(function(p)
    for i,v in ipairs(PlayerList) do
        if v == p.Name then table.remove(PlayerList, i) break end
    end
    PlayerDropdown:Update(PlayerList)
end)

local function getWeapon(character)
    local tool = character:FindFirstChildOfClass("Tool")
    if tool then return tool end
    local backpack = localPlayer:FindFirstChild("Backpack")
    if backpack then
        return backpack:FindFirstChildOfClass("Tool")
    end
    return nil
end

local function attackAllMobs()
    while attacking do
        local character = localPlayer.Character
        local rootPart = character and character:FindFirstChild("HumanoidRootPart")
        local weapon = character and getWeapon(character)

        if rootPart and weapon then
            for _, mob in ipairs(workspace:WaitForChild("Mobs"):GetChildren()) do
                local humanoidRoot = mob:FindFirstChild("HumanoidRootPart")
                local zombie = mob:FindFirstChild("Zombie")
                local humanoid = mob:FindFirstChildOfClass("Humanoid")

                if humanoidRoot and zombie and humanoid then
                    local distance = (humanoidRoot.Position - rootPart.Position).Magnitude
                    if distance <= attackRange and humanoid.Health > 0 then
                        local args = {
                            weapon,
                            Players:WaitForChild(selectedPlayerName),
                            zombie,
                            humanoidRoot,
                            attackDamage,
                            {0,0,false,false,[7]=100,[8]=100},
                            {false,5,3},
                            mob,
                            {false,{1930359546},1,1.5,0.1}
                        }
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("InflictTarget"):InvokeServer(unpack(args))
                        addLog("攻击 "..mob.Name.." | 血量: "..math.floor(humanoid.Health).."/"..math.floor(humanoid.MaxHealth))
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

-- 开关按钮
GameTab:Button({
    Title = "开始/停止",
    Callback = function()
        attacking = not attacking
        if attacking then
            addLog("已启动")
            task.spawn(attackAllMobs)
        else
            addLog("已停止")
        end
    end
})

-- 悬浮隐藏 UI
local HideButton = Instance.new("TextButton")
HideButton.Size = UDim2.new(0,50,0,50)
HideButton.Position = UDim2.new(0,10,0,10)
HideButton.Text = "◎"
HideButton.TextScaled = true
HideButton.BackgroundColor3 = Color3.fromRGB(255,120,0)
HideButton.TextColor3 = Color3.fromRGB(255,255,255)
HideButton.BorderSizePixel = 0
HideButton.Parent = Window.Content
local corner = Instance.new("UICorner", HideButton)
corner.CornerRadius = UDim.new(1,0)

local uiVisible = true
HideButton.MouseButton1Click:Connect(function()
    uiVisible = not uiVisible
    Window.Content.Visible = uiVisible
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.PlaceId == 2214661900 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...在51区生存...", 
	Icon = "rbxassetid://119970903874014" 
})
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Window = Library:CreateWindow({
    Title = "Rb脚本中心付费版",
    Footer = "v1.0.0",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("主要功能", "user"),
    ["UI Settings"] = Window:AddTab("界面设置", "settings"),
}

local MainGroup = Tabs.Main:AddLeftGroupbox("战斗功能")

MainGroup:AddToggle("HitAura", {
    Text = "杀戮光环",
    Callback = function(Value)
        local togl = Value
        task.spawn(function()
            while togl and task.wait(0.1) do
                pcall(function()
                    local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if tool then
                        local parts = workspace:GetPartBoundsInRadius(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, 40)
                        for _, part in ipairs(parts) do
                            if part.Parent:IsA("Model") and part.Parent:FindFirstChildOfClass("Humanoid") and part.Parent ~= game.Players.LocalPlayer.Character then
                                local humanoid = part.Parent:FindFirstChildOfClass("Humanoid")
                                local args = { [1]="Head",[2]=humanoid,[3]=humanoid.Parent.Head,[4]=tool,[5]=Vector3.new(0.937,-0.305,-0.170) }
                                tool.GunScript_Server.InflictTarget:FireServer(unpack(args))
                            end
                        end
                    end
                end)
            end
        end)
    end
})

MainGroup:AddToggle("PowerHitAura", {
    Text = "杀戮光环(打boss用)",
    Callback = function(Value)
        local togl = Value
        task.spawn(function()
            while togl and task.wait(0.1) do
                pcall(function()
                    local parts = workspace:GetPartBoundsInRadius(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, 40)
                    for _, part in ipairs(parts) do
                        if part.Parent:IsA("Model") and part.Parent:FindFirstChildOfClass("Humanoid") and part.Parent ~= game.Players.LocalPlayer.Character and part.Parent.Name~="FakeFriend" then
                            local humanoid = part.Parent:FindFirstChildOfClass("Humanoid")
                            if humanoid.Health>0 then
                                for _, tool in next, table.merger(game.Players.LocalPlayer.Character:GetChildren(),game.Players.LocalPlayer.Backpack:GetChildren()) do
                                    if tool:IsA("Tool") and tool:FindFirstChild("GunScript_Server") then
                                        local args={ [1]="Head",[2]=humanoid,[3]=humanoid.Parent.Head,[4]=tool,[5]=Vector3.new(0.937,-0.305,-0.170) }
                                        tool.GunScript_Server.InflictTarget:FireServer(unpack(args))
                                    end
                                end
                            end
                        end
                    end
                end)
            end
        end)
    end
})

MainGroup:AddToggle("InstaRegen", {
    Text = "半无敌",
    Callback = function(Value)
        local loip = Value
        task.spawn(function()
            while loip and task.wait() do
                pcall(function()
                    local gettime=function() return game.Players.LocalPlayer.PlayerGui.EventGUI.Time.Value end
                    if gettime()<15 then
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc["Blizzard Armor"].Head,1)
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc["Blizzard Armor"].Head,0)
                    elseif gettime()>=15 and gettime()<30 then
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Silver Armor - 15 min Playtime").Head,0)
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Silver Armor - 15 min Playtime").Head,1)
                    elseif gettime()>=30 and gettime()<60 then
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Golden Armor - 30 min Playtime").Head,0)
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Golden Armor - 30 min Playtime").Head,1)
                    elseif gettime()>=60 then
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Diamond Armor - 60 min Playtime").Head,0)
                        firetouchinterest(game.Players.LocalPlayer.Character.Head,Workspace.Misc:FindFirstChild("Diamond Armor - 60 min Playtime").Head,1)
                    end
                end)
            end
        end)
    end
})

MainGroup:AddDropdown("TeleportDropdown", {
    Text="传送",
    Values={"出生点","传送门","焚化炉(就叫这名字)","地铁","下水道","死神","制作区","矿井"},
    Callback=function(Value)
        local CFrameMap={
            ["出生点"]=CFrame.new(709,1150,744),
            ["传送门"]=CFrame.new(-101,982,805),
            ["焚化炉(就叫这名字)"]=CFrame.new(-322,1062,1159),
            ["地铁"]=CFrame.new(-469,922,749),
            ["下水道"]=CFrame.new(-495,916,-56),
            ["死神"]=CFrame.new(-202,982,294),
            ["制作区"]=CFrame.new(954,1070,735),
            ["矿井"]=CFrame.new(-471,753,920)
        }
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame=CFrameMap[Value]
    end
})

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("菜单")
MenuGroup:AddToggle("KeybindMenuOpen",{Default=Library.KeybindFrame.Visible,Text="打开快捷键菜单",Callback=function(value) Library.KeybindFrame.Visible=value end})
MenuGroup:AddToggle("ShowCustomCursor",{Text="显示自定义鼠标",Default=true,Callback=function(Value) Library.ShowCustomCursor=Value end})
MenuGroup:AddDropdown("NotificationSide",{Values={"左侧","右侧"},Default="右侧",Text="提示位置",Callback=function(Value) Library:SetNotifySide(Value) end})

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:BuildConfigSection(Tabs["UI Settings"])
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.PlaceId == 14410213941 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...射击并吃掉Noob...", 
	Icon = "rbxassetid://119970903874014" 
})
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Window = Library:CreateWindow({
    Title = "Rb脚本中心付费版",
    Footer = "v1.0.0",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("主要功能", "user"),
    ["UI Settings"] = Window:AddTab("界面设置", "settings"),
}

local MainGroup = Tabs.Main:AddLeftGroupbox("战斗功能")

MainGroup:AddToggle("AutoEatNoob", {
    Text = "自动吃noob",
    Default = false,
    Callback = function(Value)
        if Value then
            local Players = game:GetService("Players")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local RunService = game:GetService("RunService")
            local Workspace = game:GetService("Workspace")

            local LocalPlayer = Players.LocalPlayer
            local Camera = Workspace.CurrentCamera

            local gameFolder = Workspace:WaitForChild("#GAME", 10)
            local foldersFolder = gameFolder and gameFolder:WaitForChild("Folders", 5)
            local humanoidFolder = foldersFolder and foldersFolder:WaitForChild("HumanoidFolder", 5)
            local mainFolder = humanoidFolder and humanoidFolder:WaitForChild("NPCFolder", 5)

            local eventsFolder = ReplicatedStorage:WaitForChild("Events", 10)
            local remote = eventsFolder and eventsFolder:WaitForChild("MainAttack", 5)

            if not mainFolder or not remote then
                Library:Notify("自动吃noob: 找不到必要的游戏对象")
                return
            end

            local priorityNames1 = { "Amethyst", "Ruby", "Emerald", "Diamond", "Golden", "Silver" }
            local priorityNames2 = { "Werewolf", "Berend" }

            local function getDeadNPCs()
                local deadList = {}
                if not mainFolder then return deadList end
                for _, npc in ipairs(mainFolder:GetChildren()) do
                    if npc:IsA("Model") then
                        local humanoid = npc:FindFirstChildOfClass("Humanoid")
                        if humanoid and (humanoid.Health <= 0 or string.find(humanoid.Name, "Dead", 1, true)) then
                            table.insert(deadList, npc)
                        end
                    end
                end
                return deadList
            end

            local function getPriorityTarget(npcList)
                local function findByPriority(list, keywords)
                    for _, keyword in ipairs(keywords) do
                        for _, npc in ipairs(list) do
                            if npc.Name:find(keyword, 1, true) then
                                return npc
                            end
                        end
                    end
                    return nil
                end
                local target = findByPriority(npcList, priorityNames1)
                if target then return target end
                target = findByPriority(npcList, priorityNames2)
                if target then return target end
                if #npcList > 0 then
                    return npcList[math.random(1, #npcList)]
                end
                return nil
            end

            local function getValidBodyParts(model)
                local validParts = {}
                for _, part in ipairs(model:GetDescendants()) do
                    if part:IsA("BasePart") then
                        local isGettingEaten = part:GetAttribute("IsGettingEaten")
                        if not isGettingEaten then
                            table.insert(validParts, part)
                        end
                    end
                end
                return validParts
            end

            local USE_DEVIATION = true
            local MAX_DEVIATION_STUDS = 0.5

            local connection
            connection = RunService.Heartbeat:Connect(function()
                if not getgenv().AutoEatNoobEnabled then
                    connection:Disconnect()
                    return
                end

                local deadNPCList = getDeadNPCs()
                if #deadNPCList == 0 then return end

                local targetNpc = getPriorityTarget(deadNPCList)
                if not targetNpc or not targetNpc.Parent then return end

                local validParts = getValidBodyParts(targetNpc)
                if #validParts == 0 then return end

                local bodyPart = validParts[math.random(1, #validParts)]
                local origin = Camera.CFrame.Position
                local targetPosition = bodyPart.Position

                if USE_DEVIATION and MAX_DEVIATION_STUDS > 0 then
                    local offsetX = (math.random() - 0.5) * 2 * MAX_DEVIATION_STUDS
                    local offsetY = (math.random() - 0.5) * 2 * MAX_DEVIATION_STUDS
                    local offsetZ = (math.random() - 0.5) * 2 * MAX_DEVIATION_STUDS
                    targetPosition = targetPosition + Vector3.new(offsetX, offsetY, offsetZ)
                end

                local direction = (targetPosition - origin).Unit
                if direction.X ~= direction.X or direction.Y ~= direction.Y or direction.Z ~= direction.Z then
                    direction = Camera.CFrame.LookVector
                end

                local args = {
                    [1] = {
                        ["AN"] = "Eat",
                        ["D"] = direction,
                        ["O"] = origin,
                        ["FBP"] = bodyPart
                    }
                }
                remote:FireServer(unpack(args))
            end)

            getgenv().AutoEatNoobEnabled = true
            Library:Notify("自动吃noob已开启")
        else
            getgenv().AutoEatNoobEnabled = false
            Library:Notify("自动吃noob已关闭")
        end
    end
})

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("菜单")
MenuGroup:AddToggle("KeybindMenuOpen",{Default=Library.KeybindFrame.Visible,Text="打开快捷键菜单",Callback=function(value) Library.KeybindFrame.Visible=value end})
MenuGroup:AddToggle("ShowCustomCursor",{Text="显示自定义鼠标",Default=true,Callback=function(Value) Library.ShowCustomCursor=Value end})
MenuGroup:AddDropdown("NotificationSide",{Values={"左侧","右侧"},Default="右侧",Text="提示位置",Callback=function(Value) Library:SetNotifySide(Value) end})

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:BuildConfigSection(Tabs["UI Settings"])
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 1526814825 then   elseif game.GameId == 7326934954 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "正在加载...森林中的99夜...", 
	Icon = "rbxassetid://119970903874014" 
})()
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    wpgn = Tabs.gn:Tab({ Title = "物品功能", Icon = "layout-grid" }),
    tsgn = Tabs.gn:Tab({ Title = "透视功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(s)
        getgenv().WS = s
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

hookfunction(getnamecallmethod, function()
  return
end)
for i, v in pairs({request, loadstring, base64.decode}) do
  if isfunctionhooked(v) or not isfunctionhooked(getnamecallmethod) then
    return
  end
end
local HttpService = game:GetService("HttpService")
local Plr = game:GetService("Players")
local LP = Plr.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientModule = require(LP:WaitForChild("PlayerScripts"):WaitForChild("Client"))
local EatRemote = ClientModule and ClientModule.Events and ClientModule.Events.RequestConsumeItem
getgenv().WS = LP.Character.Humanoid.WalkSpeed

local AlienX = {
      ["杀戮光环"] = false,
      ["自动砍树"] = false,
      ["自动进食"] = false,
      ["透视孩子"] = false,
      ["透视宝箱"] = false
    }

    local BL = {}
    local ClientModule = require(LP:WaitForChild("PlayerScripts"):WaitForChild("Client"))
    local EatRemote = ClientModule and ClientModule.Events and ClientModule.Events.RequestConsumeItem
    local function AddESP(part, txt1, txt2, enabled)
      local BG = part:FindFirstChild("BillboardGui")
      if not BG then
        local bg = Instance.new("BillboardGui")
        bg.Adornee = part
        bg.Parent = part
        bg.Size = UDim2.new(0, 100, 0, 100)
        bg.StudsOffset = Vector3.new(0, 3, 0)
        bg.AlwaysOnTop = true
        local TL = Instance.new("TextLabel", bg)
        TL.Text = txt1 .. "\n" .. txt2 .. "m"
        TL.Size = UDim2.new(1, 0, 0, 40)
        TL.Position = UDim2.new(0, 0, 0, 0)
        TL.BackgroundTransparency = 1
        TL.TextColor3 = Color3.new(1, 1, 1)
        TL.TextStrokeTransparency = 0.3
        TL.Font = Enum.Font.GothamBold
        TL.TextSize = 14
        local Img = Instance.new("ImageLabel", bg)
        Img.Position = UDim2.new(0, 20, 0, 40)
        Img.Size = UDim2.new(0, 60, 0, 60)
        Img.Image = part.Name:match("Chest") and "rbxassetid://108829629233834" or ""
        Img.BackgroundTransparency = 1


      else
        local bg = BG
        bg.TextLabel.Text = txt1 .. "\n" .. txt2 .. "m"
        bg.Enabled = enabled
      end
    end

TabHandles.gn:Toggle({
    Title = "杀戮光环",
    Desc = "自动打怪和动物",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["杀戮光环"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "自动砍树",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["自动砍树"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "自动进食",
    Desc = "自动吃东西，在范围内有食物的话",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["自动进食"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "瞬时互动",
    Desc = "与物品互动无冷却",
    Icon = "check",
    Value = false,
    Callback = function(Value)
if Value then
        if not connection then
          connection = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = 0
          end)
        end
       else
        if connection then
          connection:Disconnect()
        end
      end
    end
})

local function TeleportToThing(thing)
    -- 安全获取本地玩家角色部件
    local LP = game.Players.LocalPlayer
    local character = LP.Character or LP.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- 遍历场景寻找目标物品
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == thing then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                -- 将玩家传送到目标物品位置（保留原始高度偏移）
                humanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 2, 0)
                return true  -- 成功传送后退出
            end
        end
    end
    return false  -- 未找到目标
end

    local function tryEatFood(food)
      if not EatRemote then warn("🚫 No EatRemote") return end
      if not ReplicatedStorage:FindFirstChild("TempStorage") then warn("🚫 No TempStorage") return end
      WindUI:Notify({Title = "Rb脚本中心：", Content = "正在吃..." .. food.Name, Duration = 5})
      food.Parent = ReplicatedStorage.TempStorage
      local success, result = pcall(function()
        return EatRemote:InvokeServer(food)
      end)
      if success and result and result.Success then
        WindUI:Notify({Title = "Rb脚本中心：", Content = "进食成功" .. food.Name, Duration = 5})
        return
       else
        WindUI:Notify({Title = "Rb脚本中心：", Content = "进食失败", Duration = 5})
        return
      end
    end
    local PlayerList = {}
    for a, b in next, Plr:GetPlayers() do
      table.insert(PlayerList, b.Name)
    end

TabHandles.wpgn:Button({
    Title = "传送至篝火/营地",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 5, 0)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "传送至物品",
    Desc = "点击下方按钮即可将你传送至对应物品位置\n小心地图上的敌对生物",
})

TabHandles.wpgn:Paragraph({
    Title = "武器与防具"
})

TabHandles.wpgn:Button({
    Title = "左轮手枪",
    Icon = "bell",
    Callback = function()
TeleportToThing("Revolver")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "步枪",
    Icon = "bell",
    Callback = function()
TeleportToThing("Rifle")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "左轮子弹",
    Icon = "bell",
    Callback = function()
TeleportToThing("Revolver Ammo")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "步枪子弹",
    Icon = "bell",
    Callback = function()
TeleportToThing("Rifle Ammo")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "皮革护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Leather Body") 
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "铁质护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Iron Body")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "尖刺护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Thorn Body")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "废料"
})


TabHandles.wpgn:Button({
    Title = "螺丝",
    Desc = "价值：一个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Bolt")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "金属板",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Sheet Metal")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃收音机",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Old Radio")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃电风扇",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Broken Fan")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃微波炉",
    Desc = "价值：三个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Broken Microwave")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "燃料"
})


TabHandles.wpgn:Button({
    Title = "原木",
    Desc = "价值：一个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Log")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "椅子",
    Desc = "价值：一个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Chair")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "煤块",
    Desc = "价值：两个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Coal")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "汽油桶",
    Desc = "价值：三个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Fuel Canister")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "石油桶",
    Desc = "价值：四个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Oil Barrel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "食物"
})


TabHandles.wpgn:Button({
    Title = "胡萝卜",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Carrot")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "野浆果",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Berry")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "生肉腿",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Morsel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "生肉排",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Steak")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "熟肉腿",
    Desc = "价值：两格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Cooked Morsel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "熟肉排",
    Desc = "价值：两格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Cooked Steak")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "医疗"
})


TabHandles.wpgn:Button({
    Title = "绷带",
    Icon = "bell",
    Callback = function()
TeleportToThing("Bandage")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "医疗包",
    Icon = "bell",
    Callback = function()
TeleportToThing("MedKit")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.tsgn:Toggle({
    Title = "透视儿童",
    Icon = "check",
    Callback = function(Value)
AlienX["透视孩子"] = Value
    end
})

TabHandles.tsgn:Toggle({
    Title = "透视宝箱",
    Icon = "check",
    Callback = function(Value)
AlienX["透视宝箱"] = Value
    end
})

local csDropdown = TabHandles.fzgn:Dropdown({
    Title = "传送至玩家",
    Desc = "选择你要传送到的玩家",
    Values = PlayerList,
    Value = "",
    Callback = function(d)
if Plr[d] and Plr[d].Character and Plr[d].Character:FindFirstChild("HumanoidRootPart") then
          LP.Character:PivotTo(Plr[d].Character.HumanoidRootPart.CFrame)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..d,
            Duration = 2
        })
    end
})

TabHandles.fzgn:Toggle({
    Title = "玩家发光",
    Icon = "check",
    Callback = function(t)
if t then
        local light = Instance.new("PointLight", LP.Character.Head)
        light.Name = "light"
        light.Range = 9999999
        light.Brightness = 15
       else
        pcall(function()LP.Character.Head.light:remove()end)
      end
    end
})

    Plr.PlayerAdded:Connect(function(a)
        PlayerList = {}
        for a, b in next, Plr:GetPlayers() do
            table.insert(PlayerList, b.Name)
        end
        task.wait(.1)
        C_P:Refresh(PlayerList)
    end)
        Plr.PlayerRemoving:Connect(function(a)
        PlayerList = {}
        for a, b in next, Plr:GetPlayers() do
            table.insert(PlayerList, b.Name)
        end
        task.wait(.1)
        C_P:Refresh(PlayerList)
    end)
        local last1, last2, last3 = 0, 0, 0
    game["Run Service"].Heartbeat:Connect(function()
        local Now = tick()
        if not LP.Character then return end
        if not LP.Character:FindFirstChild("HumanoidRootPart") then return end
        LP.Character.Humanoid.WalkSpeed = WS
        for a, b in next, workspace.Items:GetChildren() do
            if b:GetAttribute(tostring(LP.UserId) .. "Opened") then
                table.insert(BL, b)
                if b:FindFirstChild("BillboardGui") then
                    b.BillboardGui:Destroy()
                end
            end
            if b.Name:match("Chest") and b:IsA("Model") and not table.find(BL, b) and b:FindFirstChild("Main") then
                AddESP(b, "宝箱", tostring(math.floor((LP.Character.HumanoidRootPart.Position - b.Main.Position).Magnitude)), AlienX["透视宝箱"])
            end
        end
        for a, b in next, workspace.Characters:GetChildren() do
            if b:GetAttribute("Lost") and b:GetAttribute("Lost") == false then
                table.insert(BL, b)
                if b:FindFirstChild("BillboardGui") then
                    b.BillboardGui:Destroy()
                end
            end
            if table.find({"Lost Child", "Lost Child1", "Lost Child2", "Lost Child3", "Dino Kid", "kraken kid", "Squid kid", "Koala Kid", "koala Kid", "koala"}, b.Name) and b:FindFirstChild("HumanoidRootPart") and not table.find(BL, b) then
                AddESP(b, "儿童", tostring(math.floor((LP.Character.HumanoidRootPart.Position - b.HumanoidRootPart.Position).Magnitude)), AlienX["透视孩子"])
            end
        end
        if AlienX["杀戮光环"] and Now - last1 >= 1.2 then
            last1 = Now
            if not ({["Old Axe"] = true, ["Good Axe"] = true, ["Spear"] = true, ["Hatchet"] = true, ["Bone Club"] = true})[tool.Name] then return end
            for a, b in next, workspace.Characters:GetChildren() do
              if b:IsA("Model") and b:FindFirstChild("HumanoidRootPart") and b:FindFirstChild("HitRegisters") then
                if (LP.Character.HumanoidRootPart.Position - b.HumanoidRootPart.Position).Magnitude <= 10 then
                  game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("ToolDamageObject"):InvokeServer(b, tool, true, LP.Character.HumanoidRootPart.CFrame)
                end
              end
            end
          end
    end)
TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end

Window:OnClose(function()
    print("Window closed")
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "成功", 
	Icon = "rbxassetid://119970903874014" 
})()
  elseif game.GameId == 7709344486 then 
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "偷走脑红正在制作中，请等待更新！", 
	Icon = "rbxassetid://119970903874014" 
})()

  else -- Not Support
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Rb脚本中心付费版：", 
	Text = "请在支持的服务器中加载脚本！", 
	Icon = "rbxassetid://119970903874014" 
})()
end
    end
})

TabHandles.gn:Button({
    Title = "加载森林中的99夜",
    Desc = "手动",
    Icon = "plus",
    Callback = function()
local WindUI = loadstring(game:HttpGet("https://pastebin.com/raw/qYYUTE4g"))()

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "ru",
    Translations = {
        ["ru"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Пример",
            ["WELCOME"] = "Добро пожаловать в WindUI!",
            ["LIB_DESC"] = "Библиотека для создания красивых интерфейсов",
            ["SETTINGS"] = "Настройки",
            ["APPEARANCE"] = "Внешний вид",
            ["FEATURES"] = "Функционал",
            ["UTILITIES"] = "Инструменты",
            ["UI_ELEMENTS"] = "UI Элементы",
            ["CONFIGURATION"] = "Конфигурация",
            ["SAVE_CONFIG"] = "Сохранить конфигурацию",
            ["LOAD_CONFIG"] = "Загрузить конфигурацию",
            ["THEME_SELECT"] = "Выберите тему",
            ["TRANSPARENCY"] = "Прозрачность окна"
        },
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "WindUI Example",
            ["WELCOME"] = "Welcome to WindUI!",
            ["LIB_DESC"] = "Beautiful UI library for Roblox",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

local Confirmed = false

WindUI:Popup({
    Title = gradient("RbScript Hub", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    IconThemed = true,
    Content = "欢迎使用付费版！",
    Buttons = {
        {
            Title = "取消",
            --Icon = "",
            Callback = function() end,
            Variant = "Secondary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "确认",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})

repeat wait() until Confirmed

local UserGui = Instance.new("ScreenGui", game.CoreGui)
local UserLabel = Instance.new("TextLabel", UserGui)
local UIGradient = Instance.new("UIGradient")

UserGui.Name = "UserGui"
UserGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UserGui.Enabled = true
UserLabel.Name = "UserLabel"
UserLabel.BackgroundColor3 = Color3.new(1, 1, 1)
UserLabel.BackgroundTransparency = 1
UserLabel.BorderColor3 = Color3.new(0, 0, 0)
UserLabel.Position = UDim2.new(0.80, 0.80, 0.00090, 0)
UserLabel.Size = UDim2.new(0, 135, 0, 50)
UserLabel.Font = Enum.Font.GothamSemibold
UserLabel.Text = "尊敬的："..game.Players.LocalPlayer.Character.Name.."付费版用户，欢迎使用Rb脚本中心！"
UserLabel.TextColor3 = Color3.new(1, 1, 1)
UserLabel.TextScaled = true
UserLabel.TextSize = 14
UserLabel.TextWrapped = true
UserLabel.Visible = true

UIGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.10, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.30, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.60, Color3.fromRGB(139, 0, 255)),
    ColorSequenceKeypoint.new(0.70, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.80, Color3.fromRGB(255, 127, 0)),
    ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 255, 0))
}
UIGradient.Rotation = 10
UIGradient.Parent = UserLabel

local TweenService = game:GetService("TweenService")
local tweeninfo = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
tween:Play()

local Window = WindUI:CreateWindow({
    Title = "Rb脚本中心",
    Icon = "rbxassetid://105933835532108",
    Author = "付费版 Yungengxin",
    Folder = "脚本中心",
    Size = UDim2.fromOffset(480, 360),
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#0f0c29"), Transparency = 1 },
        ["100"] = { Color = Color3.fromHex("#302b63"), Transparency = 0.9 },
    }, {
        Rotation = 45,
    }),
    Background = "rbxassetid://133155269071576",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        
            WindUI:Notify({
                Title = "您的用户ID：",
                Content = (game:GetService("Players").LocalPlayer.UserId),
                Duration = 3
            })
        end
    },
    SideBarWidth = 220,
    HideSearchBar = false,
    ScrollBarEnabled = true
})

Window:Tag({
    Title = "v1.0.0",
    Color = Color3.fromHex("#30ff6a")
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "通用", Opened = true }),
    gn = Window:Section({ Title = "功能", Opened = true }),
    Settings = Window:Section({ Title = "UI设置", Opened = true }),
    Utilities = Window:Section({ Title = "保存配置", Opened = true })
}

local TabHandles = {
    xx = Tabs.Main:Tab({ Title = "游戏信息", Icon = "layout-grid" }),
    Elements = Tabs.Main:Tab({ Title = "玩家功能", Icon = "layout-grid" }),
    gn = Tabs.gn:Tab({ Title = "游戏功能", Icon = "layout-grid" }),
    wpgn = Tabs.gn:Tab({ Title = "物品功能", Icon = "layout-grid" }),
    tsgn = Tabs.gn:Tab({ Title = "透视功能", Icon = "layout-grid" }),
    fzgn = Tabs.gn:Tab({ Title = "辅助功能", Icon = "layout-grid" }),
    Appearance = Tabs.Settings:Tab({ Title = "UI外观", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "调整配置", Icon = "settings" })
}

TabHandles.xx:Paragraph({
    Title = "您的游戏名称：",
    Desc = ""..game:GetService("Players").LocalPlayer.DisplayName.."",
    Buttons = {
        {
            Title = "复制您的名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.DisplayName)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Icon = "copy",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的游戏用户名：",
    Desc = ""..game:GetService("Players").LocalPlayer.Name.."",
    Buttons = {
        {
            Title = "复制您的用户名",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的用户名ID：",
    Desc = ""..game:GetService("Players").LocalPlayer.UserId.."",
    Buttons = {
        {
            Title = "复制您的用户名ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.UserId)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您的账号注册时间（天）：",
    Desc = ""..game:GetService("Players").LocalPlayer.AccountAge.."",
    Buttons = {
        {
            Title = "复制您的注册时间",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("Players").LocalPlayer.AccountAge)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器名称：",
    Desc = ""..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name.."",
    Buttons = {
        {
            Title = "复制您所在的服务器名称",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Paragraph({
    Title = "您所在的服务器ID：",
    Desc = ""..game.PlaceId.."",
    Buttons = {
        {
            Title = "复制您所在的服务器ID",
            Icon = "copy",
            Variant = "Primary",
            Callback = function() 
            
            setclipboard("无法复制")

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功复制！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})



TabHandles.xx:Paragraph({
    Title = "您的注入器：",
    Desc = ""..identifyexecutor().."",
    Image = "rbxassetid://129287693322764",
    ImageSize = 42, -- default 30
    Thumbnail = "rbxassetid://94512740386917",
    ThumbnailSize = 120, -- Thumbnail height
    Buttons = {
        {
            Title = "测试您注入器的UNC",
            Variant = "Primary",
            Callback = function() 
            Window:Dialog({
            Title = "Rb脚本中心",
            Content = "温馨提示：请勿点击多次，\n否则会造成游戏卡顿!",
            Icon = "bell",
            Buttons = {
                {
                    Title = "确定",
                    Variant = "Primary",
                    Callback = function() 
                        print("ok")
                    end,
                }
            }
        })
            loadstring(game:HttpGet"https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/unc")()

local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
		WindUI:Notify({
            Title = "Rb脚本中心---提示：",
            Content = "已成功执行，请在控制台查看UNC！",
            Icon = "bell",
            IconThemed = true, -- automatic color icon to theme 
            Duration = 5,
        })

            end,
            Icon = "bird",
        },
    }
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（主群）",
    Code = [[https://qm.qq.com/q/csDfI4BZNm]],
})

TabHandles.xx:Code({
    Title = "Rb脚本中心交流群（Discord群）",
    Code = [[https://discord.gg/qZmW3PYd9T]],
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度",
    Desc = "speedwalk",
    Value = { Min = 0, Max = 1000, Default = 16 },
    Callback = function(s)
        getgenv().WS = s
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家速度V2",
    Desc = "tpwalk",
    Value = { Min = 0, Max = 10, Default = 0 },
    Callback = function(value)
        local tpWalk = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local teleportDistance = value -- 每次传送的距离
local isTeleporting = true -- 是否正在传送

-- 禁用所有与移动相关的状态
local function DisableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
end

-- 启用所有与移动相关的状态
local function EnableDefaultMovement()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
end

-- 自定义传送函数
local function Teleport()
    if not isTeleporting or not rootPart or not humanoid then
        return
    end

    -- 获取移动方向
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude == 0 then
        return -- 如果没有移动方向，则停止传送
    end

    -- 计算传送向量
    local teleportVector = moveDirection * teleportDistance

    -- 检测前方是否有障碍物
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rootPart.Position, teleportVector, raycastParams)

    if raycastResult then
        -- 如果有障碍物，调整传送向量
        teleportVector = (raycastResult.Position - rootPart.Position).Unit * teleportDistance
    end

    -- 更新位置
    rootPart.CFrame = rootPart.CFrame + teleportVector
end

-- 控制开关函数
function tpWalk:Enabled(enabled)
    isTeleporting = enabled
    if enabled then DisableDefaultMovement() else EnableDefaultMovement() end
end

function tpWalk:GetEnabled()
    return isTeleporting
end

function tpWalk:SetSpeed(speed)
    teleportDistance = speed or 0.1
end

function tpWalk:GetSpeed()
    return teleportDistance
end

-- 每帧更新传送
RunService.Heartbeat:Connect(function()
    if isTeleporting then
        Teleport()
    end
end)

return tpWalk
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家跳跃",
    Desc = "JumpPower",
    Value = { Min = 0, Max = 1000, Default = 50 },
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "玩家重力",
    Desc = "gravity",
    Value = { Min = 0, Max = 1000, Default = 309 },
    Callback = function(value)
        game.Workspace.Gravity = value
    end
})



TabHandles.Elements:Divider()

local featureToggle = TabHandles.Elements:Toggle({
    Title = "夜视",
    Desc = "使你的游戏亮度提高",
    Value = false,
    Callback = function(state) 
        if state then
		    game.Lighting.Ambient = Color3.new(1, 1, 1)
            else
		    game.Lighting.Ambient = Color3.new(0, 0, 0)
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "夜视已开启，若仍不清楚可开启去雾功能" or "夜视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

xrayEnabled = false
function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local featureToggle = TabHandles.Elements:Toggle({
    Title = "地图透视",
    Desc = "Xray",
    Value = false,
    Callback = function(state) 
        if state then
		    xrayEnabled = true
    xray()
            else
		    xrayEnabled = false
    xray()
            end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = state and "地图透视已开启，若仍不清楚可开启其他视觉功能" or "地图透视已关闭",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local toggleState = false

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function NoFog()
    local c = game.Lighting
    c.FogEnd = 100000
    for r, v in pairs(c:GetDescendants()) do
        if v:IsA("Atmosphere") then
            v:Destroy()
        end
    end
end
TabHandles.Elements:Button({
    Title = "去雾",
    Desc = "一键去除游戏中的雾",
    Icon = "bell",
    Callback = function()
NoFog()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已去雾",
            Icon = "bell",
            Duration = 3
        })
    end
})
TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "飞行",
    Desc = "传统的飞行",
    Icon = "bell",
    Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/CPSm1udG"))()
local Sound = Instance.new("Sound",game:GetService("SoundService"))
            Sound.SoundId = "rbxassetid://2865227271"
            Sound:Play()
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "成功加载飞行",
            Icon = "bell",
            Duration = 3
        })
    end
})

hookfunction(getnamecallmethod, function()
  return
end)
for i, v in pairs({request, loadstring, base64.decode}) do
  if isfunctionhooked(v) or not isfunctionhooked(getnamecallmethod) then
    return
  end
end
local HttpService = game:GetService("HttpService")
local Plr = game:GetService("Players")
local LP = Plr.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientModule = require(LP:WaitForChild("PlayerScripts"):WaitForChild("Client"))
local EatRemote = ClientModule and ClientModule.Events and ClientModule.Events.RequestConsumeItem
getgenv().WS = LP.Character.Humanoid.WalkSpeed

local AlienX = {
      ["杀戮光环"] = false,
      ["自动砍树"] = false,
      ["自动进食"] = false,
      ["透视孩子"] = false,
      ["透视宝箱"] = false
    }

    local BL = {}
    local ClientModule = require(LP:WaitForChild("PlayerScripts"):WaitForChild("Client"))
    local EatRemote = ClientModule and ClientModule.Events and ClientModule.Events.RequestConsumeItem
    local function AddESP(part, txt1, txt2, enabled)
      local BG = part:FindFirstChild("BillboardGui")
      if not BG then
        local bg = Instance.new("BillboardGui")
        bg.Adornee = part
        bg.Parent = part
        bg.Size = UDim2.new(0, 100, 0, 100)
        bg.StudsOffset = Vector3.new(0, 3, 0)
        bg.AlwaysOnTop = true
        local TL = Instance.new("TextLabel", bg)
        TL.Text = txt1 .. "\n" .. txt2 .. "m"
        TL.Size = UDim2.new(1, 0, 0, 40)
        TL.Position = UDim2.new(0, 0, 0, 0)
        TL.BackgroundTransparency = 1
        TL.TextColor3 = Color3.new(1, 1, 1)
        TL.TextStrokeTransparency = 0.3
        TL.Font = Enum.Font.GothamBold
        TL.TextSize = 14
        local Img = Instance.new("ImageLabel", bg)
        Img.Position = UDim2.new(0, 20, 0, 40)
        Img.Size = UDim2.new(0, 60, 0, 60)
        Img.Image = part.Name:match("Chest") and "rbxassetid://108829629233834" or ""
        Img.BackgroundTransparency = 1


      else
        local bg = BG
        bg.TextLabel.Text = txt1 .. "\n" .. txt2 .. "m"
        bg.Enabled = enabled
      end
    end

TabHandles.gn:Toggle({
    Title = "杀戮光环",
    Desc = "自动打怪和动物",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["杀戮光环"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "自动砍树",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["自动砍树"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "自动进食",
    Desc = "自动吃东西，在范围内有食物的话",
    Icon = "check",
    Value = false,
    Callback = function(Value)
AlienX["自动进食"] = Value
    end
})

TabHandles.gn:Toggle({
    Title = "瞬时互动",
    Desc = "与物品互动无冷却",
    Icon = "check",
    Value = false,
    Callback = function(Value)
if Value then
        if not connection then
          connection = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = 0
          end)
        end
       else
        if connection then
          connection:Disconnect()
        end
      end
    end
})

local function TeleportToThing(thing)
    -- 安全获取本地玩家角色部件
    local LP = game.Players.LocalPlayer
    local character = LP.Character or LP.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- 遍历场景寻找目标物品
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == thing then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                -- 将玩家传送到目标物品位置（保留原始高度偏移）
                humanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 2, 0)
                return true  -- 成功传送后退出
            end
        end
    end
    return false  -- 未找到目标
end

    local function tryEatFood(food)
      if not EatRemote then warn("🚫 No EatRemote") return end
      if not ReplicatedStorage:FindFirstChild("TempStorage") then warn("🚫 No TempStorage") return end
      WindUI:Notify({Title = "Rb脚本中心：", Content = "正在吃..." .. food.Name, Duration = 5})
      food.Parent = ReplicatedStorage.TempStorage
      local success, result = pcall(function()
        return EatRemote:InvokeServer(food)
      end)
      if success and result and result.Success then
        WindUI:Notify({Title = "Rb脚本中心：", Content = "进食成功" .. food.Name, Duration = 5})
        return
       else
        WindUI:Notify({Title = "Rb脚本中心：", Content = "进食失败", Duration = 5})
        return
      end
    end
    local PlayerList = {}
    for a, b in next, Plr:GetPlayers() do
      table.insert(PlayerList, b.Name)
    end

TabHandles.wpgn:Button({
    Title = "传送至篝火/营地",
    Icon = "bell",
    Callback = function()
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 5, 0)
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "传送至物品",
    Desc = "点击下方按钮即可将你传送至对应物品位置\n小心地图上的敌对生物",
})

TabHandles.wpgn:Paragraph({
    Title = "武器与防具"
})

TabHandles.wpgn:Button({
    Title = "左轮手枪",
    Icon = "bell",
    Callback = function()
TeleportToThing("Revolver")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "步枪",
    Icon = "bell",
    Callback = function()
TeleportToThing("Rifle")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "左轮子弹",
    Icon = "bell",
    Callback = function()
TeleportToThing("Revolver Ammo")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "步枪子弹",
    Icon = "bell",
    Callback = function()
TeleportToThing("Rifle Ammo")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "皮革护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Leather Body") 
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "铁质护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Iron Body")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "尖刺护甲",
    Icon = "bell",
    Callback = function()
TeleportToThing("Thorn Body")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "废料"
})


TabHandles.wpgn:Button({
    Title = "螺丝",
    Desc = "价值：一个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Bolt")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "金属板",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Sheet Metal")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃收音机",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Old Radio")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃电风扇",
    Desc = "价值：两个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Broken Fan")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "废弃微波炉",
    Desc = "价值：三个废料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Broken Microwave")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "燃料"
})


TabHandles.wpgn:Button({
    Title = "原木",
    Desc = "价值：一个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Log")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "椅子",
    Desc = "价值：一个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Chair")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "煤块",
    Desc = "价值：两个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Coal")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "汽油桶",
    Desc = "价值：三个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Fuel Canister")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "石油桶",
    Desc = "价值：四个燃料",
    Icon = "bell",
    Callback = function()
TeleportToThing("Oil Barrel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "食物"
})


TabHandles.wpgn:Button({
    Title = "胡萝卜",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Carrot")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "野浆果",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Berry")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "生肉腿",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Morsel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "生肉排",
    Desc = "价值：一格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Steak")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "熟肉腿",
    Desc = "价值：两格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Cooked Morsel")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "熟肉排",
    Desc = "价值：两格饱食",
    Icon = "bell",
    Callback = function()
TeleportToThing("Cooked Steak")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Paragraph({
    Title = "医疗"
})


TabHandles.wpgn:Button({
    Title = "绷带",
    Icon = "bell",
    Callback = function()
TeleportToThing("Bandage")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.wpgn:Button({
    Title = "医疗包",
    Icon = "bell",
    Callback = function()
TeleportToThing("MedKit")
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "已传送至物品位置，若没有传送则为物品未刷新",
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.tsgn:Toggle({
    Title = "透视儿童",
    Icon = "check",
    Callback = function(Value)
AlienX["透视孩子"] = Value
    end
})

TabHandles.tsgn:Toggle({
    Title = "透视宝箱",
    Icon = "check",
    Callback = function(Value)
AlienX["透视宝箱"] = Value
    end
})

local csDropdown = TabHandles.fzgn:Dropdown({
    Title = "传送至玩家",
    Desc = "选择你要传送到的玩家",
    Values = PlayerList,
    Value = "",
    Callback = function(d)
if Plr[d] and Plr[d].Character and Plr[d].Character:FindFirstChild("HumanoidRootPart") then
          LP.Character:PivotTo(Plr[d].Character.HumanoidRootPart.CFrame)
        end
        WindUI:Notify({
            Title = "Rb脚本中心：",
            Content = "你已选择: "..d,
            Duration = 2
        })
    end
})

TabHandles.fzgn:Toggle({
    Title = "玩家发光",
    Icon = "check",
    Callback = function(t)
if t then
        local light = Instance.new("PointLight", LP.Character.Head)
        light.Name = "light"
        light.Range = 9999999
        light.Brightness = 15
       else
        pcall(function()LP.Character.Head.light:remove()end)
      end
    end
})

    Plr.PlayerAdded:Connect(function(a)
        PlayerList = {}
        for a, b in next, Plr:GetPlayers() do
            table.insert(PlayerList, b.Name)
        end
        task.wait(.1)
        C_P:Refresh(PlayerList)
    end)
        Plr.PlayerRemoving:Connect(function(a)
        PlayerList = {}
        for a, b in next, Plr:GetPlayers() do
            table.insert(PlayerList, b.Name)
        end
        task.wait(.1)
        C_P:Refresh(PlayerList)
    end)
        local last1, last2, last3 = 0, 0, 0
    game["Run Service"].Heartbeat:Connect(function()
        local Now = tick()
        if not LP.Character then return end
        if not LP.Character:FindFirstChild("HumanoidRootPart") then return end
        LP.Character.Humanoid.WalkSpeed = WS
        for a, b in next, workspace.Items:GetChildren() do
            if b:GetAttribute(tostring(LP.UserId) .. "Opened") then
                table.insert(BL, b)
                if b:FindFirstChild("BillboardGui") then
                    b.BillboardGui:Destroy()
                end
            end
            if b.Name:match("Chest") and b:IsA("Model") and not table.find(BL, b) and b:FindFirstChild("Main") then
                AddESP(b, "宝箱", tostring(math.floor((LP.Character.HumanoidRootPart.Position - b.Main.Position).Magnitude)), AlienX["透视宝箱"])
            end
        end
        for a, b in next, workspace.Characters:GetChildren() do
            if b:GetAttribute("Lost") and b:GetAttribute("Lost") == false then
                table.insert(BL, b)
                if b:FindFirstChild("BillboardGui") then
                    b.BillboardGui:Destroy()
                end
            end
            if table.find({"Lost Child", "Lost Child1", "Lost Child2", "Lost Child3", "Dino Kid", "kraken kid", "Squid kid", "Koala Kid", "koala Kid", "koala"}, b.Name) and b:FindFirstChild("HumanoidRootPart") and not table.find(BL, b) then
                AddESP(b, "儿童", tostring(math.floor((LP.Character.HumanoidRootPart.Position - b.HumanoidRootPart.Position).Magnitude)), AlienX["透视孩子"])
            end
        end
        if AlienX["杀戮光环"] and Now - last1 >= 1.2 then
            last1 = Now
            if not ({["Old Axe"] = true, ["Good Axe"] = true, ["Spear"] = true, ["Hatchet"] = true, ["Bone Club"] = true})[tool.Name] then return end
            for a, b in next, workspace.Characters:GetChildren() do
              if b:IsA("Model") and b:FindFirstChild("HumanoidRootPart") and b:FindFirstChild("HitRegisters") then
                if (LP.Character.HumanoidRootPart.Position - b.HumanoidRootPart.Position).Magnitude <= 10 then
                  game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvents"):WaitForChild("ToolDamageObject"):InvokeServer(b, tool, true, LP.Character.HumanoidRootPart.CFrame)
                end
              end
            end
          end
    end)
TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {
                {
                    Title = "确认",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "保存配置", 
                    Content = "保存为："..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "加载配置", 
                    Content = "正在加载："..configName.."\n上次保存："..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "错误", 
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end

Window:OnClose(function()
    print("Window closed")
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
    end
})

TabHandles.Appearance:Paragraph({
    Title = "自定义界面",
    Desc = "个性化您的体验",
    Image = "palette",
    ImageSize = 20,
    Color = "White"
})

local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "主题选择",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "主题应用",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "透明度",
    Value = {
        Min = 0,
        Max = 1,
        Default = 0.2
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

TabHandles.Appearance:Toggle({
    Title = "启用黑色主题",
    Desc = "使用黑色调主题方案",
    Value = true,
    Callback = function(state)
        WindUI:SetTheme(state and "Dark" or "Light")
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

TabHandles.Appearance:Button({
    Title = "创建新主题",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "创建主题",
            Content = "此功能很快就会推出",
            Buttons = {{
                Title = "确认",
                Variant = "Primary"
            }}
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "配置管理",
    Desc = "保存你的设置",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = "Player1",
    level = 1,
    inventory = {"sword", "shield", "potion"}
}

TabHandles.Config:Input({
    Title = "配置名称",
    Value = configName,
    Callback = function(value)
        configName = value
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)

    TabHandles.Config:Button({
        Title = "保存配置",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)

            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)

            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))

            if configFile:Save() then
                WindUI:Notify({
                    Title = "保存配置",
                    Content = "保存为：" .. configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({
                    Title = "错误",
                    Content = "保存失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "加载配置",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()

            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end

                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({
                    Title = "加载配置",
                    Content = "正在加载：" .. configName .. "\n上次保存：" .. lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })

                TabHandles.Config:Paragraph({
                    Title = "玩家数据",
                    Desc = string.format("名字: %s\n等级: %d\n库存: %s", MyPlayerData.name, MyPlayerData.level,
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({
                    Title = "错误",
                    Content = "加载失败",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "配置管理不可用",
        Desc = "此功能需要配置管理",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end

local footerSection = Window:Section({
    Title = "Rb脚本中心_付费版"
})

Window:OnClose(function()
    print("Window closed")

    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed")
end)
end